
var common = common || {};
common.getParameterByName = function(name,href)
{
    name = name.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]");
    var regexS = "[\\?&]" + name + "=([^&#]*)",
        regex = new RegExp(regexS),
        results = regex.exec(href);
    return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g," "))
};
common.zeroFill = function(number,width)
{
    if(number)
    {
        width -= number.toString().length;
        return width > 0 ? (new Array(width + (/\./.test(number) ? 2 : 1))).join("0") + number : number
    }
    return""
};
common.convertStringToEmbeddedEvaluation = function(s)
{
    return!s || s == "false" ? "ShowInModal" : s == "true" ? "Disabled" : s
};
Array.prototype.shuffle = function()
{
    for(var i = 0; i < this.length; i++)
    {
        var r = parseInt(Math.random() * this.length),
            obj = this[r];
        this[r] = this[i];
        this[i] = obj
    }
};
common.getFileNameWithoutExtension = function(fullPath)
{
    if(fullPath)
    {
        var startIndex = fullPath.indexOf("\\") >= 0 ? fullPath.lastIndexOf("\\") : fullPath.lastIndexOf("/"),
            filename = fullPath.substring(startIndex);
        if(filename.indexOf("\\") === 0 || filename.indexOf("/") === 0)
            filename = filename.substring(1);
        if(filename.lastIndexOf(".") >= 0)
            filename = filename.substring(0,filename.lastIndexOf("."));
        return filename
    }
    return""
};
common.isSilverlightInstalled = function(version)
{
    if(version == undefined)
        version = null;
    var isVersionSupported = false,
        container = null;
    try
    {
        var control = null,
            tryNS = false;
        if(window.ActiveXObject)
            try
            {
                control = new ActiveXObject("AgControl.AgControl");
                if(version === null)
                    isVersionSupported = true;
                else
                    if(control.IsVersionSupported(version))
                        isVersionSupported = true;
                control = null
            }
            catch(e)
            {
                tryNS = true
            }
        else
            tryNS = true;
        if(tryNS)
        {
            var plugin = navigator.plugins["Silverlight Plug-In"];
            if(plugin)
                if(version === null)
                    isVersionSupported = true;
                else
                {
                    var actualVer = plugin.description;
                    if(actualVer === "1.0.30226.2")
                        actualVer = "2.0.30226.2";
                    var actualVerArray = actualVer.split(".");
                    while(actualVerArray.length > 3)
                        actualVerArray.pop();
                    while(actualVerArray.length < 4)
                        actualVerArray.push(0);
                    var reqVerArray = version.split(".");
                    while(reqVerArray.length > 4)
                        reqVerArray.pop();
                    var requiredVersionPart,
                        actualVersionPart,
                        index = 0;
                    do
                    {
                        requiredVersionPart = parseInt(reqVerArray[index]);
                        actualVersionPart = parseInt(actualVerArray[index]);
                        index++
                    } while(index < reqVerArray.length && requiredVersionPart === actualVersionPart);
                    if(requiredVersionPart <= actualVersionPart && !isNaN(requiredVersionPart))
                        isVersionSupported = true
                }
        }
    }
    catch(e)
    {
        isVersionSupported = false
    }
    return isVersionSupported
};
var CourseParser = CourseParser || {};
CourseParser.parsePageTypesXml = function(xml,course)
{
    try
    {
        var typesElem = $(xml).find("type");
        typesElem.each(function()
        {
            var xmlType = $(this),
                newType = new PageType;
            newType.id = xmlType.attr("id");
            jQuery.ajax({type:"GET",url:"Types/Pages/" + newType.id + "/definition.xml",dataType:"XML",success:function(definitionXml)
            {
                var typeElem = $(definitionXml).find("type");
                newType.canSendCompletion = typeElem.attr("canSendCompletion") == "true";
                newType.behavior = typeElem.attr("behavior");
                newType.PlaybackSource = typeElem.attr("playbackSource");
                newType.PlaybackFile = typeElem.attr("playbackFile");
                newType.HideContentsWidget = typeElem.attr("hideContentsWidget") == "true";
                if(!newType.behavior)
                    newType.behavior = "None";
                newType.isValid = true
            },async:false});
            course.pageTypesArray.push(newType)
        })
    }
    catch(e)
    {
        courseController.alert("error with pagetypes:" + e.message)
    }
};
CourseParser.parseObjectivesXml = function(xml,course)
{
    var objectivesElem = $(xml).find("objective");
    objectivesElem.length > 0 && 
        objectivesElem.each(function()
        {
            var xmlObjective = $(this),
                newObjective = new Objective;
            newObjective.Name = xmlObjective.attr("name");
            newObjective.Id = xmlObjective.attr("id");
            var scenarioElem = xmlObjective.children("scenario");
            newObjective.Scenario.Title = scenarioElem.children("title").text();
            newObjective.Scenario.Text = scenarioElem.children("text").text();
            newObjective.Scenario.Type = scenarioElem.attr("type");
            var audioKey = scenarioElem.children("audio").attr("key");
            if(audioKey)
                newObjective.Scenario.AudioFile = audioKey;
            var questionsElem = xmlObjective.children("question");
            questionsElem.each(function()
            {
                var xmlQuestion = $(this),
                    newQuestion = new Question(newObjective);
                newQuestion.Id = xmlQuestion.attr("id");
                newQuestion.Type = xmlQuestion.attr("type");
                newQuestion.RadioButtonStyle = xmlQuestion.attr("radioButtonStyle");
                newQuestion.FeedbackStyle = xmlQuestion.attr("feedbackStyle");
                newQuestion.CheckedImage = xmlQuestion.attr("checkedImage");
                newQuestion.UncheckedImage = xmlQuestion.attr("uncheckedImage");
                CourseParser.parseMedia(newQuestion.Prompt,xmlQuestion.children("prompt"));
                CourseParser.parseMedia(newQuestion.FeedbackCorrect,xmlQuestion.children("feedbackCorrect"));
                CourseParser.parseMedia(newQuestion.FeedbackIncorrect,xmlQuestion.children("feedbackIncorrect"));
                if(!course.settings.ReviewMode)
                {
                    newQuestion.DistractorsCount = xmlQuestion.attr("distractorsCount");
                    newQuestion.Randomize = xmlQuestion.attr("randomize") == "true"
                }
                var questionChoicesElems = xmlQuestion.children("choice");
                questionChoicesElems.each(function()
                {
                    var xmlChoice = $(this),
                        newChoice = new QuestionChoice(newQuestion);
                    newChoice.Correct = xmlChoice.attr("correct") == "true";
                    newChoice.Text = xmlChoice.text();
                    newQuestion.Choices.push(newChoice);
                    newChoice.Id = newQuestion.Choices.length + ""
                });
                var questionFeedbacksElems = xmlQuestion.children("feedback");
                questionFeedbacksElems.each(function()
                {
                    var xmlFeedback = $(this),
                        newFeedbackMedia = new QuestionMedia;
                    CourseParser.parseMedia(newFeedbackMedia,xmlFeedback);
                    newQuestion.Feedbacks.push(newFeedbackMedia)
                });
                newObjective.Questions.push(newQuestion);
                if(!newQuestion.Id)
                    newQuestion.Id = newObjective.Questions.length
            });
            course.objectives.push(newObjective);
            if(!newObjective.Id)
                newObjective.Id = course.objectives.length
        })
};
CourseParser.parseMedia = function(obj,xml)
{
    if(obj && xml)
    {
        obj.Text = xml.text();
        obj.Image = xml.attr("image");
        obj.ImageAltText = xml.attr("imageAltText");
        obj.AudioFile = xml.attr("audioFile");
        obj.PageId = xml.attr("pageId")
    }
};
CourseParser.parseTracksXml = function(xml,course)
{
    try
    {
        var tracksElem = $(xml).find("tracks");
        if(tracksElem)
        {
            course.tracks.mapType = tracksElem.attr("mapType");
            course.tracks.trackSelectionMin = _nTrackSelectionMin;
            course.tracks.trackSelectionMax = _nTrackSelectionMax;
            course.tracks.canUserSelect = _bDisableTrackSelection == false;
            $(tracksElem).children("track").each(function()
            {
                var xmlTrack = $(this),
                    newTrack = new Track;
                newTrack.description = xmlTrack.find("description").text();
                newTrack.modules = xmlTrack.find("modules").text();
                newTrack.name = xmlTrack.find("name").text();
                newTrack.objectives = xmlTrack.find("objectives").text();
                newTrack.required = xmlTrack.attr("required") == "true";
                newTrack.state.isSelectedByAuthor = xmlTrack.attr("selected") == "true";
                newTrack.state.isSelected = newTrack.state.isSelectedByAuthor;
                course.tracks.items.push(newTrack)
            });
            course.settings.hasTracks = course.tracks.items.length > 0
        }
    }
    catch(e)
    {
    }
};
CourseParser.parsePagesXml = function(xml,course)
{
    var navigationElem = $(xml).find("navigation");
    course.name = navigationElem.attr("name");
    course.buildId = navigationElem.attr("buildId");
    var settingsElem = navigationElem.find("settings");
    course.settings.MediaURL = settingsElem.find("mediaURL").text();
    course.settings.MediaLocation = settingsElem.attr("mediaLocation");
    course.settings.CourseTranscript = settingsElem.find("courseTranscript").text();
    course.settings.SkipWelcomePage = settingsElem.attr("skipWelcomePage") === "true";
    course.settings.EmbeddedEvaluation = common.convertStringToEmbeddedEvaluation(settingsElem.attr("evaluationsDisabled"));
    if(settingsElem.attr("mustAnswerAllEvalQuestions"))
        course.settings.MustAnswerAllEvalQuestions = settingsElem.attr("mustAnswerAllEvalQuestions") === "true";
    course.settings.EvalServiceUri = settingsElem.attr("evaluationsServiceURL");
    course.settings.ReviewMode = settingsElem.attr("reviewMode") === "true";
    if(window.getAttemptId)
        course.settings.AttemptId = getAttemptId();
    else
    {
        course.settings.AttemptId = null;
        if(parent.MSAccessPointStudioSCORMPlayer != null)
        {
            if(parent.MSAccessPointStudioSCORMPlayer != "undefined")
                course.settings.AttemptId = parent.MSAccessPointStudioSCORMPlayer.attemptId
        }
        else
        {
            if(top == window)
                var win = opener ? opener.top.opener : top;
            else
                var win = top.opener;
            try
            {
                var name = "AttemptPK",
                    href = win.location.href;
                name = name.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]");
                var regexS = "[\\?&]" + name + "=([^&#]*)",
                    regex = new RegExp(regexS),
                    results = regex.exec(href);
                if(results != null)
                    course.settings.AttemptId = decodeURIComponent(results[1].replace(/\+/g," "))
            }
            catch(e)
            {
            }
        }
    }
    if(window.getEvaluationURL)
        course.settings.EvalServiceUri = getEvaluationURL();
    else
        course.settings.EvalServiceUri = location.protocol + "//" + location.host + "/LCServices/v1/embeddedEvaluation.svc/";
    course.settings.ShowResources = _bShowResources;
    course.settings.DiscussionLink = _sDiscussionLink;
    course.settings.ShowCaptions = _bShowCaptions;
    course.settings.ShowVideoCaptions = _bShowCaptions;
    course.settings.ShowGlossary = _bShowGlossary;
    course.settings.Downloadable = _bDownloadable;
    course.settings.UserCanToggleOptional = _bUserCanToggleOptional;
    course.settings.DisplayContentsWidget = _sTableOfContentsStyle !== "None";
    this.parsePages($(xml).find("private").children(),course.privatePages,null,course);
    this.parsePages($(xml).find("level0"),course.pageTree,null,course)
};
CourseParser.parsePages = function(xml,pages,parent,course)
{
    xml.each(function()
    {
        if(this.nodeName.substring(0,5) != "level")
            return true;
        var xmlPage = $(this),
            newPage = new Page;
        CourseParser.parsePage(newPage,xmlPage,parent,course);
        pages.push(newPage);
        if(newPage.isModule)
        {
            course.modules.push(newPage);
            newPage.moduleIndex = course.modules.length - 1
        }
        CourseParser.parsePages(xmlPage.children(),newPage.pages,newPage,course)
    })
};
CourseParser.parsePage = function(newPage,xmlPage,parent,course)
{
    newPage.course = course;
    newPage.name = xmlPage.attr("name");
    newPage.id = xmlPage.attr("pageId");
    if(newPage.id == undefined)
        newPage.id = "";
    newPage.time = xmlPage.attr("time") - 0;
    newPage.contribute = xmlPage.attr("contribute");
    newPage.isModule = !newPage.id;
    newPage.videoWidth = xmlPage.attr("videoWidth") - 0;
    newPage.videoHeight = xmlPage.attr("videoHeight") - 0;
    newPage.navRestrictionMsg = xmlPage.children("navRestrictionMsg").text();
    var pageVideoFile = xmlPage.attr("videoFile");
    if(pageVideoFile)
    {
        var newMediaFile = new MediaFile(course,pageVideoFile);
        newMediaFile.videoClickToPlay = xmlPage.attr("videoClickToPlay") == "true";
        newMediaFile.videoAutoNavigate = xmlPage.attr("videoAutoNavigate") == "true";
        newMediaFile.videoPreventSkipAhead = xmlPage.attr("videoPreventSkipAhead") == "true";
        newMediaFile.videoStretchToFit = xmlPage.attr("videoStretchToFit") == "true";
        newMediaFile.mustPlayAll = xmlPage.attr("videoMustPlayAll") == "true";
        newPage.videoFiles.push(newMediaFile)
    }
    xmlPage.children("video").each(function()
    {
        var xmlMediaFile = $(this),
            newMediaFile = new MediaFile(course,xmlMediaFile.attr("fileName"));
        newMediaFile.videoClickToPlay = xmlMediaFile.attr("videoClickToPlay") == "true";
        newMediaFile.videoAutoNavigate = xmlMediaFile.attr("videoAutoNavigate") == "true";
        newMediaFile.videoPreventSkipAhead = xmlMediaFile.attr("videoPreventSkipAhead") == "true";
        newMediaFile.videoStretchToFit = xmlMediaFile.attr("videoStretchToFit") == "true";
        newMediaFile.mustPlayAll = xmlMediaFile.attr("videoMustPlayAll") == "true";
        newMediaFile.UseTranscript = xmlMediaFile.attr("useTranscript") == "true";
        newPage.videoFiles.push(newMediaFile)
    });
    var pageAudioFile = xmlPage.attr("audioFile");
    pageAudioFile && 
        newPage.audioFiles.push(new MediaFile(course,pageAudioFile));
    xmlPage.children("audio").each(function()
    {
        var xmlMediaFile = $(this),
            newMediaFile = new MediaFile(course,xmlMediaFile.attr("fileName"));
        newMediaFile.PlayOnPageDisplay = xmlMediaFile.attr("playOnPageDisplay") == "true";
        newMediaFile.UseTranscript = xmlMediaFile.attr("useTranscript") == "true";
        newMediaFile.mustPlayAll = xmlMediaFile.attr("mustPlayAll") == "true";
        newPage.audioFiles.push(newMediaFile)
    });
    newPage.mustCompletePrevModules = xmlPage.attr("mustCompletePrevModules") == "true";
    newPage.modulesToComplete = xmlPage.attr("modulesToComplete");
    newPage.mustCompleteRequiredPages = xmlPage.attr("mustCompleteRequiredPages") == "true";
    newPage.objectives = xmlPage.attr("objectives");
    newPage.parent = parent;
    for(var guid = xmlPage.attr("typeId"),
        i = 0; i < course.pageTypesArray.length; i++)
        if(course.pageTypesArray[i].id == guid)
        {
            newPage.pageType = course.pageTypesArray[i];
            break
        }
    if(!newPage.pageType)
        newPage.pageType = new PageType;
    if(newPage.pageType.id == "")
        newPage.pageType.id = guid;
    switch(newPage.pageType.PlaybackSource)
    {
        case"KnowledgeCheck":
        case"PostTest":
        case"StandAloneAssessment":
        case"StandAloneQuestion":
            jQuery.ajax({type:"GET",url:newPage.getPageContentFolderPath() + "page.xml",dataType:"XML",async:false,success:function(xml)
            {
                newPage.Assessment = CourseParser.parseAssessmentXml(xml,course,newPage);
                if(newPage.Assessment)
                {
                    course.Assessments.push(newPage.Assessment);
                    newPage.Assessment.Type = newPage.pageType.PlaybackSource
                }
            }});
            break;
        case"Branching":
            jQuery.ajax({type:"GET",url:newPage.getPageContentFolderPath() + "page.xml",dataType:"XML",async:false,success:function(xml)
            {
                newPage.BranchingGraph = CourseParser.parseBranchingXml(xml,course,newPage)
            }})
    }
    if(newPage.contribute == "o")
    {
        newPage.pageState.isOptionalByAuthor = true;
        newPage.isOptional = true
    }
};
CourseParser.parseAssessmentXml = function(xml,course,page)
{
    var assessment = new Assessment(course,page);
    try
    {
        assessment.Type = page.pageType.PlaybackSource;
        var assessmentElem = $(xml).find("assessment");
        if(assessmentElem)
        {
            assessment.QuestionSelection = assessmentElem.attr("questionSelection");
            if(!assessment.QuestionSelection)
                assessment.QuestionSelection = "Random";
            assessment.PassingMethod = assessmentElem.attr("passingMethod");
            if(!assessment.PassingMethod)
                assessment.PassingMethod = "MustAnswerAll";
            assessment.PreTestType = assessmentElem.attr("preTestType");
            assessment.ShowTestedOutContent = assessmentElem.attr("showTestedOutContent") == "true";
            if(assessment.Type == "StandAloneAssessment" || assessment.isTestOut())
                assessment.CompletesCourse = true;
            else
                assessment.CompletesCourse = assessmentElem.attr("completesCourse") == "true";
            assessment.PassingPercentage = +assessmentElem.attr("passingPercentage");
            if(!course.settings.ReviewMode)
            {
                assessment.Order = assessmentElem.attr("orderOfQuestions");
                if(!assessment.Order)
                    assessment.Order = "Random";
                assessment.FeedbackType = assessmentElem.attr("feedbackType");
                if(!assessment.FeedbackType)
                    assessment.FeedbackType = "Immediate";
                assessment.AttemptsToPass = +assessmentElem.attr("attemptsToPass");
                assessment.AttemptsToAnswer = +assessmentElem.attr("attemptsToAnswer");
                assessment.HideAnswers = assessmentElem.attr("hideAnswers") == "true";
                assessment.TimeLimit = +assessmentElem.attr("timeLimit") * 60;
                var hoursBeforeNextAttempt = assessmentElem.attr("hoursBeforeNextAttempt");
                if(hoursBeforeNextAttempt)
                    assessment.HoursBeforeNextAttemptList = hoursBeforeNextAttempt.split(",")
            }
            else
            {
                assessment.Order = "None";
                assessment.FeedbackType = "Immediate"
            }
            assessment.IntroductionText = assessmentElem.children("introductionText").text();
            assessment.ReviewPassedText = assessmentElem.children("reviewPassedText").text();
            assessment.ReviewFailedText = assessmentElem.children("reviewFailedText").text();
            assessment.ReviewIncompleteText = assessmentElem.children("reviewIncompleteText").text();
            var objectivesElem = assessmentElem.find("objective");
            objectivesElem.each(function()
            {
                var objectiveXml = $(this),
                    objective = course.getObjective(objectiveXml.attr("id")),
                    newAssObjective = new AssessmentObjective(objective,assessment);
                newAssObjective.QuestionsToAnswer = +objectiveXml.attr("questionsToAnswer");
                switch(assessment.QuestionSelection)
                {
                    case"Random":
                        newAssObjective.StandAloneQuestion = objective.getQuestion(+objectiveXml.attr("questionId"));
                        if(newAssObjective.StandAloneQuestion)
                        {
                            newAssObjective.QuestionsToUse = 1;
                            assessment.AttemptsToPass = 0
                        }
                        else
                            if(course.settings.ReviewMode)
                                newAssObjective.QuestionsToUse = objective.Questions.length;
                            else
                            {
                                newAssObjective.QuestionsToUse = +objectiveXml.attr("questionsToUse");
                                if(newAssObjective.QuestionsToUse > objective.Questions.length)
                                    newAssObjective.QuestionsToUse = objective.Questions.length
                            }
                        break;
                    case"Manual":
                        var attemptsElem = objectiveXml.find("attempt");
                        attemptsElem.each(function()
                        {
                            var attemptXml = $(this),
                                newAttempt = new AssessmentAttempt(+attemptXml.attr("number")),
                                questionsXml = attemptXml.children("question");
                            questionsXml.each(function()
                            {
                                var questionXml = $(this),
                                    newQuestion = objective.getQuestion(+questionXml.attr("id"));
                                newAttempt.Questions.push(newQuestion)
                            });
                            newAssObjective.Attempts.push(newAttempt)
                        })
                }
                assessment.Objectives.push(newAssObjective)
            })
        }
    }
    catch(e)
    {
    }
    return assessment
};
CourseParser.parseBranchingXml = function(xml,course,page)
{
    var graph = new BranchingGraph(course,page);
    try
    {
        var graphElem = $(xml).find("graph");
        if(graphElem)
        {
            graph.navigation = graphElem.attr("navigation") === "biDirectional" ? BranchingGraphNavigation.BiDirectional : BranchingGraphNavigation.ForwardOnly;
            graph.usePlayerNavigation = graphElem.attr("usePlayerNavigation") === "true";
            graph.completion = graphElem.attr("completion") === "firstAttempt" ? BranchingGraphCompletion.FirstAttempt : BranchingGraphCompletion.FinalAttempt;
            graph.maxAttempts = +graphElem.attr("maxAttempts") || 0;
            graph.maxAttempts >= 0 || (graph.maxAttempts = 0);
            var startBranchId = +graphElem.attr("startBranchId"),
                branchesElem = graphElem.find("branch");
            branchesElem.each(function()
            {
                var branchElem = $(this),
                    branchId = +branchElem.attr("id");
                if(!branchId)
                    return;
                var branch = new BranchingPoint(graph);
                branch.id = branchId;
                var pageId = branchElem.attr("pageId");
                pageId && (branch.contentPageId = pageId);
                branch.isCompletionPoint = branchElem.attr("completionPoint") === "true";
                branch.mustCompleteContent = branchElem.attr("mustCompleteContent") === "true";
                var questionId = branchElem.attr("questionId");
                branch.question = courseController.getQuestionFromId(questionId);
                if(branch.question)
                {
                    var showAlternatives = branchElem.attr("showAlternatives");
                    branch.showAlternativeResults = showAlternatives === "onPass" ? BranchingPointShowAlternativeResults.OnPass : showAlternatives === "always" ? BranchingPointShowAlternativeResults.Always : BranchingPointShowAlternativeResults.Never;
                    branch.mustPass = branchElem.attr("mustPass") === "true";
                    branch.mustCompleteFeedback = branchElem.attr("mustCompleteFeedback") === "true";
                    var feedbackContentPosition = branchElem.attr("feedbackContentPosition");
                    if(feedbackContentPosition === "beforeFeedback")
                        branch.feedbackContentPosition = BranchingPointFeedbackContentPosition.BeforeFeedback;
                    else
                        if(feedbackContentPosition === "afterFeedback")
                            branch.feedbackContentPosition = BranchingPointFeedbackContentPosition.AfterFeedback;
                        else
                            if(feedbackContentPosition === "skipFeedback")
                                branch.feedbackContentPosition = BranchingPointFeedbackContentPosition.SkipFeedback;
                    if(branch.question.Type === "choice")
                        for(var i = 0,
                            feedbackBranchId; i < Math.min(branchElem.find("feedback").length,branch.question.Feedbacks.length); i++)
                        {
                            feedbackBranchId = +branchElem.find("feedback").eq(i).attr("branchId");
                            feedbackBranchId && branch.forwardArcs.push(new BranchingArc(graph,branchId,feedbackBranchId,branch.question.Feedbacks[i]))
                        }
                    else
                    {
                        var feedbackIncorrectBranchId = +branchElem.find("feedbackIncorrect").first().attr("branchId"),
                            feedbackCorrectBranchId = +branchElem.find("feedbackCorrect").first().attr("branchId");
                        feedbackIncorrectBranchId && branch.forwardArcs.push(new BranchingArc(graph,branchId,feedbackIncorrectBranchId,branch.question.FeedbackIncorrect));
                        feedbackCorrectBranchId && branch.forwardArcs.push(new BranchingArc(graph,branchId,feedbackCorrectBranchId,branch.question.FeedbackCorrect))
                    }
                }
                else
                {
                    var nextBranchId = +branchElem.attr("nextBranchId");
                    if(nextBranchId)
                    {
                        var arc = new BranchingArc(graph,branchId,nextBranchId,null);
                        branch.forwardArcs.push(arc);
                        branch.activeArc = arc
                    }
                }
                graph.branchingPoints.push(branch);
                branchId === startBranchId && (graph.startPoint = branch)
            })
        }
    }
    catch(e)
    {
    }
    return graph
};
CourseParser.parsePageLinksXml = function(xml,course)
{
    try
    {
        var pageLinksListElem = $(xml).find("pageLinksList");
        if(pageLinksListElem)
        {
            $(pageLinksListElem).children("pageLinks").each(function()
            {
                var pageLinksElem = $(this),
                    id = pageLinksElem.attr("id");
                $(pageLinksElem).children("pageLink").each(function()
                {
                    var pageLinkElem = $(this),
                        newPageLink = new PageLink;
                    newPageLink.id = id;
                    newPageLink.type = pageLinkElem.attr("type");
                    newPageLink.source = pageLinkElem.attr("source");
                    newPageLink.duration = pageLinkElem.attr("duration") - 0;
                    newPageLink.name = pageLinkElem.find("name").text();
                    newPageLink.description = pageLinkElem.find("description").text();
                    course.PageLinkArray.push(newPageLink)
                })
            });
            course.settings.hasTracks = course.tracks.items.length > 0
        }
    }
    catch(e)
    {
    }
};
var Resources = [];
CourseParser.parseResourcesXml = function(xml)
{
    try
    {
        var resourcesElem = $(xml).find("data");
        resourcesElem.each(function()
        {
            var xmlResource = $(this);
            Resources[xmlResource.attr("name")] = xmlResource.children("value").text()
        })
    }
    catch(e)
    {
    }
};
CourseParser.parseMediaManifest = function(xml,course)
{
    try
    {
        var itemsElem = $(xml).find("item");
        itemsElem.each(function()
        {
            var xmlVideoItem = $(this),
                videoItem = new VideoItem;
            if(xmlVideoItem.attr("required") == "yes" || xmlVideoItem.attr("required") == "true")
                videoItem.required = true;
            videoItem.mediaPath = xmlVideoItem.attr("mediaPath");
            videoItem.namingScheme = xmlVideoItem.attr("namingScheme");
            videoItem.videoPlayerType = xmlVideoItem.attr("videoPlayerType");
            videoItem.uiLabel = xmlVideoItem.attr("uiLabel");
            videoItem.userDownload = xmlVideoItem.attr("userDownload") === "true";
            course.mediaManifest.videoItems.push(videoItem)
        })
    }
    catch(e)
    {
    }
};
CourseParser.getTrueFalseTrackInfo = function(xml,obj)
{
    if(!obj)
        return;
    obj.yes = {}, obj.no = {};
    var trueElem = $("true",xml);
    obj.yes.required = trueElem.attr("required");
    obj.yes.removed = trueElem.attr("removed");
    var falseElem = $("false",xml);
    obj.no.required = falseElem.attr("required");
    obj.no.removed = falseElem.attr("removed")
};
CourseParser.parseTrackSelectionFromProfile = function(xml,settings)
{
    var settingsElem = $(xml).find("settings");
    settings.callServices = settingsElem.attr("callServices") == "true";
    settings.debug = settingsElem.attr("debug") == "true";
    settings.alwaysShowDialog = settingsElem.attr("alwaysShowDialog") == "true";
    settings.urlProfile = settingsElem.attr("urlProfile");
    settings.urlReportsTo = settingsElem.attr("urlReportsTo");
    settings.static = settingsElem.attr("static") == "true";
    if(settings.static)
    {
        settings.urlProfile = "userprofile.xml";
        settings.urlReportsTo = "reportsto.xml"
    }
    settings.FTE = {};
    settings.peopleManager = {};
    settings.organizations = [];
    CourseParser.getTrueFalseTrackInfo($("isFTE",settingsElem),settings.FTE);
    CourseParser.getTrueFalseTrackInfo($("isPeopleManager",settingsElem),settings.peopleManager);
    $("organizations",settingsElem).children("org").each(function()
    {
        var org = {};
        org.alias = $(this).attr("alias");
        if(org.alias)
        {
            org.name = $(this).attr("name");
            CourseParser.getTrueFalseTrackInfo(this,org);
            settings.organizations[org.alias] = org
        }
    })
};
var views = views || {};
views.utils = {};
views.utils.createMetroButton = function(id,text)
{
    return $('<a href="#" class="MetroButton"><div class="MetroIcon" id="' + id + '"></div><div class="MetroButtonLabel">' + text + "</div></a>")
};
views.utils.createButton = function(id,text,theClass)
{
    var classAddIn = theClass ? " class=" + theClass : " ",
        s = $('<button role="button" type="button" id="' + id + '"' + classAddIn + ">" + text + "</button>");
    return s
};
views.utils.getCheckedItems = function(container,name,separator)
{
    for(var checkedList = "",
        inputList = container.find("input[name=" + name + "]:checked"),
        i = 0; i < inputList.length; i++)
        if(checkedList == "")
            checkedList += $(inputList[i]).val();
        else
            checkedList += separator + $(inputList[i]).val();
    return checkedList
};
views.utils.sizeDialog = function(dialogDiv,height,width)
{
    if(dialogDiv.dialog("isOpen") === true)
    {
        dialogDiv.dialog("option","height",$(window).height() - (height ? height : 40));
        dialogDiv.dialog("option","width",$(window).width() - (width ? width : 40));
        dialogDiv.dialog("option","position","center")
    }
};
views.utils.fileExists = function(fileName)
{
    var retval;
    $.ajax({url:fileName,async:false,success:function()
    {
        retval = true
    },statusCode:{404:function()
    {
        retval = false
    }}});
    return retval
};
views.utils.getAssessmentSRStatusText = function(status)
{
    switch(status)
    {
        case 0:
            return Resources.Assessment_Status_NotStarted;
        case 1:
            return Resources.Assessment_Status_InProgress;
        case 2:
            return Resources.Assessment_Status_Failed;
        case 3:
            return Resources.Assessment_Status_Passed
    }
    return""
};
views.utils.getMediaTimeDisplayFormat = function(currentTime,duration,showHours)
{
    var tcHours = parseInt(currentTime / 3600),
        tcMins = parseInt(currentTime / 60),
        tcSecs = parseInt(currentTime - tcMins * 60),
        ttHours = parseInt(duration / 3600),
        ttMins = parseInt(duration / 60),
        ttSecs = parseInt(duration - ttMins * 60);
    if(tcSecs < 10)
        tcSecs = "0" + tcSecs;
    if(ttSecs < 10)
        ttSecs = "0" + ttSecs;
    if(tcMins < 10)
        tcMins = "0" + tcMins;
    if(ttMins < 10)
        ttMins = "0" + ttMins;
    if(tcHours < 10)
        tcHours = "0" + tcHours;
    if(ttHours < 10)
        ttHours = "0" + ttHours;
    return showHours ? '<span class="currentTime">' + tcHours + ":" + tcMins + ":" + tcSecs + '</span> / <span class="totalTime">' + ttHours + ":" + ttMins + ":" + ttSecs + "</span>" : '<span class="currentTime">' + tcMins + ":" + tcSecs + '</span> / <span class="totalTime">' + ttMins + ":" + ttSecs + "</span>"
};
function Caption()
{
    this.timeStart = "";
    this.timeEnd = "";
    this.text = "";
    this.isDisplayed = false
}
function KeyPoint()
{
    this.timeStart = "";
    this.timeEnd = "";
    this.type = "text";
    this.text = "";
    this.imageFile = "";
    this.backgroundColor = "#FF000000";
    this.opacity = "";
    this.position = "";
    this.isDisplayed = false
}
function Language()
{
    this.code = null;
    this.defaultCode = null;
    this.languageArray = [];
    this.count = 0;
    this.reloading = false;
    this.init = function()
    {
        for(var i in _aLanguages)
            if(i != "shuffle")
            {
                this.languageArray[i] = _aLanguages[i];
                this.count++
            }
        this.defaultCode = _sLanguageDefault;
        this.browserLangauge = navigator.userLanguage ? navigator.userLanguage.toLowerCase() : navigator.language.toLowerCase();
        var savedLanguage = courseController.course.scormState.getState("language");
        if(savedLanguage != "")
            this.code = savedLanguage;
        else
            if(this.count > 1)
            {
                for(var i in this.languageArray)
                    if(this.browserLangauge == i)
                        this.code = this.browserLangauge;
                if(this.code == null)
                {
                    if(this.browserLangauge.indexOf("-") != -1)
                    {
                        var sBaseBrowser = this.browserLangauge.substring(0,this.browserLangauge.indexOf("-"));
                        for(i in this.languageArray)
                            if(i != "shuffle")
                            {
                                var sBaseOptions = this.languageArray[i].substring(0,this.languageArray[i].indexOf("-"));
                                if(sBaseBrowser == sBaseOptions)
                                    this.code = this.languageArray[i]
                            }
                    }
                    if(this.code == null)
                        this.code = this.defaultCode
                }
            }
            else
                this.code = this.defaultCode
    }
}
function MediaFile(course,fileName)
{
    this.Course = course;
    this.PlayOnPageDisplay = true;
    this.UseTranscript = false;
    this.FileName = fileName;
    this.FilePath = "";
    this.videoClickToPlay = false;
    this.videoAutoNavigate = false;
    this.videoPreventSkipAhead = false;
    this.videoStretchToFit = false;
    this.mustPlayAll = false;
    this.videoWidth = 0;
    this.videoHeight = 0
}
MediaFile.prototype.getFilePath = function(mediaManifestItem)
{
    if(this.FilePath)
        return this.FilePath;
    var fileName = this.FileName;
    if(mediaManifestItem)
    {
        if(mediaManifestItem.namingScheme)
            fileName = mediaManifestItem.namingScheme.replace("*",common.getFileNameWithoutExtension(fileName));
        if(mediaManifestItem.mediaPath)
            return mediaManifestItem.mediaPath.replace(/\/?$/,"/") + fileName
    }
    return this.Course.getMediaFolderPath() + fileName
};
function MediaManifest()
{
    this.videoItems = [];
    this.getVideoItemByPlayerType = function(type)
    {
        if(type)
            for(var i = 0; i < this.videoItems.length; i++)
                if(this.videoItems[i].videoPlayerType.toLowerCase() == type.toLowerCase())
                    return this.videoItems[i]
    };
    this.getFirstMpgVideoItem = function()
    {
        for(var i = 0; i < this.videoItems.length; i++)
            if(this.videoItems[i].videoPlayerType.toLowerCase() == "wmv" || this.videoItems[i].videoPlayerType.toLowerCase() == "mp4")
                return this.videoItems[i]
    };
    this.getMpgVideoItemByUiLabel = function(uiLabel)
    {
        if(uiLabel)
            for(var i = 0; i < this.videoItems.length; i++)
                if((this.videoItems[i].videoPlayerType.toLowerCase() == "wmv" || this.videoItems[i].videoPlayerType.toLowerCase() == "mp4") && this.videoItems[i].uiLabel.toLowerCase() == uiLabel.toLowerCase())
                    return this.videoItems[i];
        return this.getFirstMpgVideoItem()
    };
    this.getVideoUiLabels = function()
    {
        for(var qualities = [],
            i = 0; i < this.videoItems.length; i++)
            if(this.videoItems[i].videoPlayerType.toLowerCase() == "wmv" || this.videoItems[i].videoPlayerType.toLowerCase() == "mp4")
            {
                for(var j = 0,
                    index = -1; j < qualities.length; j++)
                    if(qualities[j] === this.videoItems[i].uiLabel)
                    {
                        index = j;
                        break
                    }
                index === -1 && qualities.push(this.videoItems[i].uiLabel)
            }
        return qualities
    };
    this.getFirstDownloadableVideoItem = function()
    {
        for(var i = 0; i < this.videoItems.length; i++)
            if((this.videoItems[i].videoPlayerType.toLowerCase() == "wmv" || this.videoItems[i].videoPlayerType.toLowerCase() == "mp4") && this.videoItems[i].userDownload)
                return this.videoItems[i]
    };
    this.getFirstRequiredVideoItem = function()
    {
        for(var i = 0; i < this.videoItems.length; i++)
            if(this.videoItems[i].required)
                return this.videoItems[i]
    }
}
function VideoItem()
{
    this.required = false;
    this.mediaPath = "";
    this.namingScheme = "";
    this.videoPlayerType = "";
    this.uiLabel = "";
    this.userDownload = false;
    this.getMimeType = function()
    {
        if(this.videoPlayerType)
            switch(this.videoPlayerType.toLowerCase())
            {
                case"wmv":
                    return"video/x-ms-wmv";
                case"streaming":
                    return"text/xml"
            }
        return'video/mp4; codecs="avc1.42E01E, mp4a.40.2"'
    }
}
function Observer()
{
    this.observations = []
}
function Observation(name,func)
{
    this.name = name;
    this.func = func
}
Observer.prototype = {observe:function(name,func)
{
    for(var exists = false,
        i = 0,
        ilen = this.observations.length; i < ilen; i++)
    {
        var observer = this.observations[i];
        if(observer.name == name && observer.func == func)
        {
            exists = true;
            break
        }
    }
    !exists && 
        this.observations.push(new Observation(name,func))
},unobserve:function(name,func)
{
    for(var i = 0,
        ilen = this.observations.length; i < ilen; i++)
    {
        var observer = this.observations[i];
        if(observer.name == name && observer.func == func)
        {
            this.observations.splice(i,1);
            break
        }
    }
},fire:function(name,data,scope)
{
    for(var observers = [],
        i = 0,
        ilen = this.observations.length; i < ilen; i++)
    {
        var observer = this.observations[i];
        observer.name == name && 
            observers.push(observer)
    }
    for(var i = 0,
        ilen = observers.length; i < ilen; i++)
        observers[i].func.call(scope || window,data)
}};
function PageLink()
{
    this.id = "";
    this.type = "";
    this.source = "";
    this.duration = 0;
    this.name = "";
    this.description = ""
}
function Page()
{
    this.id = null;
    this.isModule = false;
    this.moduleIndex = -1;
    this.name = "";
    this.pages = [];
    this.privatePages = [];
    this.contribute = "n";
    this.Assessment = null;
    this.navNext = null;
    this.navPrevious = null;
    this.parent = null;
    this.pageState = new PageState;
    this.pageType = new PageType;
    this.course = null;
    this.fileName = "page.htm";
    this.videoFiles = [];
    this.audioFiles = [];
    this.mustCompletePrevModules = false;
    this.modulesToComplete = "";
    this.mustCompleteRequiredPages = false;
    this.objectives = "";
    this.time = 0;
    this.navRestrictionMsg = ""
}
Page.prototype.isRequired = function()
{
    return this.pageState.isOptionalByTrackSelection ? false : this.course.settings.ShowOptionalContent && this.pageState.isOptionalByObjectiveCompletion ? this.course.settings.ShowTestedOutContent : this.pageState.isOptional ? this.course.settings.ShowOptionalContent : true
};
Page.prototype.setComplete = function(skipCheckCompletion)
{
    this.pageState.status = "P";
    this.course.recordPathmark();
    !skipCheckCompletion && 
        this.course.checkCompletion(this);
    this.course.updateLockedModules();
    this.course.observer.fire("pageStatusChanged",this)
};
Page.prototype.setIncomplete = function()
{
    this.pageState.status = "I";
    this.course.recordPathmark()
};
Page.prototype.isComplete = function()
{
    return this.pageState.status == "P"
};
Page.prototype.getModule = function()
{
    for(var module = this; module.parent != null; module = module.parent);
    return module
};
Page.prototype.getPageContentFolderPath = function()
{
    return this.course.getContentFolderPath() + "content" + common.zeroFill(this.id,5) + "/"
};
Page.prototype.getFilePath = function()
{
    return this.getPageContentFolderPath() + this.fileName
};
Page.prototype.hasAudio = function()
{
    return this.audioFiles.length > 0
};
Page.prototype.getPlayOnPageDisplayAudio = function()
{
    for(var i = 0; i < this.audioFiles.length; i++)
        if(this.audioFiles[i].PlayOnPageDisplay)
            return this.audioFiles[i];
    return null
};
Page.prototype.hasVideo = function()
{
    return this.videoFiles.length > 0
};
Page.prototype.getVideo = function(fileName)
{
    if(fileName)
        for(var i = 0; i < this.videoFiles.length; i++)
            if(this.videoFiles[i].FileName.toLowerCase() == fileName.toLowerCase())
                return this.videoFiles[i];
    return null
};
Page.prototype.getVideoCaptionsPath = function(mediaFileName)
{
    return mediaFileName ? this.getPageContentFolderPath() + common.getFileNameWithoutExtension(mediaFileName) + "_Video_cc.xml" : ""
};
Page.prototype.getAudioCaptionsPath = function(mediaFileName)
{
    return mediaFileName ? this.getPageContentFolderPath() + common.getFileNameWithoutExtension(mediaFileName) + "_Audio_cc.xml" : ""
};
Page.prototype.getAudioTranscriptPath = function(mediaFileName)
{
    return mediaFileName ? this.getPageContentFolderPath() + common.getFileNameWithoutExtension(mediaFileName) + "_Audio_transcript.htm" : ""
};
Page.prototype.getVideoTranscriptPath = function(mediaFileName)
{
    return mediaFileName ? this.getPageContentFolderPath() + common.getFileNameWithoutExtension(mediaFileName) + "_Video_transcript.htm" : ""
};
Page.prototype.getKeyPointsPath = function(mediaFileName)
{
    return mediaFileName ? this.getPageContentFolderPath() + common.getFileNameWithoutExtension(mediaFileName) + "_cmd.xml" : ""
};
Page.prototype.getKeyPointsImagesPath = function()
{
    return this.getPageContentFolderPath() + "Images/"
};
Page.prototype.toString = function()
{
    return this.name + " (" + this.id + ")"
};
Page.prototype.unload = function()
{
    this.Assessment && 
        this.Assessment.unload();
    this.BranchingGraph && 
        this.BranchingGraph.unload()
};
Page.prototype.isTestOut = function()
{
    return this.id == "test-out"
};
Page.prototype.canSendCompletion = function()
{
    if(this.pageType.canSendCompletion)
        return true;
    var playOnPageDisplayAudio = this.getPlayOnPageDisplayAudio();
    return playOnPageDisplayAudio && playOnPageDisplayAudio.mustPlayAll ? true : false
};
WelcomePage.prototype = new Page;
WelcomePage.prototype.constructor = WelcomePage;
function WelcomePage()
{
    this.fileName = "Welcome.htm";
    this.name = Resources.Menu_Welcome_Menu_Text
}
WelcomePage.prototype.getFilePath = function()
{
    return this.course.getContentFolderPath() + this.fileName
};
TestOutPage.prototype = new Page;
TestOutPage.prototype.constructor = TestOutPage;
function TestOutPage()
{
    this.id = "test-out";
    this.name = Resources.Testout_AppBar_Button_Text
}
TestOutPage.prototype.getFilePath = function()
{
    return this.course.getCurrentLanguageFolderPath() + this.fileName
};
function PageState()
{
    this.isLocked = false;
    this.isOptional = false;
    this.isOptionalByAuthor = false;
    this.isOptionalByObjectiveCompletion = false;
    this.isOptionalByTrackSelection = false;
    this.isVisited = false;
    this.status = "N"
}
function PageType()
{
    this.id = "";
    this.canSendCompletion = false;
    this.version = "";
    this.behavior = "None";
    this.PlaybackSource = "";
    this.PlaybackFile = "";
    this.isValid = false;
    this.HideContentsWidget = false
}
function SbaSet()
{
    this.name = "";
    this.pages = []
}
function ScormState(course)
{
    this.bookmark = null;
    this.isComplete = false;
    this.course = course;
    this.stateArray = [];
    this._sSep = "{{";
    this.ScormTerminated = false
}
ScormState.prototype.load = function()
{
    this.bookmark = getBookmark();
    for(var sSuspend = getSuspendData(),
        aParts = sSuspend.split(this._sSep),
        i = 0; i < aParts.length; i = i + 2)
        if(aParts[i] != "")
            this.stateArray[aParts[i]] = aParts[i + 1];
    var status = getCompletionStatus();
    if(status == "completed" || status == "passed")
        this.isComplete = true
};
ScormState.prototype.calcSuspendData = function()
{
    this.stateArray.VERSION = this.course.version;
    this.stateArray.DATE = (new Date).getTime();
    var sSuspend = "";
    for(var i in this.stateArray)
        if(i != "shuffle")
            sSuspend += i + this._sSep + this.stateArray[i] + this._sSep;
    return sSuspend
};
ScormState.prototype.save = function()
{
    if(!this.ScormTerminated)
    {
        setBookmark(this.course.currentPageIndex + "");
        var sSuspend = this.calcSuspendData();
        if(sSuspend)
        {
            setSuspendData(sSuspend);
            var API = getAPI();
            if(API && API.LMSServiceCallErrArray && API.LMSServiceCallErrArray.length > 0)
            {
                courseController.alert("A communication error will not allow this course to save your interactions with this course. Please close the course and relaunch the course when your network connection will allow this course to communicate information to the server.");
                _bErrDisplayed = true
            }
            scormCommit()
        }
    }
};
ScormState.prototype.getBookmark = function()
{
    return this.course.currentPageIndex + ""
};
ScormState.prototype.getScormBookmark = function()
{
    return getBookmark() + ""
};
ScormState.prototype.getSuspendData = function()
{
    return getSuspendData()
};
ScormState.prototype.getCompletionStatus = function()
{
    return getCompletionStatus()
};
function RestorePoint(bookmark,suspendData,completionStatus)
{
    this.bookmark = bookmark;
    this.suspendData = suspendData;
    this.completionStatus = completionStatus
}
ScormState.prototype.getRestorePoint = function()
{
    return new RestorePoint(this.getBookmark(),this.getSuspendData(),this.getCompletionStatus())
};
ScormState.prototype.setRestorePoint = function(restorePoint)
{
    setBookmark(restorePoint.bookmark);
    setSuspendData(restorePoint.suspendData);
    this.setCompletionStatus(restorePoint.completionStatus);
    scormCommit();
    this.stateArray = [];
    this.load()
};
ScormState.prototype.setState = function(sId,sValue)
{
    this.stateArray[sId] = sValue
};
ScormState.prototype.getState = function(sId)
{
    return this.stateArray[sId] ? this.stateArray[sId] : ""
};
ScormState.prototype.getLearnerName = function()
{
    return getLearnerName()
};
ScormState.prototype.getLearnerId = function()
{
    return getLearnerId()
};
ScormState.prototype.setCompletionStatus = function(status)
{
    setCompletionStatus(status);
    if(status == "completed")
        this.isComplete = true
};
ScormState.prototype.setPassFail = function(status)
{
    setPassFail(status)
};
ScormState.prototype.getScore = function()
{
    return getScore()
};
ScormState.prototype.setScore = function(score)
{
    setScore(score / 100)
};
ScormState.prototype.getTotalTime = function()
{
    return getTotalTime()
};
function Settings()
{
    this.SkipWelcomePage = false;
    this.ShowResources = true;
    this.hasTracks = false;
    this.EmbeddedEvaluation = "ShowInModal";
    this.MustAnswerAllEvalQuestions = true;
    this.EvalServiceUri = "";
    this.AttemptId = "";
    this.ReviewMode = false;
    this.CourseTranscript = "";
    this.MediaURL = "";
    this.MediaLocation = "";
    this.DiscussionLink = "";
    this.ShowGlossary = true;
    this.Downloadable = false;
    this.ShowTestedOutContent = false;
    this.UserCanToggleOptional = false;
    this.ShowOptionalContent = true;
    this.TOCCollapsed = false;
    this.ShowCaptions = true;
    this.ShowVideoCaptions = true;
    this.videoRetry = 0;
    this.VideoPlaybackRate = 1;
    this.VideoQuality = "VideoQualityMedium";
    this.VideoFullScreen = false;
    this.HighContrastModeActive = false
}
function Track()
{
    this.description = "";
    this.modules = "";
    this.name = "";
    this.objectives = "";
    this.required = false;
    this.state = new TrackState
}
function Tracks()
{
    this.mapType = "";
    this.canUserSelect = true;
    this.trackSelectionMin = 0;
    this.trackSelectionMax = 0;
    this.items = [];
    this.reset = function()
    {
        for(var i = 0; i < this.items.length; i++)
        {
            this.items[i].state.isSelected = false;
            this.items[i].state.isActive = true;
            this.items[i].required = false
        }
    }
}
function TrackState()
{
    this.isSelected = false;
    this.isSelectedByAuthor = false;
    this.isActive = true
}
AssessmentLocation = {Intro:0,Question:1,Review:2};
AssessmentStatus = {NotAttempted:0,Incomplete:1,Failed:2,Passed:3};
function Assessment(courseModel,pageModel)
{
    this.Course = courseModel;
    this.Page = pageModel;
    this.Observer = new Observer;
    this.Type = null;
    this.PreTestType = null;
    this.QuestionSelection = null;
    this.PassingMethod = null;
    this.PassingPercentage = 0;
    this.CompletesCourse = false;
    this.Order = null;
    this.FeedbackType = null;
    this.ShowTestedOutContent = false;
    this.AttemptsToPass = 0;
    this.AttemptsToAnswer = 0;
    this.Attempts = 1;
    this.HideAnswers = false;
    this.TimeLimit = new Date(null);
    this.HoursBeforeNextAttemptList = [];
    this.IntroductionText = null;
    this.ReviewPassedText = null;
    this.ReviewFailedText = null;
    this.ReviewIncompleteText = null;
    this.Objectives = [];
    this.QuestionsPresented = [];
    this.Status = AssessmentStatus.NotAttempted;
    this.LocationIndex = -1;
    this.Location = AssessmentLocation.Intro;
    this.Initialized = false;
    this.ViewState = new AssessmentViewState(this);
    this.IsObjectiveSet = false
}
Assessment.prototype.init = function()
{
    switch(this.Type)
    {
        case"StandAloneQuestion":
            this.LocationIndex = 0;
            this.Location = AssessmentLocation.Question;
            break;
        default:
            this.Location = AssessmentLocation.Intro;
            this.LocationIndex = -1
    }
    this.Status = AssessmentStatus.NotAttempted;
    this.IsObjectiveSet = false;
    this.QuestionsPresented = [];
    this.Order == "Random" && 
        this.Objectives.shuffle();
    for(var i = 0; i < this.Objectives.length; i++)
    {
        var assessmentObjective = this.Objectives[i];
        if(assessmentObjective.Objective.Complete)
            continue;
        if(!assessmentObjective.isRequiredByTrack())
            continue;
        assessmentObjective.init();
        var shuffledQuestions = [];
        if(assessmentObjective.StandAloneQuestion != null)
            shuffledQuestions.push(assessmentObjective.StandAloneQuestion);
        else
            switch(this.QuestionSelection)
            {
                case"Random":
                    shuffledQuestions = assessmentObjective.Objective.Questions;
                    break;
                case"Manual":
                    var questionsToUse = 0;
                    if(assessmentObjective.Attempts.length > 0)
                    {
                        var attemptNumber = (this.Attempts - 1) % assessmentObjective.Attempts.length;
                        if(assessmentObjective.Attempts.length > attemptNumber)
                        {
                            shuffledQuestions = assessmentObjective.Attempts[attemptNumber].Questions;
                            questionsToUse = shuffledQuestions.length
                        }
                    }
                    assessmentObjective.QuestionsToUse = questionsToUse
            }
        this.Order != "None" && !this.Course.settings.ReviewMode && 
            shuffledQuestions.shuffle();
        for(var j = 0; j < assessmentObjective.QuestionsToUse; j++)
        {
            var questionCopied = jQuery.extend(true,{},shuffledQuestions[j]);
            questionCopied.AssessmentObj = assessmentObjective;
            questionCopied.setChoicesOrder();
            this.QuestionsPresented.push(questionCopied);
            assessmentObjective.QuestionOrder.push(questionCopied)
        }
    }
    this.Order == "Mixed" && 
        this.QuestionsPresented.shuffle();
    this.countQuestions() == 0 && 
        this.setPassed();
    this.Initialized = true
};
Assessment.prototype.getScormData = function()
{
    var assessmentData = [];
    assessmentData.push(this.Status);
    assessmentData.push(this.Attempts);
    assessmentData.push(this.LocationIndex);
    if(this.QuestionsPresented.length > 0)
    {
        for(var questionsData = [],
            i = 0; i < this.QuestionsPresented.length; i++)
        {
            var scormQuestionData = [],
                question = this.QuestionsPresented[i];
            scormQuestionData.push(question.Objective.Id);
            scormQuestionData.push(question.Id);
            scormQuestionData.push(question.AnswerCount);
            scormQuestionData.push(question.getScormChoicesOrder());
            scormQuestionData.push(question.Answer ? question.Answer : "X");
            scormQuestionData.push(Number(question.Scored));
            scormQuestionData.push(question.Latency);
            questionsData.push(scormQuestionData.join("-"))
        }
        assessmentData.push(questionsData.join(","))
    }
    else
        assessmentData.push("X");
    return assessmentData.join("::")
};
Assessment.prototype.loadScormData = function()
{
    var scormData = this.Course.scormState.getState(this.Page.id);
    if(!scormData)
        return;
    var assessmentData = scormData.split("::");
    this.Status = +assessmentData[0];
    if(assessmentData.length == 1)
        return;
    this.Attempts = +assessmentData[1];
    this.LocationIndex = +assessmentData[2];
    var scormQuestionPresented = assessmentData[3].split(",");
    if(scormQuestionPresented.length > 0 && scormQuestionPresented[0] != "X")
        for(var questionInfo = [],
            questionStatus,
            assessmentObjective,
            i = 0; i < scormQuestionPresented.length; i++)
        {
            questionInfo = scormQuestionPresented[i].split("-");
            assessmentObjective = this.getObjective(questionInfo[0]);
            questionStatus = jQuery.extend(true,{},assessmentObjective.Objective.getQuestion(questionInfo[1]));
            questionStatus.AssessmentObj = assessmentObjective;
            questionStatus.AnswerCount = +questionInfo[2];
            for(var choicesOrder = questionInfo[3].split("~"),
                j = 0; j < choicesOrder.length; j++)
                questionStatus.ChoicesOrder.push(questionStatus.Choices[+choicesOrder[j] - 1]);
            questionStatus.setCorrectAnswer();
            questionStatus.Answer = questionInfo[4] == "X" ? "" : questionInfo[4];
            questionStatus.Scored = Boolean(+questionInfo[5]);
            questionStatus.Latency = +questionInfo[6];
            assessmentObjective.QuestionOrder.push(questionStatus);
            if(this.QuestionSelection == "Manual")
                assessmentObjective.QuestionsToUse = assessmentObjective.QuestionOrder.length;
            this.QuestionsPresented.push(questionStatus)
        }
    this.setLocation(this.LocationIndex);
    this.Initialized = true
};
Assessment.prototype.saveScormData = function()
{
    this.Course.scormState.setState(this.Page.id,this.getScormData());
    this.Course.scormState.save()
};
Assessment.prototype.resetScormData = function()
{
    this.Course.scormState.setState(this.Page.id,"")
};
Assessment.prototype.hasAttemptsLeft = function()
{
    return this.AttemptsToPass == 0 || this.Attempts < this.AttemptsToPass
};
Assessment.prototype.hasUnrequiredObjectives = function()
{
    for(var i = 0; i < this.Objectives.length; i++)
        if(this.Objectives[i].Objective.Complete || !this.Objectives[i].isRequiredByTrack())
            return true;
    return false
};
Assessment.prototype.getObjective = function(id)
{
    for(var i = 0; i < this.Objectives.length; i++)
    {
        var assessmentObjective = this.Objectives[i];
        if(assessmentObjective.Objective.Id == id)
            return assessmentObjective
    }
    return null
};
Assessment.prototype.getCurrentQuestion = function()
{
    return this.QuestionsPresented[this.LocationIndex]
};
Assessment.prototype.countQuestions = function()
{
    return this.QuestionsPresented.length
};
Assessment.prototype.countScoredQuestions = function()
{
    for(var nCount = 0,
        i = 0; i < this.QuestionsPresented.length; i++)
        if(this.QuestionsPresented[i].Scored)
            nCount++;
    return nCount
};
Assessment.prototype.countAnsweredQuestions = function()
{
    for(var nCount = 0,
        i = 0; i < this.QuestionsPresented.length; i++)
        if(this.QuestionsPresented[i].Answer != "")
            nCount++;
    return nCount
};
Assessment.prototype.countUnansweredQuestions = function()
{
    return this.countQuestions() - this.countAnsweredQuestions()
};
Assessment.prototype.countUnscoredQuestions = function()
{
    return this.countQuestions() - this.countScoredQuestions()
};
Assessment.prototype.answeredAllQuestions = function()
{
    return this.countQuestions() - this.countAnsweredQuestions() == 0
};
Assessment.prototype.countCorrectQuestions = function()
{
    for(var nCount = 0,
        i = 0; i < this.QuestionsPresented.length; i++)
        if(this.QuestionsPresented[i].isCorrect())
            nCount++;
    return nCount
};
Assessment.prototype.scoreAllQuestions = function()
{
    for(var i = 0; i < this.QuestionsPresented.length; i++)
        this.QuestionsPresented[i].score();
    this.updateStatus()
};
Assessment.prototype.hasNextLocation = function()
{
    switch(this.Type)
    {
        case"StandAloneQuestion":
            return false;
        default:
            return this.LocationIndex < this.QuestionsPresented.length
    }
};
Assessment.prototype.canMoveNext = function()
{
    return this.hasNextLocation && (this.Location !== AssessmentLocation.Question || this.FeedbackType === "Delayed" || this.QuestionsPresented[this.LocationIndex].Scored && this.QuestionsPresented[this.LocationIndex].isBlocked())
};
Assessment.prototype.hasPreviousLocation = function()
{
    switch(this.Type)
    {
        case"StandAloneQuestion":
            return false;
        default:
            return this.LocationIndex > -1
    }
};
Assessment.prototype.setNextLocation = function()
{
    this.setLocation(this.LocationIndex + 1)
};
Assessment.prototype.setPreviousLocation = function()
{
    this.setLocation(this.LocationIndex - 1)
};
Assessment.prototype.setReviewLocation = function()
{
    this.setLocation(this.QuestionsPresented.length)
};
Assessment.prototype.setIntroLocation = function()
{
    this.setLocation(-1)
};
Assessment.prototype.setLocation = function(index)
{
    var prevLocation = this.LocationIndex;
    this.stopCurrentQuestionLatencyTimer();
    if(index < 0)
    {
        this.LocationIndex = -1;
        this.Location = AssessmentLocation.Intro
    }
    else
        if(index >= this.QuestionsPresented.length)
        {
            this.LocationIndex = this.QuestionsPresented.length;
            this.Location = AssessmentLocation.Review
        }
        else
            if(index > -1 && index < this.QuestionsPresented.length)
            {
                this.LocationIndex = index;
                this.Location = AssessmentLocation.Question
            }
    if(this.LocationIndex != prevLocation)
    {
        this.saveScormData();
        this.Observer.fire("locationChanged",this)
    }
};
Assessment.prototype.stopCurrentQuestionLatencyTimer = function()
{
    this.getCurrentQuestion() && 
        this.getCurrentQuestion().stopLatencyTimer()
};
Assessment.prototype.checkAnswer = function()
{
    var question = this.getCurrentQuestion();
    question && 
        question.score()
};
Assessment.prototype.retryQuestion = function()
{
    var question = this.getCurrentQuestion();
    question && 
        question.retry()
};
Assessment.prototype.isCompleted = function()
{
    switch(this.Status)
    {
        case AssessmentStatus.Failed:
        case AssessmentStatus.Passed:
            return true
    }
    return false
};
Assessment.prototype.isTestOut = function()
{
    switch(this.PreTestType)
    {
        case"NonAdaptive":
        case"Adaptive":
            return true
    }
    return false
};
Assessment.prototype.pass = function()
{
    for(var i = 0; i < this.QuestionsPresented.length; i++)
    {
        var question = this.QuestionsPresented[i];
        question.Answer = question.CorrectAnswer;
        question.Scored = true
    }
    this.updateStatus()
};
Assessment.prototype.fail = function()
{
    for(var i = 0; i < this.QuestionsPresented.length; i++)
    {
        for(var question = this.QuestionsPresented[i],
            j = 0; j < question.ChoicesOrder.length; j++)
            if(!question.ChoicesOrder[j].Correct)
            {
                question.Answer = j + 1 + "";
                break
            }
        question.Scored = true
    }
    this.updateStatus()
};
Assessment.prototype.setPassed = function(skipCheckCompletion)
{
    this.Status = AssessmentStatus.Passed;
    if(!this.IsObjectiveSet)
    {
        setObjective(null,"Assessment." + this.Page.id + "." + this.Attempts,"completed","100","passed",this.getScore() / 100 + "",null);
        this.IsObjectiveSet = true
    }
    this.Page.setComplete(skipCheckCompletion)
};
Assessment.prototype.setFailed = function(skipCheckCompletion)
{
    this.Status = AssessmentStatus.Failed;
    if(!this.IsObjectiveSet)
    {
        setObjective(null,"Assessment." + this.Page.id + "." + this.Attempts,"completed","100","failed",this.getScore() / 100 + "",null);
        this.IsObjectiveSet = true
    }
    !this.hasAttemptsLeft() && 
        this.Page.setComplete(skipCheckCompletion)
};
Assessment.prototype.getScore = function()
{
    return Math.round(100 * this.countCorrectQuestions() / this.countAnsweredQuestions())
};
Assessment.prototype.unload = function()
{
    this.stopCurrentQuestionLatencyTimer();
    this.saveScormData()
};
Assessment.prototype.updateStatus = function()
{
    var nCorrect = 0,
        nTotal = 0;
    switch(this.PreTestType)
    {
        case"NonAdaptive":
            var passingMethod = "PassingPercentage";
            break;
        case"Adaptive":
            var passingMethod = "PassObjectives";
            break;
        default:
            var passingMethod = this.PassingMethod
    }
    if(passingMethod == "PassObjectives")
        for(var i = 0; i < this.Objectives.length; i++)
            this.Objectives[i].QuestionsCorrect = 0;
    for(var i = 0; i < this.QuestionsPresented.length; i++)
        if(this.QuestionsPresented[i].Scored)
        {
            nTotal++;
            if(this.QuestionsPresented[i].isCorrect())
            {
                nCorrect++;
                if(passingMethod == "PassObjectives")
                    this.QuestionsPresented[i].AssessmentObj.QuestionsCorrect++
            }
        }
    switch(passingMethod)
    {
        case"MustAnswerAll":
            nTotal == this.countQuestions() && 
                this.setPassed(true);
            break;
        case"PassingPercentage":
            if(nTotal == this.countQuestions())
                if(100 * nCorrect / this.countQuestions() >= this.PassingPercentage)
                    this.setPassed(true);
                else
                    this.setFailed(true);
            break;
        case"PassObjectives":
            if(nTotal == this.countQuestions())
            {
                for(var bAllPassed = true,
                    i = 0; i < this.Objectives.length; i++)
                {
                    if(!this.Objectives[i].isRequiredByTrack())
                        continue;
                    if(this.Objectives[i].Objective.Complete)
                        continue;
                    if(!this.Objectives[i].isPassed())
                    {
                        bAllPassed = false;
                        break
                    }
                }
                if(bAllPassed)
                    this.setPassed(true);
                else
                    this.setFailed(true);
                if(this.PreTestType == "Adaptive")
                {
                    for(var i = 0; i < this.Objectives.length; i++)
                        if(this.Objectives[i].isPassed())
                            this.Objectives[i].Objective.Complete = true;
                    this.Course.scormState.setState("OBJ",this.Course.getCompletedObjectivesCsv());
                    this.Course.loadPageNavigation();
                    this.Course.updateForAssessments()
                }
            }
    }
    this.saveScormData();
    this.isCompleted() && !this.sbaMode && 
        this.Course.checkCompletion(this.Page)
};
function AssessmentAttempt(number)
{
    this.Number = number;
    this.Questions = []
}
function AssessmentObjective(objective,assessment)
{
    this.Objective = objective;
    this.Assessment = assessment;
    this.QuestionOrder = [];
    this.Attempts = [];
    this.QuestionsToUse = 0;
    this.QuestionsToAnswer = 0;
    this.QuestionsCorrect = 0;
    this.StandAloneQuestion = null;
    this.ScenarioAudioPlayed = false
}
AssessmentObjective.prototype.init = function()
{
    this.QuestionOrder = [];
    this.QuestionsCorrect = 0
};
AssessmentObjective.prototype.isPassed = function()
{
    return this.QuestionsCorrect >= this.QuestionsToAnswer
};
AssessmentObjective.prototype.isRequiredByTrack = function()
{
    return this.Objective ? this.Objective.IsRequiredByTrack : true
};
function AssessmentViewState(assessment)
{
    this.Assessment = assessment
}
AssessmentViewState.prototype.navBarVisible = function()
{
    switch(this.Assessment.Type)
    {
        case"StandAloneQuestion":
            return false
    }
    return true
};
AssessmentViewState.prototype.navButtonsVisible = function()
{
    switch(this.Assessment.Type)
    {
        case"StandAloneQuestion":
            return false
    }
    return true
};
AssessmentViewState.prototype.checkAnswerButtonVisible = function()
{
    switch(this.Assessment.FeedbackType)
    {
        case"Delayed":
            return false
    }
    return true
};
AssessmentViewState.prototype.questionsNavButtonVisible = function()
{
    return this.Assessment.countQuestions() > 0
};
function Objective()
{
    this.Id = "";
    this.Name = "";
    this.Questions = [];
    this.IsRequiredByTrack = true;
    this.Scenario = new Scenario(this);
    this.Complete = false
}
Objective.prototype.hasScenario = function()
{
    return!this.Scenario.isEmpty()
};
Objective.prototype.getQuestion = function(id)
{
    if(id)
        for(var i = 0; i < this.Questions.length; i++)
        {
            var question = this.Questions[i];
            if(question.Id == id)
                return question
        }
    return null
};
function Question(objective)
{
    this.Id = "";
    this.Type = "";
    this.DistractorsCount = 0;
    this.RadioButtonStyle = "";
    this.FeedbackStyle = "";
    this.CheckedImage = "";
    this.UncheckedImage = "";
    this.Randomize = false;
    this.CorrectAnswer = "";
    this.Answer = "";
    this.AnswerCount = 0;
    this.Objective = objective;
    this.AssessmentObj = null;
    this.Prompt = new QuestionMedia;
    this.FeedbackCorrect = new QuestionMedia;
    this.FeedbackIncorrect = new QuestionMedia;
    this.Choices = [];
    this.ChoicesOrder = [];
    this.Feedbacks = [];
    this.Scored = false;
    this.PrevAnswer = "";
    this.Latency = 0;
    this.ResponseTimeMark = null;
    this.Observer = new Observer
}
Question.prototype.getPromptAudioFilePath = function()
{
    return this.AssessmentObj.Assessment.Course.getMediaFolderPath() + this.Prompt.AudioFile
};
Question.prototype.getScenarioAudioFilePath = function()
{
    return this.AssessmentObj.Assessment.Course.getMediaFolderPath() + this.AssessmentObj.Objective.Scenario.AudioFile
};
Question.prototype.getFeedbackAudioFilePath = function()
{
    var audioFile = this.getFeedbackAudio();
    return audioFile ? this.AssessmentObj.Assessment.Course.getMediaFolderPath() + audioFile : ""
};
Question.prototype.hasAttemptsLeft = function()
{
    if(this.AssessmentObj)
    {
        var attemptsToAnswer = this.AssessmentObj.Assessment.AttemptsToAnswer;
        if(attemptsToAnswer == 0 || this.AnswerCount < attemptsToAnswer)
            return true
    }
    return false
};
Question.prototype.getAnswersArray = function()
{
    return this.Answer.split("~")
};
Question.prototype.getAnswerByOriginalOrder = function(sAnswer)
{
    if(sAnswer)
    {
        for(var aAnswers = sAnswer.split("~"),
            aOriginal = [],
            i = 0; i < aAnswers.length; i++)
        {
            var choiceIndex = aAnswers[i] - 1;
            choiceIndex > -1 && 
                aOriginal.push(+this.ChoicesOrder[choiceIndex].Id)
        }
        aOriginal.sort(function(int1,int2)
        {
            return int1 - int2
        });
        return aOriginal.join("~")
    }
    return""
};
Question.prototype.getFeedback = function()
{
    switch(this.Type)
    {
        case"choice":
            for(var aAnswers = this.getAnswersArray(),
                i = 0; i < aAnswers.length; i++)
            {
                var choiceIndex = aAnswers[i] - 1;
                if(choiceIndex > -1)
                    return this.Feedbacks[this.ChoicesOrder[choiceIndex].Id - 1]
            }
            break;
        case"true-false":
        case"choice-multiple":
            return this.isCorrect() ? this.FeedbackCorrect : this.FeedbackIncorrect
    }
    return new QuestionMedia
};
Question.prototype.getFeedbackAudio = function()
{
    switch(this.Type)
    {
        case"choice":
            for(var aAnswers = this.getAnswersArray(),
                i = 0; i < aAnswers.length; i++)
            {
                var choiceIndex = aAnswers[i] - 1;
                if(choiceIndex > -1)
                    if(this.Feedbacks[this.ChoicesOrder[choiceIndex].Id - 1].AudioFile)
                        return this.Feedbacks[this.ChoicesOrder[choiceIndex].Id - 1].AudioFile
            }
            break;
        case"true-false":
        case"choice-multiple":
            if(this.isCorrect())
            {
                if(this.FeedbackCorrect.AudioFile)
                    return this.FeedbackCorrect.AudioFile
            }
            else
                if(this.FeedbackIncorrect.AudioFile)
                    return this.FeedbackIncorrect.AudioFile
    }
    return""
};
Question.prototype.score = function()
{
    if(this.Answer != this.PrevAnswer && this.hasAttemptsLeft())
    {
        this.PrevAnswer = this.Answer;
        this.Scored = true;
        this.AnswerCount++;
        this.writeInteraction(this.AssessmentObj.Assessment.Attempts);
        this.AssessmentObj.Assessment.FeedbackType == "Immediate" && 
            this.AssessmentObj.Assessment.updateStatus();
        this.isBlocked() && 
            this.stopLatencyTimer()
    }
    else
        this.Scored = true
};
Question.prototype.retry = function()
{
    this.PrevAnswer = "";
    this.Scored = false
};
Question.prototype.writeInteraction = function(assessmentAttempt)
{
    var sId = this.AssessmentObj.Assessment.Page.id + "." + this.AssessmentObj.Objective.Id + "." + this.Id + "." + assessmentAttempt;
    if(this.AssessmentObj.Assessment.sbaMode != undefined)
        sId += "." + this.AssessmentObj.Assessment.sbaPageId + "." + (this.AssessmentObj.Assessment.sbaSelectedSet + 1);
    var sType = this.Type == "choice-multiple" ? "choice" : this.Type,
        sResult = this.isCorrect() ? "correct" : "incorrect";
    setInteraction(null,sId,sType,this.getAnswerByOriginalOrder(this.Answer),this.getAnswerByOriginalOrder(this.CorrectAnswer),sResult,"1",this.Latency,this.Prompt.Text,null)
};
Question.prototype.isCorrect = function()
{
    return this.CorrectAnswer == this.Answer
};
Question.prototype.isAnswered = function()
{
    return this.AssessmentObj.Assessment.FeedbackType == "Delayed" ? this.Answer != "" : this.Scored
};
Question.prototype.startLatencyTimer = function()
{
    this.ResponseTimeMark = !this.Scored ? +new Date : null
};
Question.prototype.stopLatencyTimer = function()
{
    if(this.ResponseTimeMark)
    {
        this.Latency += +(+new Date - this.ResponseTimeMark);
        this.ResponseTimeMark = null
    }
};
Question.prototype.setCorrectAnswer = function()
{
    for(var correctChoices = [],
        i = 0; i < this.ChoicesOrder.length; i++)
        this.ChoicesOrder[i].Correct && 
            correctChoices.push(i + 1);
    this.CorrectAnswer = correctChoices.join("~")
};
Question.prototype.setChoicesOrder = function()
{
    var tempChoices = this.Choices;
    switch(this.Type)
    {
        case"choice":
        case"choice-multiple":
            this.Randomize && 
                tempChoices.shuffle()
    }
    for(var distractors = 0,
        correctChoices = [],
        i = 0; i < tempChoices.length; i++)
    {
        var choice = tempChoices[i];
        if(choice.Correct)
        {
            this.ChoicesOrder.push(choice);
            correctChoices.push(this.ChoicesOrder.length)
        }
        else
            if(this.DistractorsCount > 0)
            {
                if(distractors < this.DistractorsCount || !this.Randomize)
                {
                    this.ChoicesOrder.push(choice);
                    distractors++
                }
            }
            else
                this.ChoicesOrder.push(choice)
    }
    this.CorrectAnswer = correctChoices.join("~")
};
Question.prototype.getScormChoicesOrder = function()
{
    for(var scormChoicesOrder = [],
        i = 0; i < this.ChoicesOrder.length; i++)
    {
        var choice = this.ChoicesOrder[i];
        scormChoicesOrder.push(choice.Id)
    }
    return scormChoicesOrder.join("~")
};
Question.prototype.showCorrectAnswer = function()
{
    if(this.AssessmentObj)
    {
        if(this.AssessmentObj.Assessment.Course.settings.ReviewMode)
            return true;
        if(!this.AssessmentObj.Assessment.HideAnswers)
            if(this.Scored && !this.isCorrect())
            {
                if(this.AssessmentObj.Assessment.Status == AssessmentStatus.Failed && !this.AssessmentObj.Assessment.hasAttemptsLeft())
                    return true;
                if(this.AssessmentObj.Assessment.Status == AssessmentStatus.Passed)
                    return true;
                if(!this.hasAttemptsLeft())
                    return true
            }
    }
    return false
};
Question.prototype.isBlocked = function()
{
    return this.AssessmentObj.Assessment.Status == AssessmentStatus.Failed && !this.AssessmentObj.Assessment.hasAttemptsLeft() ? true : this.AssessmentObj.Assessment.Status == AssessmentStatus.Passed ? true : !this.hasAttemptsLeft() ? true : this.Scored && this.isCorrect() ? true : false
};
function QuestionChoice(question)
{
    this.Question = question;
    this.Id = "";
    this.Correct = false;
    this.Text = ""
}
function QuestionMedia(mediaName)
{
    this.Name = mediaName;
    this.Text = "";
    this.Image = "";
    this.ImageAltText = "";
    this.AudioFile = "";
    this.PageId = ""
}
function Scenario(objective)
{
    this.Objective = objective;
    this.Title = null;
    this.Type = null;
    this.Text = null;
    this.Image = null;
    this.AudioFile = ""
}
Scenario.prototype.isEmpty = function()
{
    return this.Title || this.Text ? false : true
};
function BranchingArc(graph,tailId,headId,feedbackItem)
{
    this.graph = graph;
    this.tailId = tailId;
    this.headId = headId;
    this.feedbackItem = feedbackItem
}
BranchingArc.prototype.getTailElement = function()
{
    return this.graph.getBranchingPointById(this.tailId)
};
BranchingArc.prototype.getHeadElement = function()
{
    return this.graph.getBranchingPointById(this.headId)
};
BranchingGraphCompletion = {FinalAttempt:0,FirstAttempt:1};
BranchingGraphNavigation = {ForwardOnly:0,BiDirectional:1};
function BranchingGraph(courseModel,pageModel)
{
    this.course = courseModel;
    this.page = pageModel;
    this.branchingPoints = [];
    this.startPoint = null;
    this.completion = BranchingGraphCompletion.FinalAttempt;
    this.navigation = BranchingGraphNavigation.ForwardOnly;
    this.usePlayerNavigation = false;
    this.maxAttempts = 0;
    this.observer = new Observer;
    this.attempts = [];
    this.currentPath = [];
    this.pathComplete = false;
    this.complete = false;
    this.passed = false;
    this.initialized = false
}
BranchingGraph.prototype.restart = function()
{
    (this.attempts.length === 0 || this.attempts[this.attempts.length - 1].length > 0) && 
        this.attempts.push([]);
    for(var i = 0; i < this.branchingPoints.length; i++)
        this.branchingPoints[i].reset();
    this.currentPath = [];
    this.pathComplete = false;
    this.initialized = true;
    this.moveToStart()
};
BranchingGraph.prototype.canRestart = function()
{
    return!this.passed && this.pathComplete && (this.maxAttempts === 0 || this.attempts.length < this.maxAttempts)
};
BranchingGraph.prototype.getBranchingPointById = function(id)
{
    for(var i = 0; i < this.branchingPoints.length; i++)
        if(this.branchingPoints[i].id == id)
            return this.branchingPoints[i];
    return null
};
BranchingGraph.prototype.getCurrentAttempt = function()
{
    return this.attempts.length === 0 ? null : this.attempts[this.attempts.length - 1]
};
BranchingGraph.prototype.getLatestBranchAttempt = function()
{
    var currentAttempt = this.getCurrentAttempt();
    return currentAttempt ? currentAttempt[currentAttempt.length - 1] : null
};
BranchingGraph.prototype.appendBranchAttempt = function(branchAttempt)
{
    this.attempts.length === 0 && 
        this.attempts.push([]);
    this.attempts[this.attempts.length - 1].push(branchAttempt)
};
BranchingGraph.prototype.getCurrentLocation = function()
{
    return this.currentPath.length > 0 ? this.currentPath[this.currentPath.length - 1] : null
};
BranchingGraph.prototype.getPreviousLocation = function()
{
    return this.currentPath.length > 1 ? this.currentPath[this.currentPath.length - 2] : null
};
BranchingGraph.prototype.getCurrentBranchingPointLocation = function()
{
    var currentLocation = this.getCurrentLocation();
    return currentLocation ? currentLocation.location : BranchingPointLocation.None
};
BranchingGraph.prototype.getDisplayedPageId = function()
{
    var currentLocation = this.getCurrentLocation();
    if(currentLocation)
        if(currentLocation.location === BranchingPointLocation.Content)
            return currentLocation.contentPageId;
        else
            if(currentLocation.location === BranchingPointLocation.Feedback)
            {
                var currentFeedback = currentLocation.getCurrentFeedback();
                return currentFeedback ? currentFeedback.getFeedbackPageId : ""
            }
    return""
};
BranchingGraph.prototype.retryQuestion = function()
{
    var currentLocation = this.getCurrentLocation();
    if(currentLocation && currentLocation.hasQuestion() && currentLocation.canRetry())
    {
        currentLocation.retry();
        this.observer.fire("locationChanged")
    }
};
BranchingGraph.prototype.canMoveForward = function()
{
    var currentLocation = this.getCurrentLocation();
    return currentLocation ? currentLocation.canMoveForward() : this.startPoint !== null
};
BranchingGraph.prototype.canMoveBackward = function()
{
    var currentLocation = this.getCurrentLocation();
    return currentLocation !== null && (currentLocation.canMoveBackward() || this.currentPath.length > 1 && this.navigation === BranchingGraphNavigation.BiDirectional)
};
BranchingGraph.prototype.moveToStart = function()
{
    if(this.startPoint)
    {
        this.currentPath = [this.startPoint];
        this.startPoint.moveToStart();
        this.observer.fire("locationChanged")
    }
};
BranchingGraph.prototype.moveForward = function()
{
    var currentLocation = this.getCurrentLocation();
    if(!currentLocation)
    {
        this.moveToStart();
        this.observer.fire("locationChanged")
    }
    else
        if(currentLocation.canMoveForward())
        {
            currentLocation.moveForward();
            this.pathComplete || this.checkCompletion();
            this.observer.fire("locationChanged")
        }
};
BranchingGraph.prototype.moveBackward = function()
{
    var currentLocation = this.getCurrentLocation();
    if(currentLocation)
        if(currentLocation.canMoveBackward())
        {
            currentLocation.moveBackward();
            this.observer.fire("locationChanged")
        }
        else
            if(this.currentPath.length > 1)
            {
                this.currentPath.pop();
                this.getCurrentLocation().moveToEnd();
                this.observer.fire("locationChanged")
            }
};
BranchingGraph.prototype.checkCompletion = function()
{
    var currentLocation = this.getCurrentLocation();
    if(currentLocation && currentLocation.interactionComplete() && !currentLocation.canMoveForward())
    {
        this.pathComplete = true;
        var setPass = !this.passed && currentLocation.isCompletionPoint,
            setComplete = !this.complete && (currentLocation.isCompletionPoint || this.completion === BranchingGraphCompletion.FirstAttempt || this.maxAttempts > 0 && this.attempts.length >= this.maxAttempts);
        setPass && (this.passed = true);
        if(setComplete)
        {
            this.complete = true;
            this.page.setComplete()
        }
        this.observer.fire("branchingPathCompleted");
        setComplete && this.observer.fire("branchingCompleted");
        setPass && this.observer.fire("branchingPassed")
    }
};
BranchingGraph.prototype.hasSelectedFeedbackPage = function()
{
    var currentLocation = this.getCurrentLocation();
    return currentLocation ? currentLocation.hasSelectedFeedbackPage() : false
};
BranchingGraph.prototype.selectFeedbackPage = function(id)
{
    var currentLocation = this.getCurrentLocation();
    if(currentLocation)
        currentLocation.selectFeedbackPage(id) && 
            this.observer.fire("selectedFeedbackPageChanged")
};
BranchingGraph.prototype.clearSelectedFeedbackPage = function()
{
    var currentLocation = this.getCurrentLocation();
    if(currentLocation && currentLocation.hasSelectedFeedbackPage())
    {
        currentLocation.clearSelectedFeedbackPage();
        this.observer.fire("selectedFeedbackPageChanged")
    }
};
BranchingGraph.prototype.stopCurrentLocationLatencyTimer = function()
{
    var currentLocation = this.getCurrentLocation();
    currentLocation && 
        currentLocation.stopLatencyTimer()
};
BranchingGraph.prototype.unload = function()
{
    this.stopCurrentLocationLatencyTimer();
    this.saveScormData()
};
BranchingGraph.prototype.serializeStateData = function()
{
    var graphData = [];
    graphData.push(this.passed);
    graphData.push(this.complete);
    graphData.push(this.pathComplete);
    if(this.attempts.length === 0)
        graphData.push("XX");
    else
    {
        for(var i = 0,
            attemptsData = []; i < this.attempts.length; i++)
            if(this.attempts[i].length === 0)
                attemptsData.push("X");
            else
            {
                for(var j = 0,
                    attemptData = []; j < this.attempts[i].length; j++)
                    attemptData.push(this.attempts[i][j].serializeStateData());
                attemptsData.push(attemptData.join("::"))
            }
        graphData.push(attemptsData.join(":::"))
    }
    if(this.branchingPoints.length === 0)
        graphData.push("X");
    else
    {
        for(var i = 0,
            pointData = []; i < this.branchingPoints.length; i++)
        {
            pointData.push(this.branchingPoints[i].id);
            pointData.push(this.branchingPoints[i].serializeStateData())
        }
        graphData.push(pointData.join("::"))
    }
    if(this.currentPath.length === 0)
        graphData.push("X");
    else
    {
        for(var i = 0,
            pathData = []; i < this.currentPath.length; i++)
            pathData.push(this.currentPath[i].id);
        graphData.push(pathData.join(":"))
    }
    return graphData.join("::::")
};
BranchingGraph.prototype.deserializeStateData = function(data)
{
    var graphData = data.split("::::");
    if(graphData.length !== 6)
        return;
    this.passed = graphData[0] === "true";
    this.complete = graphData[1] === "true";
    this.pathComplete = graphData[2] === "true";
    this.attempts = [];
    if(graphData[3] !== "XX")
        for(var attemptsData = graphData[3].split(":::"),
            i = 0; i < attemptsData.length; i++)
            if(attemptsData[i] === "X")
                this.attempts.push([]);
            else
            {
                for(var attemptData = attemptsData[i].split("::"),
                    j = 0,
                    attempt = []; j < attemptData.length; j++)
                {
                    var branchingPointAttempt = new BranchingPointAttempt(this,null,"",[],"",0);
                    branchingPointAttempt.deserializeStateData(attemptData[j]);
                    attempt.push(branchingPointAttempt)
                }
                this.attempts.push(attempt)
            }
    if(graphData[4] !== "X")
        for(var pointData = graphData[4].split("::"),
            i = 0; i < pointData.length - 1; i = i + 2)
        {
            var branchingPoint = this.getBranchingPointById(pointData[i]);
            branchingPoint && branchingPoint.deserializeStateData(pointData[i + 1])
        }
    this.currentPath = [];
    if(graphData[5] !== "X")
        for(var pathData = graphData[5].split(":"),
            i = 0; i < pathData.length; i++)
        {
            var branchingPoint = this.getBranchingPointById(pathData[i]);
            branchingPoint && this.currentPath.push(branchingPoint)
        }
    this.initialized = true
};
BranchingGraph.prototype.saveScormData = function()
{
    this.course.scormState.setState(this.page.id,this.serializeStateData());
    this.course.scormState.save()
};
BranchingGraph.prototype.loadScormData = function()
{
    var scormData = this.course.scormState.getState(this.page.id);
    scormData && this.deserializeStateData(scormData)
};
BranchingGraph.prototype.resetScormData = function()
{
    this.course.scormState.setState(this.page.id,"")
};
BranchingPointLocation = {None:-1,Content:0,Question:1,Feedback:2,FeedbackContent:3,FeedbackAlternatives:4};
BranchingPointShowAlternativeResults = {Never:0,Always:1,OnPass:2};
BranchingPointFeedbackContentPosition = {Popup:0,BeforeFeedback:1,AfterFeedback:2,SkipFeedback:3};
function BranchingPoint(graph)
{
    this.id = "";
    this.graph = graph;
    this.contentPageId = "";
    this.question = null;
    this.isCompletionPoint = false;
    this.mustPass = false;
    this.showAlternativeResults = BranchingPointShowAlternativeResults.Never;
    this.mustCompleteContent = false;
    this.mustCompleteFeedback = false;
    this.feedbackContentPosition = BranchingPointFeedbackContentPosition.Popup;
    this.forwardArcs = [];
    this.contentViewed = false;
    this.contentCompleted = false;
    this.choicesOrder = [];
    this.correctAnswer = "";
    this.previousAttempt = null;
    this.currentAttempt = null;
    this.currentAnswer = null;
    this.selectedFeedbackPageId = "";
    this.activeArc = null;
    this.latency = 0;
    this.responseTimeMark = null;
    this.location = BranchingPointLocation.None
}
BranchingPoint.prototype.reset = function()
{
    this.contentViewed = false;
    this.contentCompleted = false;
    this.previousAttempt = null;
    this.currentAttempt = null;
    this.currentAnswer = null;
    this.firstAttemptCorrect = false;
    this.selectedFeedbackPageId = "";
    if(this.hasQuestion())
    {
        this.setChoicesOrder();
        this.activeArc = null
    }
    this.latency = 0;
    this.responseTimeMark = null;
    this.location = BranchingPointLocation.None
};
BranchingPoint.prototype.moveToStart = function()
{
    if(this.hasContent())
        this.location = BranchingPointLocation.Content;
    else
        if(this.hasQuestion())
            this.location = BranchingPointLocation.Question;
        else
            this.location = BranchingPointLocation.None
};
BranchingPoint.prototype.moveToEnd = function()
{
    if(this.isScored())
        if(this.feedbackContentPosition === BranchingPointFeedbackContentPosition.SkipFeedback)
            if(this.currentAttemptHasFeedbackContent())
                this.location = this.canViewAlternativeFeedback() && this.hasAlternativeFeedbackContent() ? BranchingPointLocation.FeedbackAlternatives : BranchingPointLocation.FeedbackContent;
            else
                this.location = this.canViewAlternativeFeedback() && this.hasAlternativeFeedbackContent() ? BranchingPointLocation.Feedback : BranchingPointLocation.Question;
        else
            if(this.feedbackContentPosition !== BranchingPointFeedbackContentPosition.AfterFeedback || !this.currentAttemptHasFeedbackContent())
                this.location = BranchingPointLocation.Feedback;
            else
                if(this.canViewAlternativeFeedback() && this.hasAlternativeFeedbackContent())
                    this.location = BranchingPointLocation.FeedbackAlternatives;
                else
                    this.location = BranchingPointLocation.FeedbackContent;
    else
        if(this.hasQuestion())
            this.location = BranchingPointLocation.Question;
        else
            if(this.hasContent())
                this.location = BranchingPointLocation.Content;
            else
                this.location = BranchingPointLocation.None
};
BranchingPoint.prototype.canMoveForward = function()
{
    switch(this.location)
    {
        case BranchingPointLocation.None:
            return this.hasContent() || this.hasQuestion();
            break;
        case BranchingPointLocation.Content:
            return(this.hasQuestion() || this.hasNextBranch()) && !this.mustFinishContent();
            break;
        case BranchingPointLocation.Question:
            return this.currentAnswer !== null;
            break;
        case BranchingPointLocation.Feedback:
            if(this.feedbackContentPosition === BranchingPointFeedbackContentPosition.Popup)
                return this.hasNextBranch() && !this.mustFinishQuestion() && !this.mustFinishFeedback();
            else
                return this.feedbackContentPosition === BranchingPointFeedbackContentPosition.BeforeFeedback || this.feedbackContentPosition === BranchingPointFeedbackContentPosition.SkipFeedback ? this.mustFinishQuestion() || this.hasNextBranch() : this.currentAttemptHasFeedbackContent() || this.mustFinishQuestion() || this.hasNextBranch();
            break;
        case BranchingPointLocation.FeedbackContent:
            if(this.feedbackContentPosition === BranchingPointFeedbackContentPosition.BeforeFeedback)
                return!this.mustFinishFeedback();
            else
                return this.mustFinishQuestion() || this.hasAlternativeFeedbackContent() && this.canViewAlternativeFeedback() || this.hasNextBranch();
            break;
        case BranchingPointLocation.FeedbackAlternatives:
            return this.hasNextBranch()
    }
};
BranchingPoint.prototype.canMoveBackward = function()
{
    switch(this.location)
    {
        case BranchingPointLocation.None:
            return false;
            break;
        case BranchingPointLocation.Content:
            return false;
            break;
        case BranchingPointLocation.Question:
            return this.hasContent();
            break;
        case BranchingPointLocation.Feedback:
            return true;
            break;
        case BranchingPointLocation.FeedbackContent:
            return true;
            break;
        case BranchingPointLocation.FeedbackAlternatives:
            return true
    }
};
BranchingPoint.prototype.moveForward = function()
{
    if(!this.canMoveForward())
        return;
    switch(this.location)
    {
        case BranchingPointLocation.None:
            if(this.hasContent())
                this.location = BranchingPointLocation.Content;
            else
                this.location = BranchingPointLocation.Question;
            break;
        case BranchingPointLocation.Content:
            if(this.hasQuestion())
                this.location = BranchingPointLocation.Question;
            else
            {
                var newLocation = this.activeArc.getHeadElement();
                if(newLocation)
                {
                    this.graph.currentPath.push(newLocation);
                    newLocation.moveToStart()
                }
            }
            break;
        case BranchingPointLocation.Question:
            !this.isScored() && 
                this.score();
            if(this.feedbackContentPosition === BranchingPointFeedbackContentPosition.SkipFeedback)
                if(this.currentAttemptHasFeedbackContent())
                    this.location = BranchingPointLocation.FeedbackContent;
                else
                    if(this.mustFinishQuestion() || this.hasAlternativeFeedbackContent() && this.canViewAlternativeFeedback())
                        this.location = BranchingPointLocation.Feedback;
                    else
                    {
                        var newLocation = this.activeArc.getHeadElement();
                        if(newLocation)
                        {
                            this.graph.currentPath.push(newLocation);
                            newLocation.moveToStart()
                        }
                    }
            else
                if(this.feedbackContentPosition === BranchingPointFeedbackContentPosition.BeforeFeedback && this.currentAttemptHasFeedbackContent())
                    this.location = BranchingPointLocation.FeedbackContent;
                else
                    this.location = BranchingPointLocation.Feedback;
            break;
        case BranchingPointLocation.Feedback:
            if(this.feedbackContentPosition === BranchingPointFeedbackContentPosition.AfterFeedback && this.currentAttemptHasFeedbackContent())
                this.location = BranchingPointLocation.FeedbackContent;
            else
                if(this.mustFinishQuestion())
                    this.retry();
                else
                {
                    var newLocation = this.activeArc.getHeadElement();
                    if(newLocation)
                    {
                        this.graph.currentPath.push(newLocation);
                        newLocation.moveToStart()
                    }
                }
            break;
        case BranchingPointLocation.FeedbackContent:
            if(this.feedbackContentPosition === BranchingPointFeedbackContentPosition.BeforeFeedback)
                this.location = BranchingPointLocation.Feedback;
            else
                if(this.mustFinishQuestion())
                    this.retry();
                else
                    if(this.hasAlternativeFeedbackContent() && this.canViewAlternativeFeedback())
                        this.location = BranchingPointLocation.FeedbackAlternatives;
                    else
                    {
                        var newLocation = this.activeArc.getHeadElement();
                        if(newLocation)
                        {
                            this.graph.currentPath.push(newLocation);
                            newLocation.moveToStart()
                        }
                    }
            break;
        case BranchingPointLocation.FeedbackAlternatives:
            var newLocation = this.activeArc.getHeadElement();
            if(newLocation)
            {
                this.graph.currentPath.push(newLocation);
                newLocation.moveToStart()
            }
    }
};
BranchingPoint.prototype.moveBackward = function()
{
    if(!this.canMoveForward)
        return;
    switch(this.location)
    {
        case BranchingPointLocation.Question:
            this.location = BranchingPointLocation.Content;
            break;
        case BranchingPointLocation.Feedback:
            if(this.feedbackContentPosition === BranchingPointFeedbackContentPosition.BeforeFeedback && this.currentAttemptHasFeedbackContent())
                this.location = BranchingPointLocation.FeedbackContent;
            else
                this.location = BranchingPointLocation.Question;
            break;
        case BranchingPointLocation.FeedbackContent:
            if(this.feedbackContentPosition === BranchingPointFeedbackContentPosition.AfterFeedback)
                this.location = BranchingPointLocation.Feedback;
            else
                this.location = BranchingPointLocation.Question;
            break;
        case BranchingPointLocation.FeedbackAlternatives:
            this.location = BranchingPointLocation.FeedbackContent
    }
};
BranchingPoint.prototype.hasContent = function()
{
    return this.contentPageId !== ""
};
BranchingPoint.prototype.hasQuestion = function()
{
    return this.question != null
};
BranchingPoint.prototype.isTerminal = function()
{
    return!this.hasQuestion() && (this.activeArc === null || this.activeArc.getHeadElement() === null)
};
BranchingPoint.prototype.isDeadEnd = function()
{
    return this.isTerminal() && !this.isCompletionPoint
};
BranchingPoint.prototype.mustFinishContent = function()
{
    return!this.contentViewed || this.mustCompleteContent && !this.contentCompleted
};
BranchingPoint.prototype.mustFinishQuestion = function()
{
    return this.mustPass ? !this.isCorrect() : !this.isScored()
};
BranchingPoint.prototype.mustFinishFeedback = function()
{
    return this.currentAttempt && this.currentAttemptHasFeedbackContent() && (!this.currentAttempt.contentViewed || this.mustCompleteFeedback && !this.currentAttempt.contentCompleted)
};
BranchingPoint.prototype.hasNextBranch = function()
{
    return this.activeArc !== null && this.activeArc.getHeadElement() !== null
};
BranchingPoint.prototype.getPromptAudioFilePath = function()
{
    return this.graph.course.getMediaFolderPath() + this.question.Prompt.AudioFile
};
BranchingPoint.prototype.setCorrectAnswer = function()
{
    for(var correctChoices = [],
        i = 0; i < this.choicesOrder.length; i++)
        this.choicesOrder[i].Correct && 
            correctChoices.push(i + 1);
    this.correctAnswer = correctChoices.join("~")
};
BranchingPoint.prototype.setChoicesOrder = function()
{
    this.choicesOrder = [];
    var tempChoices = this.question.Choices.slice(0);
    switch(this.question.Type)
    {
        case"choice":
        case"choice-multiple":
            this.question.Randomize && 
                tempChoices.shuffle()
    }
    for(var distractors = 0,
        correctChoices = [],
        i = 0; i < tempChoices.length; i++)
    {
        var choice = tempChoices[i];
        if(choice.Correct)
        {
            this.choicesOrder.push(choice);
            correctChoices.push(this.choicesOrder.length)
        }
        else
            if(this.question.DistractorsCount > 0)
            {
                if(distractors < this.question.DistractorsCount || !this.question.Randomize)
                {
                    this.choicesOrder.push(choice);
                    distractors++
                }
            }
            else
                this.choicesOrder.push(choice)
    }
    this.correctAnswer = correctChoices.join("~")
};
BranchingPoint.prototype.isScored = function()
{
    return this.currentAttempt !== null
};
BranchingPoint.prototype.isAnswered = function()
{
    return this.getCurrentAnswer() !== null
};
BranchingPoint.prototype.getAnswersArray = function()
{
    var currentAnswer = this.getCurrentAnswer();
    return currentAnswer ? currentAnswer.split("~") : []
};
BranchingPoint.prototype.canRetry = function()
{
    return this.isScored() && !this.isCorrect() && this.mustPass && (this.feedbackViewed() && (!this.mustCompleteFeedback || this.feedbackCompleted()) || !this.currentAttemptHasFeedbackContent())
};
BranchingPoint.prototype.interactionComplete = function()
{
    var contentInteractionComplete = !this.hasContent() || this.contentViewed && (!this.mustCompleteContent || this.contentCompleted),
        questionInteractionComplete = !this.hasQuestion() || this.isScored() && (!this.mustPass || this.isCorrect()) && (this.currentAttempt.contentViewed && (!this.mustCompleteFeedback || this.currentAttempt.contentComplete) || !this.currentAttemptHasFeedbackContent());
    return contentInteractionComplete && questionInteractionComplete
};
BranchingPoint.prototype.retry = function()
{
    this.previousAttempt = this.currentAttempt;
    this.currentAttempt = null;
    this.currentAnswer = null;
    this.selectedFeedbackPageId = "";
    this.Latency = 0;
    this.location = BranchingPointLocation.Question
};
BranchingPoint.prototype.isCorrect = function()
{
    return this.isScored() && this.currentAttempt.isCorrect()
};
BranchingPoint.prototype.selectFeedbackPage = function(id)
{
    if(!id && this.isScored())
    {
        var pageId = this.currentAttempt.getFeedbackPageId();
        if(pageId)
        {
            this.selectedFeedbackPageId = pageId;
            return true
        }
    }
    else
        if(id)
            switch(this.question.Type)
            {
                case"choice":
                    for(var i = 0; i < this.question.Feedbacks.length; i++)
                        if(id == this.question.Feedbacks[i].PageId)
                        {
                            this.selectedFeedbackPageId = id;
                            return true
                        }
                    break;
                case"true-false":
                case"choice-multiple":
                    if(id === this.question.FeedbackCorrect.PageId || id === this.question.FeedbackIncorrect.PageId)
                    {
                        this.selectedFeedbackPageId = id;
                        return true
                    }
            }
    return false
};
BranchingPoint.prototype.setContentViewed = function()
{
    this.contentViewed = true;
    this.graph.checkCompletion()
};
BranchingPoint.prototype.setContentCompleted = function()
{
    this.contentCompleted = true;
    this.graph.checkCompletion()
};
BranchingPoint.prototype.setFeedbackViewed = function()
{
    this.currentAttempt && (this.currentAttempt.contentViewed = true);
    this.graph.checkCompletion()
};
BranchingPoint.prototype.setFeedbackCompleted = function()
{
    this.currentAttempt && (this.currentAttempt.contentCompleted = true);
    this.graph.checkCompletion()
};
BranchingPoint.prototype.feedbackCompleted = function()
{
    return this.currentAttempt && this.currentAttempt.contentCompleted
};
BranchingPoint.prototype.feedbackViewed = function()
{
    return this.currentAttempt && this.currentAttempt.contentViewed
};
BranchingPoint.prototype.clearSelectedFeedbackPage = function()
{
    this.selectedFeedbackPageId = ""
};
BranchingPoint.prototype.hasSelectedFeedbackPage = function()
{
    return this.selectedFeedbackPageId !== ""
};
BranchingPoint.prototype.currentAttemptHasFeedbackContent = function()
{
    return this.isScored() && this.currentAttempt.getFeedbackPageId() !== ""
};
BranchingPoint.prototype.selectedFeedbackPageIsAlternative = function()
{
    return this.hasSelectedFeedbackPage() && (!this.isScored() || this.selectedFeedbackPageId !== this.currentAttempt.getFeedbackPageId())
};
BranchingPoint.prototype.canViewAlternativeFeedback = function()
{
    return this.isScored() && !this.mustFinishFeedback() && !this.mustFinishQuestion() && (this.showAlternativeResults === BranchingPointShowAlternativeResults.Always || this.showAlternativeResults === BranchingPointShowAlternativeResults.OnPass && this.isCorrect())
};
BranchingPoint.prototype.hasAlternativeFeedbackContent = function()
{
    return this.getAlternativeFeedbackPageIds().length > 0
};
BranchingPoint.prototype.getAlternativeFeedbackPageIds = function()
{
    var ids = [],
        currentAttemptPageId = this.isScored() ? this.currentAttempt.getFeedbackPageId() : "";
    switch(this.question.Type)
    {
        case"choice":
            for(var i = 0,
                pageId = ""; i < this.choicesOrder.length; i++)
            {
                pageId = this.question.Feedbacks[this.choicesOrder[i].Id - 1].PageId;
                if(pageId && pageId != currentAttemptPageId)
                {
                    for(var isAdded = false,
                        j = 0; j < ids; j++)
                        if(ids[j] == pageId)
                        {
                            isAdded = true;
                            break
                        }
                    !isAdded && ids.push(pageId)
                }
            }
            break;
        case"true-false":
        case"choice-multiple":
            if(this.isCorrect())
                this.question.FeedbackIncorrect.PageId && this.question.FeedbackIncorrect.PageId != currentAttemptPageId && ids.push(this.question.FeedbackIncorrect.PageId);
            else
                if(this.isScored())
                    this.question.FeedbackCorrect.PageId && this.question.FeedbackCorrect.PageId != currentAttemptPageId && ids.push(this.question.FeedbackCorrect.PageId);
                else
                {
                    this.question.FeedbackCorrect.PageId && ids.push(this.question.FeedbackCorrect.PageId);
                    this.question.FeedbackIncorrect.PageId && this.question.FeedbackIncorrect.PageId != this.question.FeedbackCorrect.PageId && ids.push(this.question.FeedbackIncorrect.PageId)
                }
    }
    return ids
};
BranchingPoint.prototype.startLatencyTimer = function()
{
    this.responseTimeMark = !this.isScored() ? +new Date : null
};
BranchingPoint.prototype.stopLatencyTimer = function()
{
    if(this.responseTimeMark)
    {
        this.latency += +(+new Date - this.responseTimeMark);
        this.responseTimeMark = null
    }
};
BranchingPoint.prototype.getPreviousAnswer = function()
{
    return this.previousAttempt ? this.previousAttempt.answer : null
};
BranchingPoint.prototype.getCurrentAnswer = function()
{
    return this.currentAttempt ? this.currentAttempt.answer : this.currentAnswer
};
BranchingPoint.prototype.score = function()
{
    if(!this.isScored() && this.currentAnswer)
    {
        this.stopLatencyTimer();
        if(this.currentAnswer !== this.getPreviousAnswer())
        {
            this.currentAttempt = new BranchingPointAttempt(this.graph,this,this.currentAnswer,this.choicesOrder,this.correctAnswer,this.latency);
            if(this.previousAttempt !== null)
                this.currentAttempt.attemptNumber = this.previousAttempt.attemptNumber + 1;
            else
                this.activeArc = this.currentAttempt.getForwardArc();
            this.graph.appendBranchAttempt(this.currentAttempt)
        }
        else
            this.currentAttempt = this.previousAttempt
    }
};
BranchingPoint.prototype.serializeStateData = function()
{
    var pointData = [];
    pointData.push(this.location);
    pointData.push(this.contentViewed);
    pointData.push(this.contentCompleted);
    pointData.push(this.latency);
    pointData.push(this.currentAnswer || "X");
    pointData.push(this.isScored());
    if(this.hasQuestion() && this.choicesOrder.length > 0)
    {
        for(var i = 0,
            choicesData = []; i < this.choicesOrder.length; i++)
            choicesData.push(this.choicesOrder[i].Id);
        pointData.push(choicesData.join("~"))
    }
    else
        pointData.push("X");
    return pointData.join(":")
};
BranchingPoint.prototype.deserializeStateData = function(data)
{
    var pointData = data.split(":");
    if(pointData.length !== 7)
        return;
    this.location = parseInt(pointData[0]);
    (this.location > 4 || this.location < 0) && (this.location = BranchingPointLocation.None);
    this.contentViewed = pointData[1] === "true";
    this.contentCompleted = pointData[2] === "true";
    this.latency = +pointData[3] || 0;
    this.currentAnswer = pointData[4] === "X" ? null : pointData[4];
    this.currentAttempt = null;
    this.previousAttempt = null;
    var latestGraphAttempt = this.graph.getCurrentAttempt();
    if(pointData[5] !== "true")
    {
        for(var i = latestGraphAttempt.length - 1; i >= 0; i--)
            if(latestGraphAttempt[i].branchingPoint === this)
            {
                this.previousAttempt = latestGraphAttempt[i];
                break
            }
    }
    else
        for(var i = latestGraphAttempt.length - 1; i >= 0; i--)
            if(latestGraphAttempt[i].branchingPoint === this)
                if(this.currentAttempt === null)
                    this.currentAttempt = latestGraphAttempt[i];
                else
                {
                    this.previousAttempt = latestGraphAttempt[i];
                    break
                }
    if(this.currentAttempt || this.previousAttempt)
        for(var i = 0; i < latestGraphAttempt.length; i++)
            if(latestGraphAttempt[i].branchingPoint === this)
            {
                this.activeArc = latestGraphAttempt[i].getForwardArc();
                break
            }
    if(this.hasQuestion())
    {
        var choicesData = pointData[6].split("~"),
            questionChoices = this.question.Choices.slice(0);
        this.choicesOrder = [];
        for(var i = 0; i < choicesData.length; i++)
        {
            for(var j = 0; j < questionChoices.length; j++)
                if(questionChoices[j].Id == choicesData[i])
                {
                    this.choicesOrder.push(questionChoices.splice(j,1)[0]);
                    break
                }
            if(this.choicesOrder.length <= i)
                break
        }
        this.setCorrectAnswer()
    }
};
function BranchingPointAttempt(branchingGraph,branchingPoint,answer,choicesOrder,correctAnswer,latency)
{
    this.graph = branchingGraph;
    this.branchingPoint = branchingPoint;
    this.answer = answer;
    this.choicesOrder = choicesOrder;
    this.correctAnswer = correctAnswer;
    this.latency = latency;
    this.attemptNumber = 1;
    this.contentViewed = false;
    this.contentCompleted = false
}
BranchingPointAttempt.prototype.getFeedbackAudioFilePath = function()
{
    var audioFile = this.getFeedbackAudio();
    return audioFile ? this.branchingPoint.graph.course.getMediaFolderPath() + audioFile : ""
};
BranchingPointAttempt.prototype.getAnswersArray = function()
{
    return this.answer.split("~")
};
BranchingPointAttempt.prototype.getFeedback = function()
{
    switch(this.branchingPoint.question.Type)
    {
        case"choice":
            for(var aAnswers = this.getAnswersArray(),
                i = 0; i < aAnswers.length; i++)
            {
                var choiceIndex = aAnswers[i] - 1;
                if(choiceIndex > -1)
                    return this.branchingPoint.question.Feedbacks[this.choicesOrder[choiceIndex].Id - 1]
            }
            break;
        case"true-false":
        case"choice-multiple":
            return this.isCorrect() ? this.branchingPoint.question.FeedbackCorrect : this.branchingPoint.question.FeedbackIncorrect
    }
    return new QuestionMedia
};
BranchingPointAttempt.prototype.getFeedbackAudio = function()
{
    switch(this.branchingPoint.question.Type)
    {
        case"choice":
            for(var aAnswers = this.getAnswersArray(),
                i = 0; i < aAnswers.length; i++)
            {
                var choiceIndex = aAnswers[i] - 1;
                if(choiceIndex > -1)
                    if(this.branchingPoint.question.Feedbacks[this.choicesOrder[choiceIndex].Id - 1].AudioFile)
                        return this.branchingPoint.question.Feedbacks[this.choicesOrder[choiceIndex].Id - 1].AudioFile
            }
            break;
        case"true-false":
        case"choice-multiple":
            if(this.isCorrect())
            {
                if(this.branchingPoint.question.FeedbackCorrect.AudioFile)
                    return this.branchingPoint.question.FeedbackCorrect.AudioFile
            }
            else
                if(this.branchingPoint.question.FeedbackIncorrect.AudioFile)
                    return this.branchingPoint.question.FeedbackIncorrect.AudioFile
    }
    return""
};
BranchingPointAttempt.prototype.getFeedbackPageId = function()
{
    switch(this.branchingPoint.question.Type)
    {
        case"choice":
            for(var aAnswers = this.getAnswersArray(),
                i = 0; i < aAnswers.length; i++)
            {
                var choiceIndex = aAnswers[i] - 1;
                if(choiceIndex > -1)
                    if(this.branchingPoint.question.Feedbacks[this.choicesOrder[choiceIndex].Id - 1].PageId)
                        return this.branchingPoint.question.Feedbacks[this.choicesOrder[choiceIndex].Id - 1].PageId
            }
            break;
        case"true-false":
        case"choice-multiple":
            if(this.isCorrect())
            {
                if(this.branchingPoint.question.FeedbackCorrect.PageId)
                    return this.branchingPoint.question.FeedbackCorrect.PageId
            }
            else
                if(this.branchingPoint.question.FeedbackIncorrect.PageId)
                    return this.branchingPoint.question.FeedbackIncorrect.PageId
    }
    return""
};
BranchingPointAttempt.prototype.isCorrect = function()
{
    return this.correctAnswer === this.answer
};
BranchingPointAttempt.prototype.getForwardArc = function()
{
    for(var feedbackItem = this.getFeedback(),
        i = 0; i < this.branchingPoint.forwardArcs.length; i++)
        if(this.branchingPoint.forwardArcs[i].feedbackItem === feedbackItem)
            return this.branchingPoint.forwardArcs[i];
    return null
};
BranchingPointAttempt.prototype.hasContent = function()
{
    return this.getFeedbackPageId() !== ""
};
BranchingPointAttempt.prototype.setCorrectAnswer = function()
{
    for(var correctChoices = [],
        i = 0; i < this.choicesOrder.length; i++)
        this.choicesOrder[i].Correct && 
            correctChoices.push(i + 1);
    this.correctAnswer = correctChoices.join("~")
};
BranchingPointAttempt.prototype.serializeStateData = function()
{
    var attemptData = [];
    attemptData.push(this.branchingPoint ? this.branchingPoint.id : "X");
    attemptData.push(this.attemptNumber);
    attemptData.push(this.latency);
    attemptData.push(this.contentViewed);
    attemptData.push(this.contentCompleted);
    attemptData.push(this.answer);
    if(this.choicesOrder.length > 0)
    {
        for(var i = 0,
            choicesData = []; i < this.choicesOrder.length; i++)
            choicesData.push(this.choicesOrder[i].Id);
        attemptData.push(choicesData.join("~"))
    }
    else
        attemptData.push("X");
    return attemptData.join(":")
};
BranchingPointAttempt.prototype.deserializeStateData = function(data)
{
    var attemptData = data.split(":");
    if(attemptData.length !== 7)
        return;
    var branchingPoint = this.graph.getBranchingPointById(attemptData[0]);
    if(!branchingPoint || !branchingPoint.question)
        return;
    this.branchingPoint = branchingPoint;
    this.attemptNumber = +attemptData[1] || 1;
    this.latency = +attemptData[2] || 0;
    this.contentViewed = attemptData[3] === "true";
    this.contentCompleted = attemptData[4] === "true";
    this.answer = attemptData[5];
    this.choicesOrder = [];
    if(attemptData[6] !== "X")
    {
        for(var choicesData = attemptData[6].split("~"),
            questionChoices = branchingPoint.question.Choices.slice(0),
            i = 0; i < choicesData.length; i++)
        {
            for(var j = 0; j < questionChoices.length; j++)
                if(questionChoices[j].Id == choicesData[i])
                {
                    this.choicesOrder.push(questionChoices.splice(j,1)[0]);
                    break
                }
            if(this.choicesOrder.length <= i)
                break
        }
        this.setCorrectAnswer()
    }
};
function AudioPlayerView(courseController,id)
{
    return $("<div />",{"class":"AudioPlayer",id:id}).append($('<div class="AudioPlayerProgressSlider accent" id="' + id + 'ProgressSlider"></div>')).append($('<div class="AudioPlayerCaptions" id="' + id + 'Captions" aria-hidden="true"></div>')).append($('<a class="AudioPlayerPlayPauseButton" id="' + id + 'PlayPauseButton" title="Play" href="#" onclick="return false;"></a>')).append($('<a class="AudioPlayerTranscript" id="' + id + 'TranscriptButton" title="Transcript" href="#" onclick="return false;"></a>')).append($('<div class="AudioPlayerLocation" id="' + id + 'Location" aria-hidden="true"></div>')).append($('<audio class="AudioPlayerAudio" id="' + id + 'Audio" src=""></audio>'))
}
function BannerView(controller)
{
    var path = controller.course.getContentFolderPath() + "Banner.htm";
    $("#Header").load(path,function()
    {
        $("#courseName").text(controller.course.name);
        var exitButton = $("#exitButton");
        exitButton.text(Resources.Menu_Exit_Menu_Text);
        exitButton.attr("title",Resources.Menu_Exit_Menu_Title_Text);
        exitButton.click(function()
        {
            var message = handleOnBeforeUnload();
            if(message)
                courseController.confirm(message,closeCourse,null);
            else
                closeCourse();
            return false
        });
        var menuButton = $("#menuButton");
        menuButton.text(Resources.Menu_Text);
        menuButton.click(function()
        {
            controller.course.observer.fire("menuButtonClicked",null);
            return false
        });
        var quicklinksButton = $("#quickLinksButton");
        quicklinksButton.text(Resources.Menu_Quick_Links_Menu_Text);
        quicklinksButton.append($("<div/>",{"class":"expandVisual"}));
        quicklinksButton.click(function()
        {
            controller.course.observer.fire("quickLinksButtonClicked",null);
            return false
        });
        var quickLinksView = new QuickLinksView(controller);
        $(".menuButtons",this).prepend(InfoButtonView.getInstance());
        if($("#progressWidget").length > 0)
        {
            var updateWidget = function()
                {
                    if(controller.course.scormState.isComplete)
                    {
                        $("#progressWidget").addClass("progressWidget-courseComplete").text(Resources.ProgressWidget_CompleteText);
                        controller.course.observer.unobserve("pageStatusChanged",updateWidget);
                        controller.course.observer.unobserve("courseCompleted",updateWidget)
                    }
                    else
                    {
                        var count = 0;
                        controller.course.recursePageTreeFn(function(page,nCurrentLevel)
                        {
                            if(nCurrentLevel > 1 && page.isRequired() && !page.isComplete() && page.pageType.id != "54434C22-4760-41D7-9D0E-92821CCF0258")
                                count++
                        });
                        $("#progressWidget").text(Resources.ProgressWidget_IncompleteText.replace("%%number%%",count).replace("%%plural%%",count !== 1 ? "s" : ""))
                    }
                };
            controller.course.observer.observe("pageStatusChanged",updateWidget);
            controller.course.observer.observe("courseCompleted",updateWidget);
            updateWidget()
        }
    });
    courseController.course.observer.observe("navigatedToPage",function(page)
    {
        if(page.getModule() != page)
            var sName = '<span class="pageNameModule">' + page.getModule().name + '</span><span class="pageNameSeparator"> | </span>' + page.name;
        else
            var sName = page.name;
        $("#pageName").html(sName);
        $(InfoButtonView.getInstance()).unbind("click").hide()
    })
}
function ConfirmUserView()
{
    var rootElem = null;
    this.confirm = function(text,callback,param)
    {
        var newDiv = $(document.createElement("div"));
        newDiv.attr("id","ConfirmDialog");
        var recenterDialog = function()
            {
                newDiv.dialog("option","position","center")
            };
        rootElem = newDiv.html(text).dialog({title:Resources.Confirmation_Title_Text,closeText:Resources.Dialog_Close_Text,dialogClass:"ConfirmDialog",modal:true,draggable:false,resizable:false,width:"100%",position:"center",open:function()
        {
            $(window).on("resize",recenterDialog)
        },close:function()
        {
            $(window).off("resize",recenterDialog);
            $(this).dialog("destroy").remove()
        },buttons:[{id:"button-ok",text:Resources.Confirmation_Yes_Text,click:function()
        {
            callback(param);
            $(this).dialog("close")
        }},{id:"button-cancel",text:Resources.Confirmation_No_Text,click:function()
        {
            $(this).dialog("close")
        }}]})
    };
    return rootElem
}
function ContentPopupView(courseController)
{
    var cpv = this;
    cpv.cc = courseController;
    this.Observer = new Observer;
    this.pageDisplayed = null;
    var vid = null;
    cpv.callback = null;
    cpv.newDiv = $(document.createElement("div"));
    cpv.newDiv.attr("id","ContentsPopupDialog");
    cpv.captionsContainer = $('<div id="ContentsPopupCaptionsContainer" aria-hidden="true"/>').appendTo(cpv.newDiv);
    var iframeContainer = $('<div class="ContentsPopupIframeContainer"/>');
    cpv.iframe = $('<iframe id="ContentsPopupIframe"/>');
    cpv.assessmentDiv = $('<div id="ContentsPopupAssessment"/>');
    iframeContainer.append(cpv.iframe);
    cpv.newDiv.append(iframeContainer);
    cpv.newDiv.append(cpv.assessmentDiv);
    cpv.audioController = new AudioController(cpv.cc,"PopupAudio");
    cpv.audioPlayerView = new AudioPlayerView(cpv.cc,"PopupAudio");
    cpv.newDiv.append(cpv.audioPlayerView);
    var branchingController = null,
        branchingView = null;
    cpv.newDiv.dialog({autoOpen:false,width:1,height:1,position:"center",title:"",open:function()
    {
        buildDialog(cpv.newDiv,cpv.pageDisplayed);
        var currentPage = cpv.cc.course.getCurrentPage();
        currentPage.hasAudio() && 
            player.pageAudioController.stop();
        player.activeAudioController = cpv.audioController;
        cpv.audioController.page = cpv.pageDisplayed;
        var playOnPageDisplayAudio = cpv.pageDisplayed.getPlayOnPageDisplayAudio();
        if(playOnPageDisplayAudio)
            cpv.audioController.readyToPlay(playOnPageDisplayAudio,cpv.pageDisplayed.course.volume);
        else
            cpv.audioController.hideAndStop();
        cpv.newDiv.dialog("option","height",$(window).height() - 50);
        cpv.newDiv.dialog("option","width",$(window).width() - 50);
        cpv.newDiv.dialog("option","position","center")
    },modal:true,close:function()
    {
        cpv.pageDisplayed.pageState.isVisited = true;
        if(cpv.pageDisplayed.canSendCompletion() && !cpv.pageDisplayed.isComplete() && cpv.pageDisplayed.isRequired())
            cpv.pageDisplayed.setIncomplete();
        else
            cpv.pageDisplayed.setComplete();
        cpv.callback != null && 
            cpv.callback();
        cpv.pageDisplayed.unload();
        cpv.audioController.page = null;
        courseController.course.currentPopupPageId = null;
        cpv.pageDisplayed = null;
        cpv.iframe.removeClass("fullscreen").attr("src","about:blank");
        cpv.captionsContainer.empty();
        cpv.assessmentDiv.empty();
        if(branchingController)
        {
            branchingController.hide(function()
            {
                var bv = branchingView;
                return function()
                {
                    bv.remove()
                }
            }());
            branchingController.unload()
        }
        branchingController = null;
        branchingView = null;
        cpv.audioController.hideAndStop();
        player.activeAudioController = player.pageAudioController
    },closeText:Resources.Dialog_Close_Text,dialogClass:"ContentsPopupDialog",draggable:false,resizable:false});
    function buildDialog(parent,page)
    {
        var assessmentController = null;
        branchingController && branchingController.isVisible() && branchingController.unload();
        switch(page.pageType.PlaybackSource)
        {
            case"KnowledgeCheck":
            case"PostTest":
            case"StandAloneAssessment":
            case"StandAloneQuestion":
                cpv.iframe.hide();
                iframeContainer.hide();
                cpv.iframe.attr("src","about:blank");
                cpv.newDiv.dialog("option","closeText",Resources.Assessment_Dialog_Close_Text);
                cpv.newDiv.dialog("option","dialogClass","ContentsPopupDialog AssessmentPopupDialog");
                branchingController && branchingController.hide();
                cpv.assessmentDiv.show();
                if(!assessmentController)
                {
                    var assessmentView = new AssessmentView(cpv.assessmentDiv,cpv.audioController,cpv.cc);
                    assessmentController = new AssessmentController(assessmentView,cpv.audioController);
                    assessmentView.append(views.utils.createButton("AssessmentPopupExitButton","","AssessmentPopupExitButton").click(function()
                    {
                        cpv.newDiv.dialog("close")
                    }).prop("title",Resources.Assessment_Dialog_Close_Text))
                }
                assessmentController.readyToPlay(page.Assessment);
                break;
            case"Branching":
                cpv.iframe.hide();
                iframeContainer.hide();
                cpv.iframe.attr("src","about:blank");
                cpv.newDiv.dialog("option","closeText",Resources.Branching_Dialog_Close_Text);
                cpv.newDiv.dialog("option","dialogClass","ContentsPopupDialog BranchingPopupDialog");
                assessmentController && assessmentController.hide();
                if(!branchingController)
                {
                    branchingView = new BranchingView($('<div id="ContentsPopupBranching"/>').insertAfter(iframeContainer),cpv.audioController,cpv.cc);
                    branchingController = new BranchingController(branchingView,cpv.audioController);
                    branchingView.append(views.utils.createButton("BranchingPopupExitButton","","BranchingPopupExitButton").click(function()
                    {
                        cpv.newDiv.dialog("close")
                    }).prop("title",Resources.Branching_Dialog_Close_Text))
                }
                branchingController.readyToPlay(page.BranchingGraph);
                break;
            case"Video":
                assessmentController && assessmentController.hide();
                branchingController && branchingController.hide();
                cpv.iframe.attr("src","VideoPage.htm");
                cpv.newDiv.dialog("option","closeText",Resources.Video_Dialog_Close_Text);
                cpv.newDiv.dialog("option","dialogClass","ContentsPopupDialog VideoPopupDialog");
                cpv.iframe.show();
                iframeContainer.show();
                cpv.assessmentDiv.hide();
                break;
            default:
                cpv.iframe.attr("src",page.getFilePath());
                cpv.newDiv.dialog("option","closeText",Resources.Content_Dialog_Close_Text);
                cpv.newDiv.dialog("option","dialogClass","ContentsPopupDialog");
                assessmentController && assessmentController.hide();
                branchingController && branchingController.hide();
                cpv.iframe.show();
                iframeContainer.show();
                cpv.assessmentDiv.hide()
        }
    }
    cpv.iframe.load(function()
    {
        if(!cpv.pageDisplayed)
            return;
        $("html",document).hasClass("light_theme") && 
            $("html",this.contentDocument).addClass("light_theme");
        var pageDisplayed = cpv.pageDisplayed;
        switch(pageDisplayed.pageType.PlaybackSource)
        {
            case"Video":
                vid = new VideoController(cpv.iframe[0].contentWindow,cpv.cc);
                vid.page = pageDisplayed;
                vid.videoFile = pageDisplayed.hasVideo() ? pageDisplayed.videoFiles[0] : new MediaFile(courseController.course,"");
                vid.volume = courseController.course.volume;
                vid.keyPointsFilePath = pageDisplayed.getKeyPointsPath(vid.videoFile.FileName);
                !vid.videoFile.mustPlayAll && 
                    pageDisplayed.setComplete();
                vid.readyToPlay()
        }
    });
    return{show:function(page,callback)
    {
        cpv.callback = callback;
        cpv.pageDisplayed = page;
        courseController.course.currentPopupPageId = page.id;
        cpv.newDiv.dialog("open")
    },getAudioController:function()
    {
        return cpv.audioController
    },getCurrentPage:function()
    {
        return cpv.pageDisplayed
    }}
}
var ContentsDialogView = function()
    {
        var instance = null;
        function PrivateConstructor()
        {
            var newDiv = $(document.createElement("div"));
            newDiv.attr("id","ContentsDialog");
            var dlg = newDiv.dialog({autoOpen:false,width:1,height:1,position:"center",title:Resources.TableOfContentsDialog_Title_Text,open:function()
                {
                    $("#ContentsDialog").dialog("option","height",$(window).height() - 50);
                    $("#ContentsDialog").dialog("option","width",$(window).width() - 50);
                    $("#ContentsDialog").dialog("option","position","center");
                    buildDialog(newDiv)
                },modal:true,close:function()
                {
                },closeText:Resources.Dialog_Close_Text,dialogClass:"ContentsDialog",draggable:false,resizable:false});
            newDiv.find("#showOptionalContentCheckBox").live("click",function()
            {
                var checkbox = $(this);
                courseController.course.settings.ShowOptionalContent = checkbox.is(":checked");
                buildDialog(newDiv);
                courseController.course.loadPageNavigation();
                $("#showOptionalContentCheckBox").focus()
            });
            return dlg
        }
        function buildDialog(parent)
        {
            parent.empty();
            var left = getLeftColumn(),
                center = getCenterColumn(),
                right = getRightColumn();
            parent.html('<div class="ContentsBoxContainer">' + left + right + center + "</div>");
            var element = document.getElementById("ContentPage" + courseController.course.getCurrentPage().id);
            if(element)
            {
                var topPos = element.offsetTop;
                document.getElementById("ContentsCenterColumn").scrollTop = topPos
            }
            $(window).bind("resize",function()
            {
                $("#ContentsCenterColumn").css("height",$(window).height() - 170)
            }).trigger("resize")
        }
        function getLeftColumn()
        {
            var s = '<div class="ContentsLeftColumn">';
            if(courseController.course.testOutPage)
            {
                var title = "";
                if(courseController.course.testOutPage.Assessment)
                    title = views.utils.getAssessmentSRStatusText(courseController.course.testOutPage.Assessment.Status);
                s += '<a class="ContentsTestOutLink non_accent" title="' + title + '" href="#" onclick="player.courseController.hideContentsDialog();courseController.navigateToTestOut();return false;">' + Resources.Welcome_TestOut_Button_Text + "</a>"
            }
            s += '<a class="ContentsWelcomeLink non_accent" href="#" onclick="player.courseController.hideContentsDialog();courseController.navigateToWelcomePage();return false;">' + Resources.Menu_Welcome_Menu_Text + "</a>";
            if(courseController.course.modules.length > 1)
            {
                s += '<div id="ContentsModuleContainer" class="ContentsModuleBoxContainer accent">';
                for(var currentModule = courseController.course.getCurrentPage().getModule(),
                    nModuleNumber = 1,
                    i = 0; i < courseController.course.modules.length; i++)
                {
                    var cModule = courseController.course.modules[i];
                    if(!cModule.pageState.isOptional)
                    {
                        var sStyle = currentModule == cModule ? "accent_selected" : "accent_not_selected",
                            sTitle = cModule.name + " ";
                        if(cModule.pageState.isLocked)
                            sTitle += "(" + Resources.Contents_Module_ModuleLocked_Text + ")";
                        else
                            if(cModule.isComplete())
                                sTitle += "(" + Resources.Contents_Module_ModuleComplete_Text + ")";
                            else
                                if(cModule.pageState.status == "I")
                                    sTitle += "(" + Resources.Contents_Module_ModuleInProgress_Text + ")";
                                else
                                    sTitle += "(" + Resources.Contents_Module_ModuleNotStarted_Text + ")";
                        s += '<a class="ContentsModuleBox ' + sStyle + '" title="' + sTitle + '" href="" onclick="ContentsDialogView.jumpToModule(' + nModuleNumber + '); return false;">';
                        s += common.zeroFill(nModuleNumber,2);
                        if(cModule.pageState.isLocked)
                            s += '<div class="ContentsModuleBoxLocked"></div>';
                        else
                            if(cModule.isComplete())
                                s += '<div class="ContentsModuleBoxComplete"></div>';
                            else
                                s += '<div class="ContentsModuleBoxNone">&nbsp;</div>';
                        s += "</a>";
                        nModuleNumber++
                    }
                }
                s += '<div class="ContentsModulesLabel">' + Resources.Contents_Modules_Text + "</div>";
                s += "</div>"
            }
            s += "</div>";
            return s
        }
        function getCenterColumn()
        {
            var nModule = 1,
                s = '<div class="ContentsCenterColumn"  id="ContentsCenterColumn">';
            s += '<div class="ContentsTOC" id="ContentsTOC">';
            var bAddedModule = false,
                currentPage = course.getCurrentPage();
            course.recursePageTreeFn(function(page,nCurrentLevel)
            {
                if(page.isRequired())
                    if(nCurrentLevel == 1)
                    {
                        var sI = "";
                        if(page.isComplete())
                            sI = '<div class="ContentsModuleComplete"></div>';
                        else
                            if(page.pageState.isLocked)
                                sI = '<div class="ContentsModuleLocked"></div>';
                        if(bAddedModule)
                            s += '<div class="ContentsModuleGap">&nbsp;</div>';
                        else
                            bAddedModule = true;
                        var sModule = nModule < 10 ? "0" + nModule : nModule + "";
                        s += '<div id="ContentModule' + nModule + '">' + sI + '<div class="ContentsModuleLabel accent_text toc_module_number">' + Resources.ProgressBar_ModuleName_Info_Text_Format.replace("{0}",sModule) + "</div></div>";
                        nModule++;
                        s += '<div class="toc_module_name ContentsLevel' + nCurrentLevel + '">' + page.name + "</div>"
                    }
                    else
                    {
                        var pageStyle = page == currentPage ? "ContentPageSelected " : "",
                            sOptional = page.pageState.isOptional ? " " + Resources.ModuleCard_Optional_Info_Text : "";
                        s += '<a id="ContentPage' + page.id + '" class="' + pageStyle + "hoveraccent_text ContentsLevel" + nCurrentLevel + '" href="#" onclick="ContentsDialogView.navigateToPage(' + page.id + ');return false;">' + page.name + sOptional + "</a>"
                    }
            });
            s += "</div>";
            s += "</div>";
            return s
        }
        function getRightColumn()
        {
            var s = '<div class="ContentsRightColumn">';
            s += '<div class="ContentsProgressBoxWrapper non_accent">';
            s += courseController.getProgressTile("","tile_190_200");
            s += "</div>";
            if(courseController.course.settings.UserCanToggleOptional)
            {
                s += '<div class="ContentsOptionalContentBoxWrapper accent">';
                var checkedVal = courseController.course.settings.ShowOptionalContent ? "checked" : "";
                s += '<label style="display:block" class="default_padding"><input type="checkbox" id="showOptionalContentCheckBox" name="showOptionalContent"' + checkedVal + " /> " + Resources.Welcome_OptionalContent_CheckBox_Text + "</label>";
                s += "</div>"
            }
            s += "</div>";
            return s
        }
        return{getInstance:function()
        {
            if(instance == null)
            {
                instance = new PrivateConstructor;
                instance.constructor = null
            }
            return instance
        },jumpToModule:function(nModule)
        {
            var topPos = document.getElementById("ContentModule" + nModule).offsetTop;
            document.getElementById("ContentsCenterColumn").scrollTop = topPos
        },navigateToPage:function(id)
        {
            var currentLocation = courseController.course.currentPageIndex;
            courseController.navigateToPageById(id);
            courseController.navigationSuccess && 
                courseController.hideContentsDialog()
        }}
    }();
function ContentsWidgetView(courseController)
{
    var course = courseController.course,
        container = $("<div />",{"class":"ContentsWidgetContainer"}),
        splitter = new SplitterView(course.settings.TOCCollapsed),
        widget = $("<div />",{"class":"ContentsWidget"}),
        widgetContent = $("<div />",{"class":"ContentsWidgetContent"}),
        widgetItems = $("<div />",{"class":"ContentsWidgetItems",role:"menu"});
    container.append(splitter);
    splitter.click(function()
    {
        updateWidgetCollapseState()
    });
    container.append(widget);
    widget.append(widgetContent).prepend($('<div class="ContentsWidgetHeader">Contents<div class="ContentsWidgetRequiredIndicator" aria-hidden="true">Required (!)</div></div></div>'));
    widgetContent.append(widgetItems);
    courseController.course.observer.observe("pageNavigationLoaded",function()
    {
        buildWidgetItems();
        updateWidgetOnStatusChange();
        updateWidgetOnNavigate()
    });
    courseController.course.observer.observe("pageStatusChanged",function()
    {
        updateWidgetOnStatusChange()
    });
    courseController.course.observer.observe("navigatedToPage",function()
    {
        updateWidgetOnNavigate()
    });
    var updateWidgetCollapseState = function()
        {
            var mainContainer = $("#Main");
            if(splitter.collapsed)
            {
                mainContainer.addClass("ExpandedMain");
                container.addClass("collapsed");
                course.settings.TOCCollapsed = true
            }
            else
            {
                mainContainer.removeClass("ExpandedMain");
                container.removeClass("collapsed");
                course.settings.TOCCollapsed = false;
                $(window).trigger("resize")
            }
        },
        showContentsWidget = function(expandSplitter)
        {
            $("#Main").removeClass("ExpandedMain");
            $(".ContentsWidgetContainer").removeClass("CollapsedWidget");
            if(expandSplitter)
            {
                splitter.collapsed = false;
                splitter.removeClass("SplitterCollapsed").addClass("SplitterExpanded")
            }
            updateWidgetCollapseState()
        },
        hideContentsWidget = function()
        {
            $(".ContentsWidgetContainer").addClass("CollapsedWidget");
            $("#Main").addClass("ExpandedMain")
        },
        expandWidgetItem = function(item)
        {
            $(item).siblings(".ContentsWidgetSubItems").removeClass("ExpandedSubItems");
            $(item).next(".ContentsWidgetSubItems").addClass("ExpandedSubItems")
        },
        expandAllItems = function()
        {
            widgetItems.find(".ContentsWidgetSubItems").addClass("ExpandedSubItems")
        },
        scrollWidgetToItem = function(item)
        {
            if($(item).length > 0)
            {
                var top = $(item).offset().top,
                    bottom = $(item).offset().top + $(item).height(),
                    widgetTop = $(item).parents(".ContentsWidgetContent").offset().top,
                    widgetBottom = $(item).parents(".ContentsWidgetContent").offset().top + $(item).parents(".ContentsWidgetContent").height();
                if(top < widgetTop)
                    $(item).parents(".ContentsWidgetContent").scrollTop(top - widgetTop + $(item).parents(".ContentsWidgetContent").scrollTop());
                else
                    bottom > widgetBottom && $(item).parents(".ContentsWidgetContent").scrollTop(bottom - widgetBottom + $(item).parents(".ContentsWidgetContent").scrollTop())
            }
        },
        updateWidgetOnStatusChange = function()
        {
            $(".ContentsWidgetItem").each(function()
            {
                var widgetPage = $(this).data("page");
                $(this).children(".StatusIcon").remove();
                if(widgetPage && widgetPage.isComplete())
                    $(this).prepend($('<div class="ContentsWidgetIcon StatusIcon"><img class="showOnLight" src="Player/theme/light/images/checkmark.png"/><img class="showOnDark" src="Player/theme/dark/images/checkmark.png"/></div>'));
                else
                    widgetPage && widgetPage.pageState.isLocked && $(this).prepend($('<div class="ContentsWidgetIcon StatusIcon"><img class="showOnLight" src="Player/theme/light/images/lock.png"/><img class="showOnDark" src="Player/theme/dark/images/lock.png"/></div>'))
            });
            $(".ContentsWidgetSubItem").each(function()
            {
                var widgetPage = $(this).data("page");
                $(this).children(".StatusIcon").remove();
                if(widgetPage && widgetPage.contribute == "r" && !widgetPage.pageState.isOptional && widgetPage.pageType.id != "54434C22-4760-41D7-9D0E-92821CCF0258")
                    if(widgetPage.isComplete())
                        $(this).prepend($('<div class="ContentsWidgetIcon StatusIcon"><img class="showOnLight" src="Player/theme/light/images/complete.png"/><img class="showOnDark" src="Player/theme/dark/images/complete.png"/></div>'));
                    else
                        $(this).prepend($('<div class="ContentsWidgetIcon StatusIcon"><img class="showOnLight" src="Player/theme/light/images/required.png"/><img class="showOnDark" src="Player/theme/dark/images/required.png"/></div>'))
            })
        },
        updateWidgetOnNavigate = function()
        {
            currentPage = course.getCurrentPage();
            $(".CurrentPageIcon",".ContentsWidget").remove();
            $(".CurrentPage",".ContentsWidget").removeClass("CurrentPage");
            if(currentPage.id)
            {
                $("#ContentPage" + currentPage.id,".ContentsWidget").addClass(".CurrentPage");
                $("#ContentPage" + currentPage.id,".ContentsWidget").prepend($('<div class="ContentsWidgetIcon CurrentPageIcon"><img class="showOnLight" src="Player/theme/light/images/arrow.right.nocircle.png"/><img class="showOnDark" src="Player/theme/dark/images/arrow.right.nocircle.png"/></div>'));
                expandWidgetItem($("#ContentPage" + currentPage.id,".ContentsWidget").parent(".ContentsWidgetSubItems").prev(".ContentsWidgetItem"))
            }
            else
            {
                $("#WelcomePage",".ContentsWidget").addClass(".CurrentPage");
                $("#WelcomePage",".ContentsWidget").prepend($('<div class="ContentsWidgetIcon CurrentPageIcon"><img class="showOnLight" src="Player/theme/light/images/arrow.right.nocircle.png"/><img class="showOnDark" src="Player/theme/dark/images/arrow.right.nocircle.png"/></div>'))
            }
            if(course.settings.DisplayContentsWidget === false)
                hideContentsWidget();
            else
                if(currentPage.pageType.HideContentsWidget === true)
                    hideContentsWidget();
                else
                {
                    switch(currentPage.pageType.PlaybackSource)
                    {
                        case"KnowledgeCheck":
                        case"PostTest":
                        case"StandAloneAssessment":
                        case"StandAloneQuestion":
                            hideContentsWidget();
                            break;
                        case"Branching":
                            if(currentPage.BranchingGraph && currentPage.BranchingGraph.usePlayerNavigation)
                                hideContentsWidget();
                            else
                                showContentsWidget();
                            break;
                        default:
                            if(!currentPage.id)
                                hideContentsWidget();
                            else
                                showContentsWidget()
                    }
                    if(currentPage.id)
                        scrollWidgetToItem($("#ContentPage" + currentPage.id,".ContentsWidget"));
                    else
                        scrollWidgetToItem($("#WelcomePage",".ContentsWidget"))
                }
        },
        buildWidgetItems = function()
        {
            widgetItems.children().remove();
            course.testOutPage && widgetItems.append($('<a id="ContentPage' + course.testOutPage.id + '" class="ContentsWidgetItem PageItem" href="#">' + Resources.Welcome_TestOut_Button_Text + "</a>").data("page",course.testOutPage).click(function()
            {
                courseController.navigateToTestOut();
                return false
            }));
            for(var welcomePage = null,
                i = 0; i < course.pageNavigation.length; i++)
                if(course.pageNavigation[i].id == null)
                {
                    welcomePage = course.pageNavigation[i];
                    break
                }
            widgetItems.append($('<a id="WelcomePage" class="ContentsWidgetItem PageItem" href="#">' + Resources.Menu_Welcome_Menu_Text + "</a>").data("page",welcomePage).click(function()
            {
                courseController.navigateToWelcomePage();
                return false
            }));
            var nModule = 0,
                subItems = null;
            course.recursePageTreeFn(function(page,nCurrentLevel)
            {
                if(page.isRequired())
                    if(nCurrentLevel == 1)
                    {
                        nModule++;
                        var sModule = nModule < 10 ? "0" + nModule : nModule + "";
                        widgetItems.append($('<a class="ContentsWidgetItem ModuleItem" href="#" role="menuitem">' + Resources.ProgressBar_ModuleName_Info_Text_Format.replace("{0}",sModule) + page.name + "</a>").data("page",page).click(function()
                        {
                            expandWidgetItem(this);
                            return false
                        }));
                        subItems = $("<div />",{"class":"ContentsWidgetSubItems"});
                        widgetItems.append(subItems)
                    }
                    else
                    {
                        var sOptional = page.pageState.isOptional && Resources.ModuleCard_Optional_Info_Text ? " " + Resources.ModuleCard_Optional_Info_Text : "";
                        if(subItems != null)
                            subItems.append($('<a role="menuitem" id="ContentPage' + page.id + '" class="ContentsWidgetSubItem PageItem hoveraccent_text ContentsLevel' + nCurrentLevel + '" href="#" onclick="courseController.navigateToPageById(' + page.id + ');return false;">' + page.name + sOptional + "</a>").data("page",page).focus(function()
                            {
                                !$(this).parent(".ContentsWidgetSubItems").hasClass("ExpandedSubItems") && expandWidgetItem($(this).parent(".ContentsWidgetSubItems").prev(".ContentsWidgetItem"))
                            }));
                        else
                            widgetItems.append($('<a role="menuitem" id="ContentPage' + page.id + '" class="ContentsWidgetSubItem PageItem hoveraccent_text ContentsLevel' + nCurrentLevel + '" href="#" onclick="courseController.navigateToPageById(' + page.id + ');return false;">' + page.name + sOptional + "</a>").data("page",page))
                    }
            })
        };
    return{container:container,showContentsWidget:showContentsWidget,hideContentsWidget:hideContentsWidget,expandAllItems:expandAllItems}
}
function ContentView(courseController,audioController)
{
    var pageDisplayed = null,
        assessmentController = null,
        branchingController = null,
        vid = null,
        iframe = $("iframe#Content"),
        mainDiv = $("div#Main");
    this.getAssessmentController = function()
    {
        return assessmentController
    };
    this.getBranchingController = function()
    {
        return branchingController
    };
    iframe.load(function()
    {
        if(!pageDisplayed)
            return;
        $("html",document).hasClass("light_theme") && 
            $("html",iframe.get(0).contentDocument).addClass("light_theme");
        switch(pageDisplayed.pageType.PlaybackSource)
        {
            case"Video":
                vid = new VideoController(iframe[0].contentWindow,courseController);
                vid.page = pageDisplayed;
                vid.videoFile = pageDisplayed.hasVideo() ? pageDisplayed.videoFiles[0] : new MediaFile(courseController.course,"");
                vid.volume = courseController.course.volume;
                vid.keyPointsFilePath = pageDisplayed.getKeyPointsPath(vid.videoFile.FileName);
                !vid.videoFile.mustPlayAll && 
                    pageDisplayed.setComplete();
                vid.readyToPlay()
        }
    });
    courseController.course.observer.observe("navigatedToPage",function(page)
    {
        pageDisplayed = page;
        courseController.isTranscriptShowing && 
            courseController.showTranscriptPopup("");
        var playOnPageDisplayAudio = pageDisplayed.getPlayOnPageDisplayAudio();
        if(playOnPageDisplayAudio)
            audioController.readyToPlay(playOnPageDisplayAudio,course.volume);
        else
            audioController.hideAndStop();
        assessmentController && assessmentController.isVisible() && 
            assessmentController.unload();
        branchingController && branchingController.isVisible() && 
            branchingController.unload();
        iframe.removeClass("fullscreen");
        switch(page.pageType.PlaybackSource)
        {
            case"KnowledgeCheck":
            case"PostTest":
            case"StandAloneAssessment":
            case"StandAloneQuestion":
                iframe.hide();
                iframe.attr("src","about:blank");
                branchingController && 
                    branchingController.hide();
                if(!assessmentController)
                {
                    var assessmentView = new AssessmentView($("div#Assessment"),audioController,courseController);
                    assessmentController = new AssessmentController(assessmentView,audioController);
                    assessmentView.Observer.observe("locationChanged",function(assessment)
                    {
                        courseController.course.observer.fire("assessmentLocationChanged",assessment)
                    });
                    assessmentView.Observer.observe("checkAnswerClicked",function(assessment)
                    {
                        courseController.course.observer.fire("assessmentQuestionScored",assessment)
                    })
                }
                assessmentController.hide();
                assessmentController.readyToPlay(page.Assessment);
                break;
            case"Branching":
                iframe.hide();
                iframe.attr("src","about:blank");
                assessmentController && 
                    assessmentController.hide();
                if(!branchingController)
                {
                    var branchingView = new BranchingView($("div#Branching"),audioController,courseController);
                    branchingController = new BranchingController(branchingView,audioController);
                    branchingView.Observer.observe("locationChanged",function(branchingGraph)
                    {
                        courseController.course.observer.fire("branchingLocationChanged",branchingGraph)
                    });
                    branchingView.Observer.observe("stateChanged",function(branchingGraph)
                    {
                        courseController.course.observer.fire("branchingStateChanged",branchingGraph)
                    })
                }
                branchingController.readyToPlay(page.BranchingGraph);
                break;
            case"Video":
                assessmentController && 
                    assessmentController.hide();
                branchingController && 
                    branchingController.hide();
                iframe.attr("src","VideoPage.htm");
                iframe.show();
                break;
            default:
                iframe.attr("src",page.getFilePath());
                assessmentController && 
                    assessmentController.hide();
                branchingController && 
                    branchingController.hide();
                iframe.show()
        }
    })
}
var DefineYourRoleDialogView = function()
    {
        var dyr = this;
        function PrivateConstructor()
        {
            var newDiv = $(document.createElement("div"));
            newDiv.attr("id","DefineYourRoleDialog");
            var dlg = newDiv.dialog({autoOpen:false,width:1,height:1,title:Resources.DefineYourRole_Text,closeOnEscape:false,dialogClass:"DefineYourRoleDialog",draggable:false,resizable:false,modal:true,open:function()
                {
                    views.utils.sizeDialog($("#DefineYourRoleDialog"));
                    newDiv.html(buildDialog());
                    $("#DefineYourRoleDialog").focus();
                    $(function()
                    {
                        if(dyr.settings)
                        {
                            !dyr.settings.isFTE && 
                                $("#FTECombobox option[value='no']").attr("selected","selected");
                            !dyr.settings.isPeopleManager && 
                                $("#ManageFTEsCombobox option[value='no']").attr("selected","selected");
                            dyr.settings.organization && 
                                $("#OrganizationCombobox option[value='" + dyr.settings.organization.alias + "']").attr("selected","selected")
                        }
                    })
                },buttons:[{id:"button-ok",text:Resources.Dialog_Submit_Button_Text,click:function()
                {
                    if(dyr.settings)
                    {
                        dyr.settings.isFTE = $("#FTECombobox").val() == "yes";
                        dyr.settings.isPeopleManager = $("#ManageFTEsCombobox").val() == "yes";
                        dyr.settings.organization = dyr.settings.organizations[$("#OrganizationCombobox").val()];
                        dyr.callback && 
                            dyr.callback()
                    }
                    dyr.instance.dialog("close")
                }}]});
            return dlg
        }
        return{open:function(settings,callback)
        {
            if(!dyr.instance)
            {
                dyr.instance = new PrivateConstructor;
                dyr.instance.constructor = null
            }
            dyr.settings = settings;
            dyr.callback = callback;
            dyr.instance.dialog("open")
        },close:function()
        {
            dyr.instance && 
                dyr.instance.dialog("close")
        }};
        function buildDialog()
        {
            var s = "<p>" + Resources.DefineYourRole_Dialog_InfoText + "</p>";
            s += "<p>" + Resources.AreYouMicrosoftFTE_Question_Text;
            s += '&nbsp;&nbsp;<select id="FTECombobox"><option value="yes">Yes</option><option value="no">No</option></select></p>';
            s += "<p>" + Resources.DoYouManageOtherMicrosoftFTEs_Question_Text;
            s += '&nbsp;&nbsp;<select id="ManageFTEsCombobox"><option value="yes">Yes</option><option value="no">No</option></select></p>';
            s += "<p>" + Resources.WhoIsYourDivisionPresident_Question_Text;
            s += '&nbsp;&nbsp;<select id="OrganizationCombobox">';
            for(var org in dyr.settings.organizations)
                if(dyr.settings.organizations[org].alias)
                    s += '<option value="' + dyr.settings.organizations[org].alias + '">' + dyr.settings.organizations[org].name + "</option>";
            s += "</select></p>";
            return s
        }
    }(),
    DownloadProblemDialogView = function()
    {
        var instance = null;
        function PrivateConstructor()
        {
            var newDiv = $(document.createElement("div"));
            newDiv.attr("id","DownloadProblemDialog");
            var dlg = newDiv.dialog({autoOpen:false,width:800,height:600,title:Resources.AlreadyDownloadedDialog_WindowTitle_Info_Text,closeText:Resources.Dialog_Close_Text,dialogClass:"DownloadProblemDialog",draggable:false,resizable:false,modal:true,open:function()
                {
                    newDiv.html(buildDialog())
                },close:function()
                {
                    $("#DownloadMetroButton").hide();
                    closeCourse()
                }});
            return dlg
        }
        return{downloadPlayer:function()
        {
            courseController.downloadCourse(3)
        },forceOnline:function()
        {
            courseController.forceOnline()
        },fastHelp:function()
        {
            window.open("http://fasthelp/","fasthelp","")
        },getInstance:function()
        {
            if(instance == null)
            {
                instance = new PrivateConstructor;
                instance.constructor = null
            }
            return instance
        }};
        function buildDialog()
        {
            var s = '<div class="DownloadProblemContainer">';
            s += '<div class="DownloadProblemIntroduction">' + Resources.AlreadyDownloadedDialog_Introduction_Text + "</div>";
            s += '<a href="#" class="DownloadProblemLink" onclick="DownloadProblemDialogView.downloadPlayer(); return false;">';
            s += '<div class="DownloadProblemTitle accent_text">' + Resources.AlreadyDownloadedDialog_DownloadCourse_Info_Text + "</div>";
            s += '<div class="DownloadProblemMessage">' + Resources.AlreadyDownloadedDialog_DownloadCourseDescription_Info_Text + "</div>";
            s += "</a>";
            s += '<div class="DownloadProblemHelp">' + Resources.AlreadyDownloadedDialog_Help_Header_Text + "</div>";
            s += '<a href="#" class="DownloadProblemLink" onclick="DownloadProblemDialogView.forceOnline(); return false;">';
            s += '<div class="DownloadProblemTitle">' + Resources.AlreadyDownloadedDialog_ForceOnline_Info_Text + "</div>";
            s += '<div class="DownloadProblemMessage">' + Resources.AlreadyDownloadedDialog_ForceOnlineDescription_Info_Text + "</div>";
            s += "</a>";
            s += '<a href="#" class="DownloadProblemLink" onclick="DownloadProblemDialogView.fastHelp(); return false;">';
            s += '<div class="DownloadProblemTitle">' + Resources.AlreadyDownloadedDialog_GoToFastHelp_Info_Text + "</div>";
            s += '<div class="DownloadProblemMessage">' + Resources.AlreadyDownloadedDialog_GoToFastHelpDescription_Info_Text + "</div>";
            s += "</a>";
            return s
        }
    }(),
    EvalDialogView = function()
    {
        var course = null,
            formId = null,
            questions = null;
        function PrivateConstructor(parentWindow)
        {
            var dlg = parentWindow ? parentWindow.getDialogElem() : $(document.createElement("div"));
            dlg.attr("id","EvalDialog");
            var shownInModal = course.settings.EmbeddedEvaluation == "ShowInModal",
                dialogButtons = [{id:"button-submit",text:Resources.Dialog_Submit_Button_Text,click:function()
                {
                    var answeredAllQuestions = getAnswers(dlg);
                    if(course.settings.MustAnswerAllEvalQuestions && !answeredAllQuestions)
                        courseController.alert(Resources.EvaluationDialog_Incomplete);
                    else
                        saveQuestions()
                }}];
            shownInModal && 
                dialogButtons.push({id:"button-cancel",text:Resources.Dialog_Cancel_Button_Text,click:function()
                {
                    dlg.dialog("close")
                }});
            dlg.dialog({autoOpen:false,title:shownInModal ? Resources.EvaluationDialog_Editable_Title_Text.replace("%%courseName%%",course.name) : "",closeText:shownInModal ? Resources.Dialog_Close_Text : "",dialogClass:"EvalDialog",resizable:false,draggable:false,closeOnEscape:shownInModal,modal:shownInModal,buttons:dialogButtons,close:function()
            {
                dlg.dialog("destroy").remove()
            },open:function()
            {
                dlg.dialog("option","height",parentWindow ? $(parentWindow).height() - 8 : $(window).height() - 50);
                dlg.dialog("option","width",parentWindow ? $(parentWindow).width() - 8 : $(window).width() - 50);
                dlg.dialog("option","position","center");
                !shownInModal && 
                    $(this).parent().children().children(".ui-dialog-titlebar-close").hide();
                dlg.css("overflow","hidden");
                LoadingDialogView.open(Resources.Dialog_Wait_Title_Text,Resources.EvaluationSubmittedDialog_Wait_Body_Text);
                $.ajax({type:"GET",contentType:"application/json; charset=utf-8",url:course.settings.EvalServiceUri + "GetEvalQuestions?attemptId=" + course.settings.AttemptId + "&formId=" + formId,data:"{}",dataType:"jsonp",success:function(result)
                {
                    questions = result.Data;
                    dlg.html(buildDialog(questions));
                    onResize(dlg);
                    LoadingDialogView.close()
                },error:function()
                {
                    LoadingDialogView.open(Resources.EvaluationSubmittedDialog_Error_Title_Text,Resources.EvaluationSubmittedDialog_Error_Body_Text);
                    if(shownInModal)
                        window.setTimeout(function()
                        {
                            LoadingDialogView.close();
                            dlg.dialog("close")
                        },5e3);
                    else
                        window.setTimeout(function()
                        {
                            LoadingDialogView.close()
                        },5e3)
                }})
            }});
            function saveQuestions()
            {
                LoadingDialogView.open(Resources.Dialog_Wait_Title_Text,Resources.EvaluationSubmittedDialog_Wait_Body_Text);
                $.ajax({type:"POST",contentType:"application/json; charset=utf-8",url:course.settings.EvalServiceUri + "SaveEvalAnswers?attemptId=" + course.settings.AttemptId,processData:false,data:JSON.stringify(questions),dataType:"json",success:function()
                {
                    LoadingDialogView.open(Resources.EvaluationSubmittedDialog_Thanks_Title_Text,Resources.EvaluationSubmittedDialog_Thanks_Body_Text);
                    if(shownInModal)
                        window.setTimeout(function()
                        {
                            LoadingDialogView.close();
                            dlg.dialog("close")
                        },5e3);
                    else
                    {
                        course && 
                            course.getCurrentPage().setComplete();
                        window.setTimeout(function()
                        {
                            LoadingDialogView.close()
                        },5e3);
                        document.getElementById("Content").contentDocument.location.reload(true)
                    }
                },error:function()
                {
                    LoadingDialogView.open(Resources.EvaluationSubmittedDialog_Error_Title_Text,Resources.EvaluationSubmittedDialog_Error_Body_Text);
                    if(shownInModal)
                        window.setTimeout(function()
                        {
                            LoadingDialogView.close();
                            dlg.dialog("close")
                        },5e3);
                    else
                        window.setTimeout(function()
                        {
                            LoadingDialogView.close()
                        },5e3)
                }})
            }
            $(window).bind("resize",function()
            {
                onResize(dlg)
            });
            return dlg
        }
        function onResize(dlg)
        {
            dlg.find("#dlgQuestionsContainer").height(dlg.height() - dlg.find("#dlgInstructions").height() - 8)
        }
        function buildDialog(questionList)
        {
            var s = "";
            if(questionList && questionList.length > 0)
            {
                s += '<div id="dlgInstructions" class="dialogInstructions">' + questionList[0].FormInstruct + "</div>";
                s += '<div id="dlgQuestionsContainer" style="overflow-y:scroll;"><table border="0" width="100%">';
                for(var maxNoOfChoices = getMaxNumberOfChoices(questionList),
                    i = 0; i < questionList.length; i++)
                {
                    var question = questionList[i];
                    s += "<tr>";
                    s += '<td width="4%" style="padding-top:20px;" class="accent_text tile_title">';
                    s += common.zeroFill(question.QuestionDisplayOrder,2);
                    s += "</td>";
                    s += '<td style="padding-top:20px;" colspan="' + maxNoOfChoices + '">';
                    s += question.QuestionText;
                    s += "</td>";
                    s += "</tr>";
                    s += "<tr>";
                    s += "<td/>";
                    switch(question.QuestionType)
                    {
                        case"Comment":
                            s += '<td  colspan="' + maxNoOfChoices + '">';
                            s += '<textarea name="choiceForQuestion' + i + '" id="comment' + i + '" style="overflow-x: hidden;width:400px;" rows="4" cols="75"></textarea>';
                            s += "</td>";
                            break;
                        case"MultipleSelect":
                            for(var j = 0; j < question.EvalQuestionChoices.length; j++)
                            {
                                var choice = question.EvalQuestionChoices[j];
                                s += '<td valign="top" width="' + 96 / maxNoOfChoices + '%">';
                                s += '<label><input type="checkbox" id="" name="choiceForQuestion' + i + '" value="' + choice.AnswerOrdinal + '" /> ' + choice.AnswerText + "</label>";
                                s += "</td>"
                            }
                            break;
                        case"MultipleChoice":
                            for(var j = 0; j < question.EvalQuestionChoices.length; j++)
                            {
                                var choice = question.EvalQuestionChoices[j];
                                s += '<td valign="top" width="' + 96 / maxNoOfChoices + '%">';
                                s += '<label><input type="radio" id="" name="choiceForQuestion' + i + '" value="' + choice.AnswerOrdinal + '" /> ' + choice.AnswerText + "</label>";
                                s += "</td>"
                            }
                    }
                    s += "</tr>"
                }
                s += "</table></div>"
            }
            return s
        }
        function getAnswers(dlg)
        {
            var answeredAllQuestions = true;
            if(questions && questions.length > 0)
                for(var i = 0; i < questions.length; i++)
                {
                    var question = questions[i];
                    switch(question.QuestionType)
                    {
                        case"Comment":
                            question.Answer = dlg.find("textarea[name=choiceForQuestion" + i + "]").val();
                            break;
                        case"MultipleSelect":
                        case"MultipleChoice":
                            question.Answer = "";
                            for(var inputList = dlg.find("input[name=choiceForQuestion" + i + "]:checked"),
                                j = 0; j < inputList.length; j++)
                                if(question.Answer == "")
                                    question.Answer += $(inputList[j]).val();
                                else
                                    question.Answer += "," + $(inputList[j]).val();
                            if(!question.Answer)
                                answeredAllQuestions = false
                    }
                }
            return answeredAllQuestions
        }
        function getMaxNumberOfChoices(questions)
        {
            var max = 0;
            if(questions && questions.length > 0)
                for(var i = 0; i < questions.length; i++)
                {
                    var question = questions[i];
                    if(question.EvalQuestionChoices.length > max)
                        max = question.EvalQuestionChoices.length
                }
            return max
        }
        return{open:function(courseModel,formPK,parentWindow)
        {
            course = courseModel;
            formId = formPK;
            var dlg = new PrivateConstructor(parentWindow);
            dlg.dialog("open")
        }}
    }(),
    GlossaryDialogView = function()
    {
        var instance = null;
        function PrivateConstructor()
        {
            var newDiv = $(document.createElement("div"));
            newDiv.attr("id","GlossaryDialog");
            var handleResize = function()
                {
                    $("#GlossaryContents").height($(window).height() - 165);
                    $(".GlossaryMenuContainer").height($(window).height() - 165)
                },
                dlg = newDiv.dialog({autoOpen:false,height:1,width:1,title:Resources.GlossaryDialog_Title_Text,closeText:Resources.Dialog_Close_Text,dialogClass:"GlossaryDialog",draggable:false,resizable:false,modal:true,open:function()
                {
                    $("#GlossaryDialog").dialog("option","height",$(window).height() - 50);
                    $("#GlossaryDialog").dialog("option","width",$(window).width() - 50);
                    $("#GlossaryDialog").dialog("option","position","center");
                    var path = courseController.course.getContentFolderPath() + "Popups/__Glossary.htm";
                    $("#GlossaryDialog").load(path,function()
                    {
                        $("#AppBar_Glossary_Button_Text").text(Resources.AppBar_Glossary_Button_Text);
                        handleResize()
                    });
                    $(window).bind("resize",function()
                    {
                        handleResize()
                    })
                }});
            return dlg
        }
        return{getInstance:function()
        {
            if(instance == null)
            {
                instance = new PrivateConstructor;
                instance.constructor = null
            }
            return instance
        },glossaryJump:function(element)
        {
            try
            {
                var topPos = document.getElementById("letter_" + element.innerHTML).offsetTop;
                document.getElementById("GlossaryContents").scrollTop = topPos - 10;
                var j = document.getElementById("letter_" + element.innerHTML);
                j.innerHTML = j.innerHTML;
                j.setAttribute("aria-live","assertive");
                j.focus()
            }
            catch(e)
            {
            }
        }}
    }();
function HelpDialogFastHelpView()
{
    var rootElem = $('<div id="FastHelpView"/>'),
        categoryContainer = $('<div class="help_categories"/>').appendTo(rootElem),
        contentContainer = $('<div class="help_content_container"/>');
    contentContainer.append($('<a name="FastHelpTopicContent" href="#" class="help_content_anchor"/>'));
    var topicTitle = $("<h2/>").appendTo(contentContainer),
        topicContent = $('<div class="help_topic_content"/>').appendTo(contentContainer);
    contentContainer.appendTo(rootElem);
    $('<div class="clear"/>').appendTo(rootElem);
    var categories = null,
        topics = null,
        selectedCategory = -1,
        getCategoryIndex = function(category)
        {
            for(var i = 0; i < categories.length; i++)
                if(categories[i] === category)
                    return i;
            return-1
        },
        expandCategory = function(category)
        {
            var $category = $(category),
                $expansion = $(category.expansion),
                content = $expansion.children(".help_category_content"),
                expandedHeight = content.height();
            $expansion.removeClass("compressed").stop().animate({height:expandedHeight + "px"},200,function()
            {
                $(this).css("height","auto")
            });
            $category.hasClass("accent2") || $category.addClass("accent2");
            selectedCategory = getCategoryIndex(category)
        },
        collapseCategory = function(category,callback)
        {
            var $category = $(category),
                $expansion = $(category.expansion),
                index = getCategoryIndex(category),
                content = $expansion.children(".help_category_content"),
                expandedHeight = content.height();
            $expansion.stop().animate({height:"0px"},150,function()
            {
                selectedCategory === getCategoryIndex(category) && (selectedCategory = -1);
                $expansion.addClass("compressed");
                $category.hasClass("accent2") && $category.removeClass("accent2");
                callback && callback()
            })
        },
        revealCategory = function()
        {
            var category = this;
            if(selectedCategory !== getCategoryIndex(category))
                if(selectedCategory !== -1)
                    collapseCategory(categories[selectedCategory],function()
                    {
                        expandCategory(category)
                    });
                else
                    expandCategory(category)
        },
        unrevealCategory = function()
        {
            selectedCategory === getCategoryIndex(this) && 
                collapseCategory(this)
        },
        toggleCategory = function()
        {
            var category = this;
            if(selectedCategory !== getCategoryIndex(category))
                revealCategory.call(this);
            else
                unrevealCategory.call(this);
            $(category).children("a.toggle").focus()
        },
        displayTopic = function()
        {
            $(".help_topic > a.accent2_text").removeClass("accent2_text");
            $(this).addClass("accent2_text");
            topicTitle.html($(this).html());
            topicContent.html($(this).siblings(".help_topic_content").first().html());
            contentContainer.removeClass("noTopic")
        },
        clearTopic = function()
        {
            topicTitle.html("");
            topicContent.html("");
            contentContainer.addClass("noTopic")
        };
    rootElem.loadTopics = function(path)
    {
        categoryContainer.load(path,function()
        {
            $("#AppBar_Help_Button_Text").text(Resources.AppBar_Help_Button_Text);
            $("#HelpDialog_Fasthelp_Link_Text").text(Resources.HelpDialog_Fasthelp_Link_Text);
            var accessibleFile = courseController.course.getContentFolderPath() + "Accessibility.htm";
            $("#AccessibilityMode").attr("src",accessibleFile);
            clearTopic();
            categories = categoryContainer.find(".help_category");
            topics = categoryContainer.find(".help_topic");
            selectedCategory = -1;
            categories.each(function()
            {
                this.expansion = $(this).children(".help_category_expansion")[0];
                $(this.expansion).insertAfter(this).addClass("compressed");
                this.toggleButton = $(this).children("a.toggle")[0] || $("<a/>",{"class":"toggle"}).prependTo(this)[0];
                $(this.toggleButton).attr("href","#");
                $(this).off("click",toggleCategory).on("click",toggleCategory)
            });
            topics.children("a").on("click",displayTopic)
        })
    };
    return rootElem
}
function HelpDialogNavBarView(helpDialogView)
{
    var navBar = $('<div id="HelpNavBar"></div>'),
        unorderedList = $("<ul></ul>").append('<li><a href="#" id="HelpNavBarFastHelpLink" class="active">' + Resources.HelpDialog_Buttons_FastHelp_Text + "</a></li>").append('<li><a href="#" id="HelpNavBarSubmitRequestLink">' + Resources.HelpDialog_Buttons_SubmitRequest_Text + "</a></li>");
    $("li > a",unorderedList).on("click",function(event)
    {
        event.preventDefault();
        activateLink(this);
        switch(this.id)
        {
            case"HelpNavBarFastHelpLink":
                helpDialogView.Observer.fire("fastHelpLocationClicked");
                break;
            case"HelpNavBarSubmitRequestLink":
                helpDialogView.Observer.fire("submitRequestLocationClicked")
        }
        return false
    });
    navBar.append(unorderedList);
    var activateLink = function(link)
        {
            unorderedList.find(".active").removeClass("active");
            $(link).addClass("active")
        };
    navBar.checkFastHelp = function()
    {
        activateLink(navBar.find("#HelpNavBarFastHelpLink"))
    };
    navBar.checkSubmitRequest = function()
    {
        activateLink(navBar.find("#HelpNavBarSubmitRequestLink"))
    };
    return navBar
}
function HelpDialogSubmitRequestView()
{
    var rootElem = $('<div id="SubmitRequestView"/>');
    rootElem.html('Have a technical problem or issue with this course? Here is how to report your problem and get help.<p><strong>Step One: Create a Service Request with <a href="http://FastHelp/" target="_blank">http://FastHelp</a> </strong></p><div style="float:right;"><img alt="Enter Learning Central as your search term" longdesc="Learning Central search term" src="Player/theme/dark/images/LC_Search_Term.png"><br/><img alt="Retain your IM number to add to your email subject line" longdesc="Note your IM number" src="Player/theme/dark/images/IM_Number.png"></div><ol><li>Select your location</li><li>Enter "Learning Central" in the Search Product/Application/Service field</li><li>Select the symptom that best matches your concern</li><li>Describe your problem, including <b>course title,</b> in the description field</li><li>Once you submit your ticket, <strong>note your IM number for your email!!</strong></li></ol><p><strong>Step Two: Send Help Desk an email</strong></p><ol><li>Click this <strong><a href="#" onclick="player.generateReportProblemEmail(); return false;">Generate Help Desk Email</a></strong> link to create an email message</li><li>The new email message created from your Outlook account includes your course title</li><li><strong><a href="#" id="copyToClipboardLink">Click here</a></strong> to copy critical system information to the clipboard, then paste into your email message.</li><li><strong>Very Important!</strong> Add your IM number to the Subject Line</li><li>In the message body, provide add any details, additional information including screen shots </li><li>Send the email</li></ol>');
    var copySystemInfoToClipboard = function()
        {
            window.clipboardData && clipboardData.setData && 
                clipboardData.setData("text",player.getHelpDeskCourseInfo())
        };
    rootElem.find("#copyToClipboardLink").on("click",copySystemInfoToClipboard);
    return rootElem
}
var HelpDialogView = function()
    {
        var instance = null;
        function PrivateConstructor()
        {
            var newDiv = $(document.createElement("div"));
            newDiv.attr("id","HelpDialog");
            var dlg = newDiv.dialog({autoOpen:false,resizable:false,height:1,width:1,closeText:Resources.Dialog_Close_Text,dialogClass:"HelpDialog",draggable:false,resizable:false,modal:true,open:function()
                {
                    views.utils.sizeDialog($("#HelpDialog"));
                    $(".HelpDialog .ui-dialog-titlebar").append(navBarView);
                    var path = courseController.course.getContentFolderPath() + "Popups/__Help.htm";
                    fastHelpView.loadTopics(path);
                    showFastHelp();
                    navBarView.checkFastHelp()
                }});
            dlg.Observer = new Observer;
            var navBarView = new HelpDialogNavBarView(dlg),
                dialogContent = $('<div id="HelpPopupContent"/>').appendTo(dlg),
                fastHelpView = new HelpDialogFastHelpView(dlg);
            fastHelpView.appendTo(dialogContent);
            var submitRequestView = new HelpDialogSubmitRequestView(dlg);
            submitRequestView.appendTo(dialogContent);
            var showFastHelp = function()
                {
                    dialogContent.removeClass("helpRequestMode")
                },
                showSubmitRequest = function()
                {
                    dialogContent.addClass("helpRequestMode")
                };
            dlg.Observer.observe("fastHelpLocationClicked",showFastHelp);
            dlg.Observer.observe("submitRequestLocationClicked",showSubmitRequest);
            return dlg
        }
        return{getInstance:function()
        {
            if(instance == null)
            {
                instance = new PrivateConstructor;
                instance.constructor = null
            }
            return instance
        }}
    }(),
    HighContrastDialogView = function()
    {
        var instance = null;
        function PrivateConstructor()
        {
            var newDiv = $(document.createElement("div")).attr("id","HighContrastDialog"),
                dlg = newDiv.dialog({autoOpen:false,title:Resources.HighContrastDialog_Title_Text,open:function()
                {
                    $(this).parent().children().children(".ui-dialog-titlebar-close").hide();
                    $("#HighContrastDialog").dialog("option","height",$(window).height() - 50);
                    $("#HighContrastDialog").dialog("option","width",$(window).width() - 50);
                    $("#HighContrastDialog").dialog("option","position","center");
                    newDiv.html(buildDialog());
                    newDiv.attr("role","alertdialog");
                    newDiv.attr("aria-live","assertive")
                },dialogClass:"HighContrastDialog",draggable:false,resizable:false,closeOnEscape:false,modal:true});
            return dlg
        }
        function buildDialog()
        {
            var s = '<div class="LanguageBoxContainer"><div class="dialogInstructions">' + Resources.HighContrastDialog_HeaderInfo_Text + "</div>";
            s += '<a class="LanguageBox" href="#" onclick="HighContrastDialogView.changeHighContrastMode(\'whiteonblack\');return false;">' + Resources.HighContrastDialog_WhiteOnBlack_Text + "</a>";
            s += '<a class="LanguageBox" href="#" onclick="HighContrastDialogView.changeHighContrastMode(\'blackonwhite\');return false;">' + Resources.HighContrastDialog_BlackOnWhite_Text + "</a>";
            return s + "</div>"
        }
        return{getInstance:function()
        {
            if(instance == null)
            {
                instance = new PrivateConstructor;
                instance.constructor = null
            }
            return instance
        },changeHighContrastMode:function(highContrastStyle)
        {
            $("html").removeClass("light_theme");
            highContrastStyle == "blackonwhite" && 
                $("html").addClass("light_theme");
            this.getInstance().dialog("close")
        }}
    }(),
    InfoButtonView = function()
    {
        var instance = null;
        function PrivateConstructor()
        {
            var rootElem = views.utils.createMetroButton("InfoMetroButton","");
            rootElem.children(".MetroIcon").removeClass("MetroIcon").addClass("Metro24Icon");
            rootElem.addClass("InfoMetroButton");
            rootElem.attr("title","Show page information");
            return rootElem
        }
        return{getInstance:function()
        {
            if(instance == null)
            {
                instance = new PrivateConstructor;
                instance.constructor = null
            }
            return instance
        },bind:function(name,action)
        {
            this.getInstance().unbind(name).bind(name,action)
        },show:function()
        {
            this.getInstance().show()
        },hide:function()
        {
            this.getInstance().hide()
        }}
    }(),
    LanguageDialogView = function()
    {
        var instance = null;
        function PrivateConstructor()
        {
            var newDiv = $(document.createElement("div"));
            newDiv.attr("id","LanguageDialog");
            var dlg = newDiv.dialog({autoOpen:false,width:800,height:500,title:Resources.LanguageDialog_Title_Text,closeText:Resources.Dialog_Close_Text,dialogClass:"LanguageDialog",modal:true,open:function()
                {
                    $("#LanguageDialog").dialog("option","height",$(window).height() - 40);
                    $("#LanguageDialog").dialog("option","width",$(window).width() - 40);
                    $("#LanguageDialog").dialog("option","position","center");
                    newDiv.html(buildDialog())
                },draggable:false,resizable:false});
            return dlg
        }
        return{getInstance:function()
        {
            if(instance == null)
            {
                instance = new PrivateConstructor;
                instance.constructor = null
            }
            return instance
        },changeLanguage:function(code)
        {
            courseController.course.scormState.setState("language",code);
            courseController.course.scormState.save();
            courseController.course.language.reloading = true;
            location.reload()
        }};
        function buildDialog()
        {
            var s = '<div class="LanguageBoxContainer">',
                arr = courseController.course.language.languageArray;
            for(var i in arr)
                if(i != "shuffle")
                {
                    var selectedStyle = i == courseController.course.language.code ? "LanguageBoxSelected accent" : "LanguageBoxUnselected";
                    s += '<a class="LanguageBox ' + selectedStyle + '" href="#" onclick="LanguageDialogView.changeLanguage(\'' + i + "');return false;\">" + arr[i] + "</a>"
                }
            return s + "</div>"
        }
    }(),
    LoadingDialogView = function()
    {
        var instance = null;
        function PrivateConstructor()
        {
            return $('<div id="loadingDialogView" />').dialog({autoOpen:false,closeOnEscape:false,draggable:false,modal:true,width:"auto",minHeight:"auto",buttons:{},resizable:false,open:function()
            {
                $(".ui-dialog-titlebar-close").hide()
            }})
        }
        return{open:function(title,text)
        {
            if(instance == null)
            {
                instance = new PrivateConstructor;
                instance.constructor = null
            }
            instance.dialog("open");
            instance.dialog("option","title",title);
            instance.text(text)
        },close:function()
        {
            $(".ui-dialog-titlebar-close").show();
            instance && 
                instance.dialog("close")
        }}
    }();
function NavBarView(courseController)
{
    var rootElem = $("<div/>",{"class":"navbar"}),
        nextButtonView = new NextButtonView(courseController),
        previousButtonView = new PreviousButtonView(courseController),
        whatsNextView = new WhatsNextView(courseController);
    rootElem.append('<div id="CaptionsContainer" aria-hidden="true"/>');
    rootElem.append(whatsNextView);
    rootElem.append(previousButtonView);
    rootElem.append(nextButtonView);
    return rootElem
}
function NextButtonView(courseController)
{
    var rootElem = views.utils.createMetroButton("NextMetroButton","");
    rootElem.prop("title",Resources.NavigationBar_NextPage_Button_Title);
    rootElem.click(function()
    {
        !rootElem.hasClass("disabled") && courseController.navigateNext()
    });
    var updateTitle = function(page)
        {
            if(page.Assessment && page.Assessment.hasNextLocation())
                if(page.Assessment.LocationIndex == page.Assessment.QuestionsPresented.length - 1)
                    rootElem.prop("title",Resources.NavigationBar_Assessment_Review_Button_Title);
                else
                    rootElem.prop("title",Resources.NavigationBar_Assessment_NextQuestion_Button_Title);
            else
                if(page.BranchingGraph && page.BranchingGraph.usePlayerNavigation)
                {
                    var currentLocation = page.BranchingGraph.getCurrentLocation();
                    if(currentLocation && (currentLocation.canMoveForward() || !currentLocation.interactionComplete()))
                        rootElem.prop("title",Resources.NavigationBar_Branching_NextStep_Button_Title);
                    else
                        rootElem.prop("title",Resources.NavigationBar_NextPage_Button_Title)
                }
                else
                    rootElem.prop("title",Resources.NavigationBar_NextPage_Button_Title)
        };
    courseController.course.observer.observe("navigatedToPage",function(page)
    {
        if(page.Assessment && page.Assessment.hasNextLocation() || page.navNext)
        {
            rootElem.css("visibility","visible");
            updateTitle(page)
        }
        else
            rootElem.css("visibility","hidden")
    });
    var assessmentStateChangeHandler = function(assessment)
        {
            if(assessment.Page === courseController.course.getCurrentPage())
                if(assessment.hasNextLocation() || assessment.Page.navNext)
                {
                    rootElem.css("visibility","visible");
                    updateTitle(assessment.Page)
                }
                else
                    rootElem.css("visibility","hidden")
        },
        branchingStateChangeHandler = function(branchingGraph)
        {
            if(branchingGraph.usePlayerNavigation && branchingGraph.page === courseController.course.getCurrentPage())
            {
                var currentLocation = branchingGraph.getCurrentLocation();
                if(currentLocation && (currentLocation.canMoveForward() || !currentLocation.interactionComplete()) || branchingGraph.page.navNext)
                {
                    rootElem.css("visibility","visible");
                    updateTitle(branchingGraph.page)
                }
                else
                    rootElem.css("visibility","hidden")
            }
        };
    courseController.course.observer.observe("assessmentLocationChanged",assessmentStateChangeHandler);
    courseController.course.observer.observe("assessmentQuestionScored",assessmentStateChangeHandler);
    courseController.course.observer.observe("branchingLocationChanged",branchingStateChangeHandler);
    courseController.course.observer.observe("branchingStateChanged",branchingStateChangeHandler);
    return rootElem
}
function NotifyUserView(cc)
{
    var notifyUser = function(text)
        {
            var newDiv = $(document.createElement("div"));
            newDiv.attr("id","NotifyDialog");
            var recenterDialog = function()
                {
                    newDiv.dialog("option","position","center")
                };
            newDiv.html(text).dialog({title:Resources.Notify_Title_Text,closeText:Resources.Dialog_Close_Text,dialogClass:"NotifyDialog",modal:true,draggable:false,resizable:false,width:"100%",position:"center",open:function()
            {
                $(window).on("resize",recenterDialog)
            },close:function()
            {
                $(window).off("resize",recenterDialog);
                $(this).dialog("destroy").remove()
            },buttons:[{id:"button-ok",text:Resources.Notify_OK_Text,click:function()
            {
                $(this).dialog("close")
            }}]})
        };
    cc.course.observer.observe("notifyNavigateLinearRequired",function()
    {
        notifyUser(Resources.Navigation_LinearRequired)
    });
    cc.course.observer.observe("notifyNavigateLinearRequiredComplete",function(currentPage)
    {
        if(currentPage.navRestrictionMsg)
            notifyUser(currentPage.navRestrictionMsg);
        else
            notifyUser(Resources.Navigation_LinearRequiredComplete)
    });
    cc.course.observer.observe("notifyNavigateModuleLocked",function(page)
    {
        for(var sModules = page.modulesToComplete,
            aParts = sModules.split(","),
            sB = "",
            i = 0; i < aParts.length; i++)
        {
            var index = aParts[i] - 1;
            if(!page.course.modules[index].pageState.isOptional && page.course.modules[index].pageState.status != "P")
            {
                if(sB != "")
                    sB += ", ";
                sB += page.course.modules[index].name
            }
        }
        notifyUser(Resources.Navigation_CannotEnter + " " + sB)
    });
    cc.course.observer.observe("notifySbaLinear",function()
    {
        notifyUser(Resources.SBA_LinearNavigationRequired_Text)
    });
    cc.course.observer.observe("notifyCheckAnswerFail",function()
    {
        notifyUser(Resources.Assessment_Buttons_CheckAnswerFail_Text)
    });
    cc.course.observer.observe("notifyScoreQuestionRequired",function()
    {
        notifyUser(Resources.Assessment_Notify_ScoreQuestionRequired_Text)
    });
    cc.course.observer.observe("notifyRetryQuestionRequired",function()
    {
        notifyUser(Resources.Assessment_Notify_RetryQuestionRequired_Text)
    });
    cc.course.observer.observe("notifyBranchingContentNotViewed",function()
    {
        notifyUser(Resources.Branching_Notify_ContentNotViewed_Text)
    });
    cc.course.observer.observe("notifyBranchingContentIncomplete",function()
    {
        notifyUser(Resources.Branching_Notify_ContentIncomplete_Text)
    });
    cc.course.observer.observe("notifyBranchingQuestionNotAnswered",function()
    {
        notifyUser(Resources.Branching_Notify_QuestionNotAnswered_Text)
    });
    cc.course.observer.observe("notifyBranchingQuestionMustRetry",function()
    {
        notifyUser(Resources.Branching_Notify_QuestionMustRetry_Text)
    });
    cc.course.observer.observe("notifyBranchingFeedbackContentNotViewed",function()
    {
        notifyUser(Resources.Branching_Notify_FeedbackContentNotViewed_Text)
    });
    cc.course.observer.observe("notifyBranchingFeedbackContentIncomplete",function()
    {
        notifyUser(Resources.Branching_Notify_FeedbackContentIncomplete_Text)
    });
    return{notify:notifyUser}
}
function PreviousButtonView(courseController)
{
    var rootElem = views.utils.createMetroButton("PreviousMetroButton","");
    rootElem.prop("title",Resources.NavigationBar_PreviousPage_Button_Title);
    rootElem.click(function()
    {
        courseController.navigatePrevious()
    });
    var updateTitle = function(page)
        {
            if(page.Assessment && page.Assessment.hasPreviousLocation())
                if(page.Assessment.LocationIndex == 0)
                    rootElem.prop("title",Resources.NavigationBar_Assessment_Introduction_Button_Title);
                else
                    rootElem.prop("title",Resources.NavigationBar_Assessment_PreviousQuestion_Button_Title);
            else
                if(page.BranchingGraph && page.BranchingGraph.usePlayerNavigation && page.BranchingGraph.canMoveBackward())
                    rootElem.prop("title",Resources.NavigationBar_Branching_PreviousStep_Button_Title);
                else
                    rootElem.prop("title",Resources.NavigationBar_PreviousPage_Button_Title)
        };
    courseController.course.observer.observe("navigatedToPage",function(page)
    {
        if(page.Assessment && page.Assessment.hasPreviousLocation() || page.navPrevious)
        {
            rootElem.css("visibility","visible");
            updateTitle(page)
        }
        else
            rootElem.css("visibility","hidden")
    });
    courseController.course.observer.observe("assessmentLocationChanged",function(assessment)
    {
        if(assessment.Page === courseController.course.getCurrentPage())
            if(assessment.hasPreviousLocation() || assessment.Page.navPrevious)
            {
                rootElem.css("visibility","visible");
                updateTitle(assessment.Page)
            }
            else
                rootElem.css("visibility","hidden")
    });
    courseController.course.observer.observe("branchingLocationChanged",function(branchingGraph)
    {
        if(branchingGraph.usePlayerNavigation && branchingGraph.page === courseController.course.getCurrentPage())
            if(branchingGraph.canMoveBackward() || branchingGraph.page.navPrevious)
            {
                rootElem.css("visibility","visible");
                updateTitle(branchingGraph.page)
            }
            else
                rootElem.css("visibility","hidden")
    });
    return rootElem
}
function QuickLinksView(courseController)
{
    var quickLinksContainer = $("#quickLinksContainer"),
        quickLinks = $("#quickLinks"),
        contentsElem = $('<a href="#">' + Resources.AppBar_TableOfContents_Button_Text + "</a>");
    quickLinks.append(contentsElem);
    contentsElem.click(function()
    {
        courseController.showContentsDialog()
    });
    if(courseController.course.testOutPage)
    {
        var testOutElem = $('<a href="#">' + Resources.Testout_AppBar_Button_Text + "</a>");
        quickLinks.append(testOutElem);
        testOutElem.click(function()
        {
            courseController.navigateToTestOut();
            $(this).blur()
        })
    }
    if(courseController.course.settings.hasTracks && courseController.course.tracks.canUserSelect)
    {
        var changeTracksElem = $('<a href="#">' + Resources.AppBar_ChangeTracks_Button_Text + "</a>");
        quickLinks.append(changeTracksElem);
        changeTracksElem.click(function()
        {
            courseController.showTracksDialog()
        })
    }
    if(courseController.isOnline() && courseController.isDownloadable())
    {
        var downloadCourseElem = $('<a href="#">' + Resources.AppBar_Download_Button_Text + "</a>");
        quickLinks.append(downloadCourseElem);
        downloadCourseElem.click(function()
        {
            courseController.downloadCourse(1)
        })
    }
    if(courseController.course.settings.ShowResources)
    {
        var resourcesElem = $('<a href="#">' + Resources.AppBar_Resources_Button_Text + "</a>");
        quickLinks.append(resourcesElem);
        resourcesElem.click(function()
        {
            courseController.showResourcesDialog()
        })
    }
    if(courseController.course.settings.CourseTranscript != "")
    {
        var transcriptElem = $('<a href="#">' + Resources.AppBar_CourseTranscript_Button_Text + "</a>");
        quickLinks.append(transcriptElem);
        transcriptElem.click(function()
        {
            courseController.showCourseTranscript(0)
        })
    }
    if(courseController.course.settings.DiscussionLink != "")
    {
        var discussionLinkElem = $('<a href="#">' + Resources.AppBar_Discussion_Button_Text + "</a>");
        quickLinks.append(discussionLinkElem);
        discussionLinkElem.click(function()
        {
            open(courseController.course.settings.DiscussionLink,"DiscussionLink")
        })
    }
    if(courseController.course.settings.ShowGlossary)
    {
        var glossaryElem = $('<a href="#">' + Resources.AppBar_Glossary_Button_Text + "</a>");
        quickLinks.append(glossaryElem);
        glossaryElem.click(function()
        {
            courseController.showGlossaryDialog()
        })
    }
    if(courseController.course.language.count > 1)
    {
        var langaugesElem = $('<a href="#">' + Resources.AppBar_Languages_Button_Text + "</a>");
        quickLinks.append(langaugesElem);
        langaugesElem.click(function()
        {
            courseController.showLanguageDialog()
        })
    }
    var helpElem = $('<a href="#">' + Resources.AppBar_Help_Button_Text + "</a>");
    quickLinks.append(helpElem);
    helpElem.click(function()
    {
        courseController.showHelpDialog()
    });
    courseController.course.observer.observe("quickLinksButtonClicked",function()
    {
        if(quickLinksContainer.height() === 0)
        {
            showQuickLinks();
            eventType = "mouseclick"
        }
        else
            hideQuickLinks()
    });
    var eventType = "",
        showQuickLinks = function()
        {
            quickLinksContainer.css({width:quickLinks.outerWidth() + "px"}).stop().animate({height:quickLinks.outerHeight() + "px"},300)
        },
        hideQuickLinks = function()
        {
            quickLinksContainer.stop().animate({height:"0px"},300)
        };
    quickLinksContainer.bind("mouseleave",function()
    {
        eventType == "mouseclick" && 
            hideQuickLinks()
    });
    quickLinksContainer.bind("focusin",function()
    {
        showQuickLinks();
        eventType = "focusin"
    });
    quickLinksContainer.bind("focusout",function()
    {
        eventType == "focusin" && 
            hideQuickLinks()
    });
    quickLinksContainer.bind("keydown",function(e)
    {
        if(e.keyCode === 40)
            $(document.activeElement).parent("#quickLinks").length > 0 && 
                $(document.activeElement).next().trigger("focus");
        else
            if(e.keyCode === 38)
                $(document.activeElement).parent("#quickLinks").length > 0 && 
                    $(document.activeElement).prev().trigger("focus")
    });
    return quickLinksContainer
}
var ResourcesDialogView = function()
    {
        var instance = null;
        function PrivateConstructor()
        {
            var newDiv = $(document.createElement("div"));
            newDiv.attr("id","ResourcesDialog");
            var dlg = newDiv.dialog({autoOpen:false,width:1,height:1,title:Resources.ResourcesDialog_Title_Text,closeText:Resources.Dialog_Close_Text,dialogClass:"ResourcesDialog",draggable:false,resizable:false,modal:true,open:function()
                {
                    $("#ResourcesDialog").dialog("option","height",$(window).height() - 40);
                    $("#ResourcesDialog").dialog("option","width",$(window).width() - 40);
                    $("#ResourcesDialog").dialog("option","position","center");
                    newDiv.html(buildDialog());
                    $("#ResourcesDialog").focus();
                    $(function()
                    {
                        $("tr.ResourcesDialogHeader").click(function()
                        {
                            $(this).siblings(".child-" + this.id).toggle();
                            if($(this).hasClass("ResourcesDialogExpanded"))
                                $(this).addClass("ResourcesDialogCollapsed").removeClass("ResourcesDialogExpanded");
                            else
                                $(this).addClass("ResourcesDialogExpanded").removeClass("ResourcesDialogCollapsed")
                        })
                    })
                }});
            return dlg
        }
        return{getInstance:function()
        {
            if(instance == null)
            {
                instance = new PrivateConstructor;
                instance.constructor = null
            }
            return instance
        }};
        function buildDialog()
        {
            for(var s = '<table id="ResourcesDialogTable" class="ResourcesDialogTable">',
                id = "",
                i = 0; i < course.PageLinkArray.length; i++)
            {
                if(courseController.course.PageLinkArray[i].id != id)
                {
                    if(courseController.course.PageLinkArray[i].id == "course")
                        var sIdLabel = Resources.ResourcesDialog_Header_Course;
                    else
                        var sIdLabel = Resources.ResourcesDialog_Header_Page + courseController.getPageNameFromId(courseController.course.PageLinkArray[i].id);
                    s += '<tr class="ResourcesDialogHeader ResourcesDialogExpanded" id="RDrow' + courseController.course.PageLinkArray[i].id + '">';
                    s += '<td class="ResourcesDialogToggle">&nbsp;</td>';
                    s += '<th colspan="2">' + sIdLabel + "</th>";
                    s += "</tr>";
                    id = courseController.course.PageLinkArray[i].id
                }
                if(courseController.course.PageLinkArray[i].type == "URI")
                    var sURL = courseController.course.PageLinkArray[i].source;
                else
                {
                    var sFileName = courseController.course.PageLinkArray[i].source;
                    if(sFileName.substring(0,10) != "Resources/")
                        var sURL = courseController.course.getContentFolderPath() + "Resources/" + sFileName;
                    else
                        var sURL = sFileName
                }
                s += '<tr class="child-RDrow' + courseController.course.PageLinkArray[i].id + '">';
                s += "<td>&nbsp;</td>";
                s += '<td><a href="' + sURL + '" target="_blank" class="ResourcesDialogLink accent_text">' + courseController.course.PageLinkArray[i].name + "</a>";
                s += '<div class="ResourcesDialogDescription">' + courseController.course.PageLinkArray[i].description + "</div>";
                s += "</td></tr>"
            }
            s += "</table>";
            return s
        }
    }();
function SplitterView(collapsed)
{
    var splitter = $("<div />",{"class":"Splitter accent"});
    splitter.collapsed = collapsed;
    if(splitter.collapsed)
        splitter.addClass("SplitterCollapsed");
    else
        splitter.addClass("SplitterExpanded");
    splitter.click(function()
    {
        if(!splitter.collapsed)
        {
            splitter.collapsed = true;
            splitter.removeClass("SplitterExpanded").addClass("SplitterCollapsed")
        }
        else
        {
            splitter.collapsed = false;
            splitter.removeClass("SplitterCollapsed").addClass("SplitterExpanded")
        }
    });
    return splitter
}
var TracksDialogView = function()
    {
        var instance = null;
        function PrivateConstructor()
        {
            var newDiv = $(document.createElement("div")).attr("id","TracksDialog"),
                dlg = newDiv.dialog({autoOpen:false,width:1,height:1,title:Resources.TracksDialog_Title_Text,open:function()
                {
                    $("#TracksDialog").dialog("option","height",$(window).height() - 50);
                    $("#TracksDialog").dialog("option","width",$(window).width() - 50);
                    $("#TracksDialog").dialog("option","position","center");
                    newDiv.html(buildDialog());
                    updateWarningMessage();
                    newDiv.attr("role","alertdialog");
                    newDiv.attr("aria-live","assertive")
                },closeText:Resources.Dialog_Close_Text,dialogClass:"TracksDialog",draggable:false,resizable:false,modal:true,buttons:[{id:"button-ok",text:Resources.TracksDialog_SelectAndContinue_Button_Text,click:function()
                {
                    updateTracksSelection();
                    $(this).dialog("close")
                }}]});
            return dlg
        }
        function updateWarningMessage()
        {
            var nCount = 0;
            $("input[class=tracksCheckbox]").each(function()
            {
                if(this.checked)
                    nCount++
            });
            if(nCount < course.tracks.trackSelectionMin && course.tracks.trackSelectionMin != 0)
            {
                var msg = Resources.TracksDialog_EnforceSelectionMinimum.replace("%%minTracks%%",course.tracks.trackSelectionMin);
                $("#button-ok").button("disable")
            }
            else
                if(nCount > course.tracks.trackSelectionMax && course.tracks.trackSelectionMax != 0)
                {
                    var msg = Resources.TracksDialog_EnforceSelectionMaximum.replace("%%maxTracks%%",course.tracks.trackSelectionMax);
                    $("#button-ok").button("disable")
                }
                else
                    if(course.tracks.trackSelectionMin != nCount && course.tracks.trackSelectionMin != 0 && course.tracks.trackSelectionMax != 0)
                    {
                        var msg = Resources.TracksDialog_EnforceSelectionRange;
                        msg = msg.replace("%%minTracks%%",course.tracks.trackSelectionMin);
                        msg = msg.replace("%%maxTracks%%",course.tracks.trackSelectionMax);
                        $("#button-ok").button("enable")
                    }
                    else
                    {
                        var msg = "";
                        $("#button-ok").button("enable")
                    }
            $("#tracksDialogWarning").html(msg)
        }
        function buildDialog()
        {
            var s = '<div class="tracksBoxContainer"><div class="dialogInstructions">' + Resources.TracksDialog_HeaderInfo_Text + "</div>";
            s += "";
            for(var i = 0; i < course.tracks.items.length; i++)
            {
                var checkedVal = course.tracks.items[i].state.isSelected ? 'checked = "checked"' : "",
                    requiredVal = course.tracks.items[i].required ? 'disabled = "disabled"' : "",
                    checkedStyle = course.tracks.items[i].state.isSelected ? "tracksBoxSelected accent" : "tracksBoxUnselected";
                s += '<div class="tracksBox ' + checkedStyle + '" id="tracksBox' + i + '" onclick="TracksDialogView.selectionChange(' + i + ')">';
                s += '<label class="tracksDialogTrackName">';
                s += '<input class="tracksCheckbox" name="tracksCheckbox' + i + '" type="checkbox" id="tracksCheckbox' + i + '" ' + checkedVal + " " + requiredVal + ">";
                s += course.tracks.items[i].name + "</label>";
                s += '<div class="tracksDialogTrackDescription">' + course.tracks.items[i].description + "</div></div>"
            }
            s += "</div>";
            s += '<div id="tracksDialogWarning"></div>';
            return s
        }
        function updateTracksSelection()
        {
            var nIndex = 0;
            $("input[class=tracksCheckbox]").each(function()
            {
                course.tracks.items[nIndex].state.isSelected = this.checked;
                nIndex++
            });
            for(var sB = "",
                i = 0; i < course.tracks.items.length; i++)
                if(course.tracks.items[i].state.isSelected)
                {
                    if(sB != "")
                        sB += ",";
                    sB += i + 1
                }
            course.scormState.setState("TRACKS",sB);
            course.loadPageNavigation();
            course.updateForAssessments();
            if(!course.navigationStarted)
            {
                course.navigationStarted = true;
                courseController.navigateToStartupPage()
            }
        }
        return{getInstance:function()
        {
            if(instance == null)
            {
                instance = new PrivateConstructor;
                instance.constructor = null
            }
            return instance
        },selectionChange:function(index)
        {
            if(course.tracks.items[index].required)
            {
                courseController.alert(Resources.TracksDialog_RequiredWarning_Text);
                return
            }
            if($("#tracksBox" + index).hasClass("tracksBoxSelected"))
            {
                $("#tracksBox" + index).removeClass("tracksBoxSelected").addClass("tracksBoxUnselected");
                document.getElementById("tracksCheckbox" + index).checked = false
            }
            else
            {
                $("#tracksBox" + index).removeClass("tracksBoxUnselected").addClass("tracksBoxSelected");
                document.getElementById("tracksCheckbox" + index).checked = true
            }
            updateWarningMessage()
        }}
    }();
function TranscriptPopupView()
{
    var tpv = this;
    tpv.callback = null;
    tpv.htmTranscriptFilePath = "";
    tpv.newDiv = $(document.createElement("div"));
    tpv.newDiv.attr("id","TranscriptPopupDialog");
    tpv.iframe = $(document.createElement("iframe"));
    tpv.iframe.css("height","100%");
    tpv.iframe.css("width","100%");
    tpv.iframe.one("load",function()
    {
        tpv.iframe.loaded = true;
        $("html",document).hasClass("light_theme") && 
            $("html",this.contentDocument).addClass("light_theme");
        var $head = tpv.iframe.contents().find("head");
        $head.append($("<link/>",{rel:"stylesheet",href:"Player/css/pagestyles.css",type:"text/css"}));
        if(!tpv.htmTranscriptFilePath)
        {
            if(!tpv.captions)
                tpv.captions = Resources.NoTranscript_Text;
            tpv.iframe.contents().find("body").html(tpv.captions)
        }
    });
    tpv.newDiv.append(tpv.iframe);
    tpv.newDiv.dialog({autoOpen:false,width:400,height:720,position:"right",title:"",open:function()
    {
    },modal:false,close:function()
    {
        if(tpv.callback != null)
            try
            {
                tpv.callback()
            }
            catch(e)
            {
            }
    },closeText:Resources.Dialog_Close_Text,dialogClass:"TranscriptPopupDialog",draggable:true,resizable:true});
    $(window).bind("resize",function()
    {
        $("#TranscriptPopupDialog").dialog("option","height",$(window).height() - 80)
    }).trigger("resize");
    return{show:function(captionsFile,isHtmTranscript,callback)
    {
        tpv.captions = "";
        tpv.htmTranscriptFilePath = isHtmTranscript ? captionsFile : "";
        if(tpv.htmTranscriptFilePath)
            tpv.iframe.attr("src",tpv.htmTranscriptFilePath);
        else
            $.ajax({type:"GET",url:captionsFile,dataType:"XML",complete:function()
            {
                if(tpv.iframe.loaded)
                {
                    if(!tpv.captions)
                        tpv.captions = Resources.NoTranscript_Text;
                    tpv.iframe.contents().find("body").html(tpv.captions)
                }
            },success:function(captionsXml)
            {
                var subtitleArea = $(captionsXml).find("div[region='subtitleArea']").children("p").each(function()
                    {
                        tpv.captions += "<p>" + $(this).text() + "</p>"
                    })
            }});
        tpv.callback = callback;
        tpv.newDiv.dialog("open")
    },hide:function()
    {
        tpv.newDiv.dialog("close")
    }}
}
function WhatsNextView(courseController)
{
    var rootElem = $("<div />",{"class":"whatsNext"});
    courseController.course.observer.observe("navigatedToPage",function()
    {
        var nextPage = courseController.course.getNextRequiredPage();
        if(nextPage && nextPage.name)
            rootElem.text(Resources.NavigationBar_WhatsNext_Text.replace(/%%pageName%%/g,nextPage.name.toUpperCase()));
        else
            rootElem.text("")
    });
    return rootElem
}
var AssessmentFeedbackDialogView = function()
    {
        var instance = null,
            question = null,
            assessment = null,
            assessmentView = null,
            newDiv = null;
        function PrivateConstructor()
        {
            newDiv = $(document.createElement("div"));
            newDiv.attr("id","AssessmentFeedbackDialog");
            newDiv.audioController = new AudioController(assessmentView.CourseController,"FeedbackPopupAudio");
            newDiv.audioPlayerView = new AudioPlayerView(assessmentView.CourseController,"FeedbackPopupAudio");
            newDiv.dialog({autoOpen:false,resizable:false,height:1,width:1,title:"",closeText:Resources.Dialog_Close_Text,dialogClass:"AssessmentFeedbackDialog",draggable:false,resizable:false,modal:true,close:function()
            {
                newDiv.audioController.hideAndStop()
            },open:function()
            {
                views.utils.sizeDialog($("#AssessmentFeedbackDialog"));
                buildDialog(newDiv)
            },close:function()
            {
                newDiv.empty()
            }});
            return newDiv
        }
        function buildDialog(parent)
        {
            parent.append(parent.audioPlayerView);
            var feedbackView = new AssessmentFeedbackView(assessmentView,parent.audioController);
            parent.append(feedbackView);
            feedbackView.showFeedback(question,assessment,true)
        }
        return{open:function(questionModel,assessmentModel,assessmentV)
        {
            question = questionModel;
            assessment = assessmentModel;
            assessmentView = assessmentV;
            if(instance == null)
            {
                instance = new PrivateConstructor;
                instance.constructor = null
            }
            instance.dialog("open")
        },close:function()
        {
            instance && 
                instance.dialog("close")
        },getAudioController:function()
        {
            return newDiv ? newDiv.audioController : null
        }}
    }();
function AssessmentFeedbackView(assessmentView,audioController)
{
    var q = null,
        rootElem = $('<div id="FeedbackView"/>'),
        boxElem = $('<div id="FeedbackViewBox"/>').appendTo(rootElem),
        headerElem = $('<div class="FeedbackViewTitle"/>').appendTo(boxElem),
        feedbackElem = $('<div id="FeedbackViewContent"/>').appendTo(boxElem),
        scrollElem = $('<div id="FeedbackViewContentScroll"/>').appendTo(feedbackElem),
        feedbackTextElem = $('<div id="FeedbackViewText" />').appendTo(scrollElem),
        bottomMask = $('<div class="scroll-padding-bottom-mask"><div></div></div>').appendTo(feedbackElem),
        buttonsElem = $('<div id="FeedbackViewButtons"></div>').appendTo(feedbackElem),
        attemptsElem = $('<span class="FeedbackViewAttemptCount"></span>').appendTo(buttonsElem),
        detailedFeedbackBtn = views.utils.createButton("QDetailedFeedbackButton",Resources.Assessment_Buttons_DetailedFeedback_Text).addClass("hoveraccent2").click(function()
        {
            var feedbackPageId = q.getFeedback().PageId;
            if(feedbackPageId)
            {
                var feedbackPage = assessmentView.CourseController.getPageFromId(feedbackPageId);
                if(feedbackPage)
                {
                    audioController.stop();
                    $("#AssessmentFeedbackDialog").dialog("isOpen") && 
                        $("#AssessmentFeedbackDialog").dialog("close");
                    !($("#ContentsPopupDialog").dialog("isOpen") == true) && 
                        assessmentView.CourseController.showContentPopup(feedbackPage,null)
                }
            }
        }).appendTo(buttonsElem);
    rootElem.showFeedback = function(question,assessment,playAudio)
    {
        q = question;
        if(question.isCorrect())
        {
            headerElem.removeClass("FeedbackTitleIncorrect").addClass("FeedbackTitleCorrect").html(Resources.Assessment_Feedback_Correct);
            attemptsElem.text("")
        }
        else
        {
            headerElem.removeClass("FeedbackTitleCorrect").addClass("FeedbackTitleIncorrect").html(Resources.Assessment_Feedback_Incorrect_Finished);
            attemptsElem.text("Attempt " + q.AnswerCount + "/" + q.AssessmentObj.Assessment.AttemptsToAnswer)
        }
        feedbackTextElem.html(question.getFeedback().Text);
        var feedbackPageId = question.getFeedback().PageId;
        if(feedbackPageId)
            detailedFeedbackBtn.show();
        else
            detailedFeedbackBtn.hide();
        audioController.hideAndStop();
        if(playAudio)
        {
            var audioFile = question.getFeedbackAudioFilePath();
            audioFile && 
                audioController.readyToPlay(audioFile,assessment.Course.volume,null,null)
        }
    };
    rootElem.ContentArea = feedbackElem;
    return rootElem
}
function AssessmentIntroView(assessmentView,audioController)
{
    var ac = audioController,
        rootElem = $('<div id="IntroView"/>'),
        backgroundElem = $('<div id="IntroViewBackground" class="AssessmentBackground"/>').appendTo(rootElem),
        foregroundElem = $('<div id="IntroViewForeground" class="AssessmentForeground"/>').appendTo(rootElem),
        contentElem = $('<div id="IntroViewContent" class="AssessmentContent"/>').appendTo(foregroundElem),
        introIframeElem = $('<iframe id="IntroViewIframe" class="AssessmentIframe" src=""></iframe>');
    rootElem.append(introIframeElem);
    var statusTileElem = $('<div id="AssessmentStatusTileContainer"/>'),
        statusTile = $('<div class="AssessmentStatusTile"/>'),
        statusFooter = $('<div class="tile_footer">' + Resources.Assessment_Status_Tile_Footer_Text + "</div>"),
        statusCompleteCount = $('<div class="QuestionsCompleteCount"/>');
    statusTile.html('<div class="QuestionsCompleteWord">' + Resources.Assessment_Status_Tile_QuestionsComplete_Text + "</div>");
    statusTile.prepend(statusCompleteCount);
    statusTile.prepend(statusFooter);
    statusTileElem.append(statusTile).appendTo(foregroundElem);
    var buttonContainerElem = $('<div class="AssessmentActionButtonContainer"/>'),
        beginButton = views.utils.createButton("IntroBeginButton",Resources.Assessment_Introduction_BeginButton_Text);
    beginButton.attr("title",Resources.Assessment_Introduction_BeginButton_Text);
    beginButton.addClass("accent");
    beginButton.addClass("accent_border");
    buttonContainerElem.append(beginButton);
    rootElem.append($('<div id="AssessmentIntroductionInstructions"/>'));
    rootElem.append($('<div id="AssessmentIntroductionTitle"/>'));
    rootElem.append(buttonContainerElem);
    beginButton.click(function()
    {
        introIframeElem.removeClass("fullscreen").attr("src","");
        assessmentView.Observer.fire("nextLocationClicked")
    });
    rootElem.showIntro = function(assessment)
    {
        rootElem.assessment = assessment;
        if(assessment.FeedbackType == "Delayed")
            statusCompleteCount.html(assessment.countAnsweredQuestions() + "/" + assessment.countQuestions());
        else
            statusCompleteCount.html(assessment.countQuestions() - assessment.countUnscoredQuestions() + "/" + assessment.countQuestions());
        rootElem.find("#AssessmentIntroductionTitle").html(assessment.Page.name);
        rootElem.find("#AssessmentIntroductionTitle").addClass("page_title accent_text");
        if(assessment.QuestionsPresented.length > 0)
        {
            rootElem.find("#AssessmentIntroductionInstructions").html(assessment.IntroductionText);
            buttonContainerElem.show()
        }
        else
        {
            rootElem.find("#AssessmentIntroductionInstructions").html(Resources.Assessment_Intro_Test_None_Text);
            buttonContainerElem.hide()
        }
        backgroundElem.empty();
        contentElem.empty();
        if(assessment.Page.privatePages.length > 0)
        {
            rootElem.addClass("IntroView-CustomContent");
            var pageDisplayed = assessment.Page.privatePages[0];
            introIframeElem.off("load").on("load",function()
            {
                introIframeElem.off("load");
                if(introIframeElem.attr("src") == "")
                    return;
                $("html",document).hasClass("light_theme") && 
                    $("html",introIframeElem.get(0).contentDocument).addClass("light_theme");
                if(pageDisplayed.pageType.PlaybackSource == "Video")
                {
                    vid = new VideoController(introIframeElem[0].contentWindow,courseController);
                    vid.page = pageDisplayed;
                    vid.videoFile = pageDisplayed.hasVideo() ? pageDisplayed.videoFiles[0] : new MediaFile(courseController.course,"");
                    vid.volume = courseController.course.volume;
                    vid.keyPointsFilePath = pageDisplayed.getKeyPointsPath(vid.videoFile.FileName);
                    !vid.videoFile.mustPlayAll && 
                        pageDisplayed.setComplete();
                    vid.readyToPlay()
                }
            });
            if(pageDisplayed.pageType.PlaybackSource == "Video")
                introIframeElem.attr("src","VideoPage.htm");
            else
                introIframeElem.attr("src",pageDisplayed.getFilePath())
        }
        else
        {
            rootElem.removeClass("IntroView-CustomContent");
            introIframeElem.off("load").on("load",function()
            {
                introIframeElem.off("load");
                if(introIframeElem.attr("src") == "")
                    return;
                introIframeElem.get(0).contentWindow.setAssessment && introIframeElem.get(0).contentWindow.setAssessment(assessment);
                $("html",introIframeElem.get(0).contentDocument).find("script").remove();
                backgroundElem.append($(".AssessmentBackground > img:first",introIframeElem.get(0).contentDocument));
                contentElem.append($(".AssessmentContent",introIframeElem.get(0).contentDocument).children())
            });
            introIframeElem.attr("src",assessment.Page.getFilePath())
        }
        ac.hideAndStop();
        var playOnPageDisplayAudio = assessment.Page.getPlayOnPageDisplayAudio();
        playOnPageDisplayAudio && 
            ac.readyToPlay(playOnPageDisplayAudio,assessment.Course.volume,null,null);
        rootElem.show()
    };
    return rootElem
}
function AssessmentNavBarView(assessmentView)
{
    var navBar = $('<div id="AssessmentNavBar"></div>'),
        unorederedList = $('<ul id="AssessmentNavBarList"></ul>').append('<li><a href="#" id="AssNavBarIntroLink">' + Resources.Assessment_Buttons_Instructions_Text + "</a></li>").append('<li><a href="#" id="AssNavBarQuestionsLink">' + Resources.Assessment_Buttons_Questions_Text + "</a></li>").append('<li><a href="#" id="AssNavBarReviewLink">' + Resources.Assessment_Buttons_Review_Text + "</a></li>").append('<li><a href="#" id="AssNavBarViewReportLink">' + Resources.Assessment_Buttons_FeedbackReport_Text + "</a></li>");
    $("li > a",unorederedList).on("click",function(event)
    {
        event.preventDefault();
        this.id !== "AssNavBarViewReportLink" && activateLink(this);
        switch(this.id)
        {
            case"AssNavBarIntroLink":
                assessmentView.Observer.fire("introLocationClicked");
                break;
            case"AssNavBarQuestionsLink":
                assessmentView.Observer.fire("questionsLocationClicked");
                break;
            case"AssNavBarReviewLink":
                assessmentView.Observer.fire("reviewLocationClicked");
                break;
            case"AssNavBarViewReportLink":
                assessmentView.Observer.fire("resultsReportClicked")
        }
        return false
    });
    navBar.append(unorederedList);
    var activateLink = function(link)
        {
            unorederedList.find(".active").removeClass("active");
            $(link).addClass("active")
        };
    navBar.checkIntro = function()
    {
        activateLink(navBar.find("#AssNavBarIntroLink"))
    };
    navBar.checkQuestions = function()
    {
        activateLink(navBar.find("#AssNavBarQuestionsLink"))
    };
    navBar.checkReview = function()
    {
        activateLink(navBar.find("#AssNavBarReviewLink"))
    };
    navBar.hideQuestionsLink = function()
    {
        navBar.find("#AssNavBarQuestionsLink").hide()
    };
    navBar.showQuestionsLink = function()
    {
        navBar.find("#AssNavBarQuestionsLink").show()
    };
    navBar.hideReportLink = function()
    {
        navBar.find("#AssNavBarViewReportLink").hide()
    };
    navBar.showReportLink = function()
    {
        navBar.find("#AssNavBarViewReportLink").show()
    };
    return navBar
}
function AssessmentQuestionView(assessmentView,audioController)
{
    var question = null,
        assessment = null,
        ac = audioController,
        questionViewElem = $('<div id="AssessmentQuestionView"></div>'),
        questionView = $('<div id="QuestionView"></div>'),
        questionViewBox = $('<div id="QuestionViewBox"></div>').appendTo(questionView),
        navBarTitle = $('<div class="QuestionNavBarTitle"></div>');
    questionViewBox.append(navBarTitle);
    var questionContentElem = $('<div id="QuestionContent"></div>');
    questionViewBox.append(questionContentElem);
    var questionContentScrollElem = $('<div id="QuestionContentScroll"></div>');
    questionContentElem.append(questionContentScrollElem);
    var bottomMask = $('<div class="scroll-padding-bottom-mask"><div></div></div>').appendTo(questionContentElem),
        promptTextElem = $('<div id="QuestionViewPrompt" />').appendTo(questionContentScrollElem),
        choicesContainer = $('<div id="QuestionViewChoices"/>').appendTo(questionContentScrollElem),
        buttonsElem = $('<div id="QuestionViewButtons"></div>'),
        checkAnswerBtn = views.utils.createButton("QCheckAnswerButton",Resources.Assessment_Buttons_CheckAnswer_Text).addClass("accent2").addClass("accent2_border").click(function()
        {
            if(question.Answer == "")
                courseController.course.observer.fire("notifyCheckAnswerFail",null);
            else
            {
                assessmentView.Observer.fire("checkAnswerClicked",assessment);
                showFeedback(question,true);
                setViewState(question);
                assessment.FeedbackType === "Immediate" && questionViewElem.updateNavButtons(assessment)
            }
        }).appendTo(buttonsElem),
        retryBtn = views.utils.createButton("QRetryButton",Resources.Assessment_Buttons_Retry_Text).addClass("accent2").addClass("accent2_border").click(function()
        {
            assessmentView.Observer.fire("retryQuestionClicked");
            hideFeedback(question);
            setViewState(question)
        }).appendTo(buttonsElem);
    questionViewBox.append(buttonsElem);
    var navBarView = new QuestionNavBarView(assessmentView);
    questionViewBox.append(navBarView);
    var feedbackView = new AssessmentFeedbackView(assessmentView,audioController),
        scenarioView = new AssessmentScenarioView(assessmentView);
    questionViewElem.append(scenarioView,questionView);
    assessmentView.Observer.observe("audioEnded",function(q)
    {
        if(q.AssessmentObj.Assessment.Location == AssessmentLocation.Question && q == question && !q.Objective.ScenarioAudioPlayed)
            if(q.Scored)
            {
                var audioFile = q.getFeedbackAudioFilePath();
                audioFile && 
                    ac.readyToPlay(audioFile,q.AssessmentObj.Assessment.Course.volume,null,null)
            }
            else
                q.Prompt.AudioFile && 
                    ac.readyToPlay(q.getPromptAudioFilePath(),q.AssessmentObj.Assessment.Course.volume,null,null);
        q.Objective.ScenarioAudioPlayed = true
    });
    var setViewState = function(question)
        {
            if(question.Scored)
                questionViewElem.addClass("QuestionView-Scored");
            else
                questionViewElem.removeClass("QuestionView-Scored");
            if(question.isBlocked())
                questionViewElem.addClass("QuestionView-Blocked");
            else
                questionViewElem.removeClass("QuestionView-Blocked");
            if(question.Scored && !question.isBlocked())
            {
                $("#QuestionViewChoices :input").attr("disabled",true);
                checkAnswerBtn.button("disable");
                retryBtn.button("enable")
            }
            else
                if(question.isBlocked())
                {
                    $("#QuestionViewChoices :input").attr("disabled",true);
                    checkAnswerBtn.button("disable");
                    retryBtn.button("disable")
                }
                else
                {
                    $("#QuestionViewChoices :input").removeAttr("disabled");
                    checkAnswerBtn.button("enable");
                    retryBtn.button("disable")
                }
            if(question.showCorrectAnswer())
                for(var i = 0; i < question.ChoicesOrder.length; i++)
                    question.ChoicesOrder[i].Correct && 
                        choicesContainer.find('input[value="' + (i + 1) + '"]').parent().addClass("accent_text")
        },
        showFeedback = function(question,animate)
        {
            questionViewElem.append(feedbackView);
            questionViewElem.addClass("QuestionView-ShowFeedback");
            if(animate && question.FeedbackStyle == "modal")
            {
                ac.hideAndStop();
                feedbackView.showFeedback(question,assessment,false);
                AssessmentFeedbackDialogView.open(question,assessment,assessmentView)
            }
            else
                feedbackView.showFeedback(question,assessment,question.Objective.ScenarioAudioPlayed)
        },
        hideFeedback = function()
        {
            feedbackView.remove();
            questionViewElem.removeClass("QuestionView-ShowFeedback")
        },
        showScenario = function(question,assessment)
        {
            ac.hideAndStop();
            if(question.Objective.Scenario.AudioFile)
                !question.Objective.ScenarioAudioPlayed && 
                    ac.readyToPlay(question.getScenarioAudioFilePath(),assessment.Course.volume,assessmentView.Observer,question);
            else
                question.Objective.ScenarioAudioPlayed = true;
            if(question.Objective.hasScenario())
                questionViewElem.addClass("QuestionView-HasScenario");
            else
                questionViewElem.removeClass("QuestionView-HasScenario");
            scenarioView.updateScenario(question.Objective.Scenario,assessment)
        };
    questionViewElem.updateNavButtons = function(assessment)
    {
        navBarView.updateNavButtons(assessment)
    };
    questionViewElem.showQuestionView = function(assessmentModel)
    {
        questionViewElem.show();
        choicesContainer.empty();
        promptTextElem.empty();
        assessment = assessmentModel;
        assessment.ViewState.checkAnswerButtonVisible() ? questionViewElem.removeClass("QuestionView-DelayedFeedback") : questionViewElem.addClass("QuestionView-DelayedFeedback");
        if(assessment.ViewState.navButtonsVisible())
            questionView.removeClass("nav-off");
        else
            questionView.addClass("nav-off");
        question = assessment.getCurrentQuestion();
        if(question)
        {
            var questionHeaderText = Resources.Assessment_Question_Title_Text.replace(/%%index%%/g,assessment.LocationIndex + 1);
            questionHeaderText = questionHeaderText.replace(/%%total%%/g,assessment.countQuestions());
            navBarTitle.html(questionHeaderText);
            promptTextElem.html(question.Prompt.Text);
            if(question.Prompt.Image)
            {
                var sFile = assessment.Course.getImagesFolderPath() + question.Prompt.Image;
                choicesContainer.append('<img class="QuestionViewImage" src="' + sFile + '" alt="' + question.Prompt.ImageAltText + '"/>')
            }
            for(var aLetter = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"],
                answersArray = question.getAnswersArray(),
                i = 0; i < question.ChoicesOrder.length; i++)
            {
                var choice = question.ChoicesOrder[i],
                    attrs = $.inArray(i + 1 + "",answersArray) != -1 ? "checked" : "unchecked";
                switch(question.Type)
                {
                    case"choice":
                    case"true-false":
                        choicesContainer.append('<label style="display:block"><input type="radio" name="questionChoice"' + attrs + ' value="' + (i + 1) + '"/><span>' + aLetter[i] + ". " + choice.Text + "</span></label>");
                        break;
                    case"choice-multiple":
                        choicesContainer.append('<label style="display:block"><input type="checkbox" name="questionChoice"' + attrs + ' value="' + (i + 1) + '"/><span>' + aLetter[i] + ". " + choice.Text + "</span></label>")
                }
            }
            showScenario(question,assessment);
            if(question.Scored)
                showFeedback(question,false);
            else
            {
                questionViewElem.removeClass("QuestionView-ShowFeedback");
                question.Prompt.AudioFile && question.Objective.ScenarioAudioPlayed && 
                    ac.readyToPlay(question.getPromptAudioFilePath(),assessment.Course.volume,null,null)
            }
            setViewState(question);
            question.startLatencyTimer()
        }
        else
            questionViewElem.removeClass("QuestionView-HasScenario").removeClass("QuestionView-ShowFeedback")
    };
    $('input[name="questionChoice"]').live("change",function()
    {
        if(question && question == assessment.getCurrentQuestion())
            question.Answer = views.utils.getCheckedItems(choicesContainer,"questionChoice","~")
    });
    return questionViewElem
}
function AssessmentResultsView(assessmentView,assessment,audioController)
{
    var ac = audioController,
        rootElem = $('<div id="ResultsView"/>'),
        backgroundElem = $('<div id="ResultsViewBackground" class="AssessmentBackground"/>').appendTo(rootElem),
        foregroundElem = $('<div id="ResultsViewForeground" class="AssessmentForeground"/>').appendTo(rootElem),
        contentElem = $('<div id="ResultsViewContent" class="AssessmentContent"/>').appendTo(foregroundElem),
        resultsIframeElem = $('<iframe id="ResultsViewIframe" class="AssessmentIframe" src=""></iframe>');
    resultsIframeElem.attr("title",Resources.Assessment_Results_IframeTitle_Text);
    rootElem.append(resultsIframeElem);
    var statusLeftContainerElem = $('<div id="ResultsLeftContainer" class="ResultsLeftContainer"/>');
    if(assessment.Course.settings.ReviewMode)
    {
        var assessmentReviewView = new AssessmentReviewView(assessmentView);
        statusLeftContainerElem.append(assessmentReviewView)
    }
    var statusTileElem = $('<div id="ResultsViewStatusTile" class="ResultsViewStatusTile"/>'),
        statusCompleteCount = $('<div class="QuestionsCompleteCount"/>'),
        statusCompleteWord = $('<div class="QuestionsCompleteWord"/>'),
        scoreElem = $('<div class="ResultsViewScore"/>'),
        statusFooter = $('<div class="tile_footer"/>'),
        line1Elem = $('<div id="ResultsViewLine1" class="ResultsViewLine1"/>'),
        line2Elem = $('<div id="ResultsViewLine2" class="ResultsViewLine2"/>'),
        line3Elem = $('<div id="ResultsViewLine3" class="ResultsViewLine3"/>'),
        actionElem = $('<a id="ResultsAction" class="ResultsAction"/>');
    actionElem.click(function()
    {
        assessmentView.Observer.fire("resultsTileClicked")
    });
    statusTileElem.append(statusFooter,line1Elem,line2Elem,line3Elem,statusCompleteCount,statusCompleteWord,scoreElem,actionElem).appendTo(statusLeftContainerElem);
    var questionMenuContainerElem = $('<div id="QuestionMenuContainer" class="QuestionMenuContainer"/>');
    statusLeftContainerElem.append(questionMenuContainerElem);
    var resultsViewReportElem = $('<a id="ResultsViewReportTile" class="ResultsViewReportTile" href="#"/>');
    resultsViewReportElem.append('<div class="ResultsViewReportLine1">' + Resources.Assessment_Results_ShowReport1_Text + "</div>");
    resultsViewReportElem.append('<div class="ResultsViewReportLine2 tile_footer">' + Resources.Assessment_Results_ShowReport2_Text + "</div>");
    resultsViewReportElem.click(function()
    {
        assessmentView.Observer.fire("resultsReportClicked")
    });
    statusLeftContainerElem.append(resultsViewReportElem);
    foregroundElem.prepend(statusLeftContainerElem);
    var resultsRightContainerElem = $('<div id="ResultsRightContainer" class="ResultsRightContainer"/>'),
        reviewContainerElem = $('<div id="ReviewContainer" class="ReviewContainer"/>'),
        reviewTileElem = $('<div id="ReviewTile" class="ReviewTile"/>'),
        reviewTitleElem = $('<div id="ReviewTileTitle"/>'),
        reviewContentElem = $('<div id="ReviewTileContent"/>'),
        reviewContentScrollElem = $('<div id="ReviewTileContentScroll"/>'),
        reviewPromptElem = $('<div id="ReviewPrompt" class="ReviewPrompt"/>'),
        reviewChoicesContainerElem = $('<div id="ReviewChoicesContainer" class="ReviewChoicesContainer"/>'),
        feedbackContainerElem = $('<div id="ReviewFeedbackContainer"/>'),
        feedbackTileElem = $('<div id="ReviewFeedbackTile"/>'),
        feedbackTitleElem = $('<div id="ReviewFeedbackTileTitle"/>'),
        feedbackContentElem = $('<div id="ReviewFeedbackTileContent"/>'),
        feedbackContentScrollElem = $('<div id="ReviewFeedbackTileContentScroll"/>'),
        reviewCorrectElem = $('<div id="ReviewCorrect" class="ReviewCorrect"/>'),
        reviewFeedbackElem = $('<div id="ReviewFeedback" class="ReviewFeedback"/>'),
        feedbackButtonsElem = $('<div id="ReviewFeedbackTileButtons"></div>');
    reviewContentScrollElem.append(reviewPromptElem,reviewChoicesContainerElem);
    reviewContentElem.append(reviewContentScrollElem).append($('<div class="scroll-padding-bottom-mask"><div></div></div>'));
    reviewTileElem.append(reviewTitleElem,reviewContentElem);
    reviewContainerElem.append(reviewTileElem);
    feedbackContentScrollElem.append(reviewCorrectElem,reviewFeedbackElem);
    feedbackContentElem.append(feedbackContentScrollElem,feedbackButtonsElem).append($('<div class="scroll-padding-bottom-mask"><div></div></div>'));
    feedbackTileElem.append(feedbackTitleElem,feedbackContentElem);
    feedbackContainerElem.append(feedbackTileElem);
    resultsRightContainerElem.append(reviewContainerElem,feedbackContainerElem);
    rootElem.append(resultsRightContainerElem);
    var actionButtonContainerElem = $('<div class="AssessmentActionButtonContainer"/>'),
        actionButton = views.utils.createButton("ResultsActionButton","").addClass("accent").addClass("accent_border");
    actionButtonContainerElem.append(actionButton);
    rootElem.append(actionButtonContainerElem);
    actionButton.click(function()
    {
        assessmentView.Observer.fire("resultsTileClicked")
    });
    rootElem.showReport = function(assessment)
    {
        var s = "<!doctype html>";
        s += '<html class="no-js' + ($("html",document).hasClass("light_theme") ? " light_theme" : "") + '" lang="en">';
        s += "<head>";
        s += '<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />';
        s += '<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">';
        s += "<title>" + Resources.Assessment_Results_ShowReport2_Text + "</title>";
        s += '<meta name="viewport" content="width=device-width,initial-scale=1">';
        s += '<link type="text/css" href="Player/css/jquery-ui-1.8.17.custom.css" rel="stylesheet" />';
        s += '<link type="text/css" href="Player/css/playerstyles.css" rel="stylesheet" />';
        s += '<link type="text/css" href="Custom/css/playerstyles.css" rel="stylesheet" />';
        if(assessment.Course.settings.HighContrastModeActive)
        {
            s += '<link type="text/css" href="Player/css/highcontrast.css" rel="stylesheet" />';
            s += '<link type="text/css" href="Custom/css/highcontrast.css" rel="stylesheet" />'
        }
        s += "<style>html, body {overflow:auto;}</style>";
        s += "</head>";
        s += "<body>";
        s += '<div class="ReviewReportContainer">';
        s += '<a class="menuButton" href="javascript:self.close()">' + Resources.Dialog_Close_Text + "</a>";
        s += '<div class="ReviewReportCourseName">' + assessment.Course.name + "</div>";
        s += '<div class="ReviewReportPageName">' + assessment.Page.name + "</div>";
        for(var j = 0; j < assessment.QuestionsPresented.length; j++)
        {
            var question = assessment.QuestionsPresented[j];
            s += '<div class="ReviewReportQuestionLabel">' + Resources.Assessment_SummaryDialog_QuestionHeader_Text + " " + (j + 1) + "</div>";
            s += '<div class="ReviewPrompt">' + question.Prompt.Text + "</div>";
            s += '<div class="ReviewChoicesContainer">';
            for(var aLetter = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"],
                answersArray = question.getAnswersArray(),
                i = 0; i < question.ChoicesOrder.length; i++)
            {
                var choice = question.ChoicesOrder[i];
                switch(question.Type)
                {
                    case"choice":
                    case"true-false":
                        var style = $.inArray(i + 1 + "",answersArray) != -1 ? "ResultsRadioOn" : "ResultsRadioOff";
                        s += '<div class="' + style + '"> ' + aLetter[i] + ". " + choice.Text + "</div>";
                        break;
                    case"choice-multiple":
                        var style = $.inArray(i + 1 + "",answersArray) != -1 ? "ResultsCheckOn" : "ResultsCheckOff";
                        s += '<div class="' + style + '"> ' + aLetter[i] + ". " + choice.Text + "</div>"
                }
            }
            s += "</div>";
            if(!assessment.HideAnswers)
            {
                for(var sCorrect = "",
                    aCorrect = question.CorrectAnswer.split("~"),
                    i = 0; i < aCorrect.length; i++)
                {
                    if(sCorrect != "")
                        sCorrect += ", ";
                    sCorrect += aLetter[aCorrect[i] - 1]
                }
                s += '<div class="ReviewCorrect">' + Resources.Assessment_CorrectAnswer_Format.replace("{0}",sCorrect) + "</div>"
            }
            else
                if(question.Scored)
                    if(question.isCorrect())
                        s += '<div class="ReviewCorrect">' + Resources.Assessment_Results_Status_Correct_Text + "</div>";
                    else
                        s += '<div class="ReviewCorrect">' + Resources.Assessment_Results_Status_Incorrect_Text + "</div>";
            s += '<div class="ReviewFeedback">' + Resources.Assessment_SummaryDialog_FeedbackHeader_Text + ": " + question.getFeedback().Text + "</div>";
            s += '<div class="ReviewReportSpacer"> </div>'
        }
        s += "</div>";
        s += "</body>";
        s += "</html>";
        var w = open("","reportWindow","width=800,height=600,scrollbars=yes,resizable=yes,top=" + (screen.availHeight / 2 - 600 / 2) + ",left=" + (screen.availWidth / 2 - 800 / 2));
        w.document.write(s);
        w.document.close();
        w.focus()
    };
    rootElem.resultsShowQuestion = function(assessment,questionIndex)
    {
        var question = assessment.QuestionsPresented[questionIndex],
            resultsTitleText = Resources.Assessment_Question_Title_Text.replace(/%%index%%/g,questionIndex + 1);
        resultsTitleText = resultsTitleText.replace(/%%total%%/g,assessment.countQuestions());
        reviewTitleElem.html(resultsTitleText);
        reviewPromptElem.html(question.Prompt.Text);
        reviewChoicesContainerElem.empty();
        for(var aLetter = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"],
            answersArray = question.getAnswersArray(),
            i = 0; i < question.ChoicesOrder.length; i++)
        {
            var choice = question.ChoicesOrder[i];
            switch(question.Type)
            {
                case"choice":
                case"true-false":
                    var style = $.inArray(i + 1 + "",answersArray) != -1 ? "ResultsRadioOn" : "ResultsRadioOff";
                    reviewChoicesContainerElem.append('<div class="' + style + '"> ' + aLetter[i] + ". " + choice.Text + "</div>");
                    break;
                case"choice-multiple":
                    var style = $.inArray(i + 1 + "",answersArray) != -1 ? "ResultsCheckOn" : "ResultsCheckOff";
                    reviewChoicesContainerElem.append('<div class="' + style + '"> ' + aLetter[i] + ". " + choice.Text + "</div>")
            }
        }
        if(question.showCorrectAnswer())
        {
            for(var sCorrect = "",
                aCorrect = question.CorrectAnswer.split("~"),
                i = 0; i < aCorrect.length; i++)
            {
                if(sCorrect != "")
                    sCorrect += ", ";
                sCorrect += aLetter[aCorrect[i] - 1]
            }
            reviewCorrectElem.html(Resources.Assessment_CorrectAnswer_Format.replace("{0}",sCorrect)).show()
        }
        else
            reviewCorrectElem.empty().hide();
        if(question.isCorrect())
            feedbackTitleElem.removeClass("FeedbackTitleIncorrect").addClass("FeedbackTitleCorrect").html(Resources.Assessment_Feedback_Correct);
        else
            feedbackTitleElem.removeClass("FeedbackTitleCorrect").addClass("FeedbackTitleIncorrect").html(Resources.Assessment_Feedback_Incorrect_Finished);
        reviewFeedbackElem.html(Resources.Assessment_SummaryDialog_FeedbackHeader_Text + ": " + question.getFeedback().Text);
        contentElem.hide();
        feedbackButtonsElem.empty();
        resultsIframeElem.hide();
        reviewContainerElem.show();
        feedbackContainerElem.show();
        var feedbackPageId = question.getFeedback().PageId;
        if(feedbackPageId)
        {
            var detailedFeedbackBtn = views.utils.createButton("QDetailedFeedbackButton",Resources.Assessment_Buttons_DetailedFeedback_Text).addClass("hoveraccent2").click(function()
                {
                    var feedbackPage = assessmentView.CourseController.getPageFromId(feedbackPageId);
                    feedbackPage && 
                        assessmentView.CourseController.showContentPopup(feedbackPage,null)
                });
            feedbackButtonsElem.append(detailedFeedbackBtn)
        }
    };
    rootElem.showResults = function(assessment)
    {
        ac.hideAndStop();
        resultsIframeElem.off("load").on("load",function()
        {
            if(resultsIframeElem.attr("src") !== "")
            {
                resultsIframeElem[0].contentWindow.setAssessment && resultsIframeElem[0].contentWindow.setAssessment(assessment);
                $("body",resultsIframeElem.get(0).contentDocument).find("script").remove();
                backgroundElem.empty().append($(".AssessmentBackground > img:first",resultsIframeElem.get(0).contentDocument));
                contentElem.empty().append($(".AssessmentContent",resultsIframeElem.get(0).contentDocument).children())
            }
            resultsIframeElem.off("load")
        });
        resultsIframeElem.attr("src",assessment.Page.getFilePath());
        questionMenuContainerElem.html("");
        questionMenuContainerElem.attr("role","group");
        questionMenuContainerElem.attr("aria-label",Resources.Assessment_Buttons_Questions_Text);
        for(var i = 0; i < assessment.QuestionsPresented.length; i++)
        {
            var sNum = i + 1 < 10 ? "0" + (i + 1) : i + 1 + "",
                title = Resources.Assessment_Results_Question_Text.replace(/%%number%%/g,sNum),
                questionTileElem = $('<a class="QuestionTile" id="QuestionTile' + i + '" href="#" title="' + title + '"/>');
            questionTileElem.click(function()
            {
                assessmentView.Observer.fire("resultsQuestionClicked",this.id.substr(12) - 0)
            });
            var questionTileStatusElem = $('<div class="QuestionTileStatus"/>');
            questionTileElem.append(questionTileStatusElem);
            var questionTileNumberElem = $('<div class="QuestionTileNumber">' + sNum + "</div>");
            questionTileElem.append(questionTileNumberElem);
            questionMenuContainerElem.append(questionTileElem)
        }
        statusCompleteWord.html(Resources.Assessment_Status_Tile_QuestionsComplete_Text);
        statusFooter.html(Resources.Assessment_Status_Tile_Footer_Text);
        if(assessment.FeedbackType == "Delayed")
            statusCompleteCount.html(assessment.countAnsweredQuestions() + "/" + assessment.countQuestions());
        else
            statusCompleteCount.html(assessment.countQuestions() - assessment.countUnscoredQuestions() + "/" + assessment.countQuestions());
        assessment.Status !== AssessmentStatus.NotAttempted && assessment.Status !== AssessmentStatus.Incomplete && 
            scoreElem.html(assessment.countCorrectQuestions() + "/" + assessment.countQuestions() + " Correct");
        var interactionComplete = false;
        if(assessment.sbaMode != undefined)
            switch(assessment.Status)
            {
                case AssessmentStatus.NotAttempted:
                case AssessmentStatus.Incomplete:
                    var nUnanswered = assessment.countUnansweredQuestions();
                    if(nUnanswered > 0)
                    {
                        $("#ResultsViewLine1").html(Resources.Assessment_Results_Status_Incomplete_Text);
                        $("#ResultsViewLine1").addClass("AssesssmentResultIncomplete").removeClass("AssesssmentResultPass").removeClass("AssesssmentResultFail");
                        $("#ResultsViewLine2").html(Resources.SBA_AssessmentResultsMoreQuestions_Text.replace(/%%number%%/g,nUnanswered));
                        $("#ResultsAction").html(Resources.Assessment_Results_Directions_Incomplete_Text);
                        $("#ResultsAction").addClass("ResultsActionReturn").removeClass("ResultsActionRestart").removeClass("ResultsActionGradeTest");
                        $("#ResultsAction").attr("title",Resources.Assessment_Results_FirstUnanswered_Text);
                        $("#ResultsAction").attr("href","#");
                        actionButton.addClass("ResultsActionReturn").removeClass("ResultsActionRestart").removeClass("ResultsActionGradeTest");
                        actionButton.html(Resources.Assessment_Results_Directions_Incomplete_Text);
                        actionButton.attr("title",Resources.Assessment_Results_FirstUnanswered_Text);
                        statusTileElem.addClass("actionable").off("click").on("click",function()
                        {
                            assessmentView.Observer.fire("resultsTileClicked")
                        });
                        $("#ResultsViewLine3").html(assessment.ReviewIncompleteText)
                    }
                    else
                    {
                        $("#ResultsViewLine1").html(Resources.SBA_ResultComplete_Text);
                        $("#ResultsViewLine1").addClass("AssesssmentResultIncomplete").removeClass("AssesssmentResultPass").removeClass("AssesssmentResultFail");
                        $("#ResultsViewLine2").html(Resources.SBA_AssessmentResultsNotScored_Text);
                        $("#ResultsViewLine3").html("");
                        $("#ResultsAction").html("");
                        $("#ResultsAction").removeClass("ResultsActionRestart").removeClass("ResultsActionReturn").removeClass("ResultsActionGradeTest");
                        $("#ResultsAction").removeAttr("href");
                        $("#ResultsAction").removeAttr("title");
                        statusTileElem.removeClass("actionable").off("click");
                        actionButton.html("").removeClass("ResultsActionRestart").removeClass("ResultsActionReturn").removeClass("ResultsActionGradeTest").removeAttr("title");
                        interactionComplete = true
                    }
                    assessmentView.disableReport();
                    statusTileElem.removeClass("AssessmentPassResult").removeClass("AssessmentFailResult");
                    break;
                case AssessmentStatus.Failed:
                case AssessmentStatus.Passed:
                    if(assessment.Page.course.getCurrentPage().sbaIsScored)
                    {
                        if(assessment.Status == AssessmentStatus.Passed)
                        {
                            $("#ResultsViewLine1").html(Resources.SBA_ResultPassed_Text);
                            $("#ResultsViewLine1").addClass("AssesssmentResultPass").removeClass("AssesssmentResultIncomplete").removeClass("AssesssmentResultFail");
                            $("#ResultsViewLine2").html(Resources.SBA_AssessmentResultsPassed_Text);
                            statusTileElem.removeClass("AssessmentFailResult").addClass("AssessmentPassResult")
                        }
                        else
                        {
                            $("#ResultsViewLine1").html(Resources.SBA_ResultFailed_Text);
                            $("#ResultsViewLine1").addClass("AssesssmentResultFail").removeClass("AssesssmentResultPass").removeClass("AssesssmentResultIncomplete");
                            $("#ResultsViewLine2").html(Resources.SBA_AssessmentResultsFailed_Text);
                            statusTileElem.removeClass("AssessmentPassResult").addClass("AssessmentFailResult")
                        }
                        assessmentView.enableReport
                    }
                    else
                    {
                        $("#ResultsViewLine1").html(Resources.SBA_ResultComplete_Text);
                        $("#ResultsViewLine1").addClass("AssesssmentResultIncomplete").removeClass("AssesssmentResultPass").removeClass("AssesssmentResultFail");
                        $("#ResultsViewLine2").html(Resources.SBA_AssessmentResultsNotScored_Text);
                        statusTileElem.removeClass("AssessmentFailResult").removeClass("AssessmentPassResult")
                    }
                    $("#ResultsViewLine3").html("");
                    $("#ResultsAction").html("");
                    $("#ResultsAction").removeClass("ResultsActionRestart").removeClass("ResultsActionReturn").removeClass("ResultsActionGradeTest");
                    $("#ResultsAction").removeAttr("href");
                    $("#ResultsAction").removeAttr("title");
                    statusTileElem.removeClass("actionable").off("click");
                    actionButton.html("").removeClass("ResultsActionRestart").removeClass("ResultsActionReturn").removeClass("ResultsActionGradeTest").removeAttr("title");
                    interactionComplete = true
            }
        else
            switch(assessment.Status)
            {
                case AssessmentStatus.NotAttempted:
                case AssessmentStatus.Incomplete:
                    if(assessment.FeedbackType == "Delayed" && assessment.answeredAllQuestions())
                    {
                        $("#ResultsViewLine1").html(Resources.Assessment_Results_Status_Incomplete_Text);
                        $("#ResultsViewLine1").addClass("AssesssmentResultIncomplete").removeClass("AssesssmentResultPass").removeClass("AssesssmentResultFail");
                        $("#ResultsViewLine2").html(Resources.Assessment_Results_MustScore_Text);
                        $("#ResultsAction").html(Resources.Assessment_Results_Directions_GradeTest_Text);
                        $("#ResultsAction").addClass("ResultsActionGradeTest").removeClass("ResultsActionReturn").removeClass("ResultsActionRestart");
                        $("#ResultsAction").attr("title",Resources.Assessment_Results_Directions_GradeTest_Text);
                        $("#ResultsAction").attr("href","#");
                        statusTileElem.addClass("actionable").off("click").on("click",function()
                        {
                            assessmentView.Observer.fire("resultsTileClicked")
                        });
                        actionButton.addClass("ResultsActionGradeTest").removeClass("ResultsActionReturn").removeClass("ResultsActionRestart");
                        actionButton.html(Resources.Assessment_Results_Directions_GradeTest_Text);
                        actionButton.attr("title",Resources.Assessment_Results_Directions_GradeTest_Text)
                    }
                    else
                    {
                        $("#ResultsViewLine1").html(Resources.Assessment_Results_Status_Incomplete_Text);
                        $("#ResultsViewLine1").addClass("AssesssmentResultIncomplete").removeClass("AssesssmentResultPass").removeClass("AssesssmentResultFail");
                        var qNumber = assessment.FeedbackType == "Delayed" ? assessment.countUnansweredQuestions() : assessment.countUnscoredQuestions();
                        $("#ResultsViewLine2").html(Resources.Assessment_Results_Not_Answered_Text.replace(/%%number%%/g,qNumber));
                        $("#ResultsAction").html(Resources.Assessment_Results_Directions_Incomplete_Text);
                        $("#ResultsAction").addClass("ResultsActionReturn").removeClass("ResultsActionRestart").removeClass("ResultsActionGradeTest");
                        $("#ResultsAction").attr("title",Resources.Assessment_Results_FirstUnanswered_Text);
                        $("#ResultsAction").attr("href","#");
                        statusTileElem.addClass("actionable").off("click").on("click",function()
                        {
                            assessmentView.Observer.fire("resultsTileClicked")
                        });
                        actionButton.addClass("ResultsActionReturn").removeClass("ResultsActionRestart").removeClass("ResultsActionGradeTest");
                        actionButton.html(Resources.Assessment_Results_Directions_Incomplete_Text);
                        actionButton.attr("title",Resources.Assessment_Results_FirstUnanswered_Text)
                    }
                    $("#ResultsViewLine3").html(assessment.ReviewIncompleteText);
                    assessmentView.disableReport();
                    statusTileElem.removeClass("AssessmentFailResult").removeClass("AssessmentPassResult");
                    break;
                case AssessmentStatus.Failed:
                    $("#ResultsViewLine1").html(Resources.Assessment_Results_Status_Fail_Text);
                    $("#ResultsViewLine1").addClass("AssesssmentResultFail").removeClass("AssesssmentResultPass").removeClass("AssesssmentResultIncomplete");
                    if(assessment.PassingMethod == "PassingPercentage" || assessment.PreTestType == "NonAdaptive")
                        var results = Resources.Assessment_Results_FailPercent_Text.replace(/%%percent%%/g,assessment.getScore());
                    else
                    {
                        var results = Resources.Assessment_Results_FailNumber_Text.replace(/%%correct%%/g,assessment.countCorrectQuestions());
                        results = results.replace(/%%total%%/g,assessment.countQuestions())
                    }
                    $("#ResultsViewLine2").html(results);
                    if(!assessment.hasAttemptsLeft())
                    {
                        $("#ResultsViewLine3").html(Resources.Assessment_Results_Attempts_TooMany_Text);
                        $("#ResultsAction").html("");
                        $("#ResultsAction").removeClass("ResultsActionRestart").removeClass("ResultsActionReturn").removeClass("ResultsActionGradeTest");
                        $("#ResultsAction").removeAttr("href");
                        $("#ResultsAction").removeAttr("title");
                        statusTileElem.removeClass("actionable").off("click");
                        actionButton.html("").removeClass("ResultsActionRestart").removeClass("ResultsActionReturn").removeClass("ResultsActionGradeTest").removeAttr("title");
                        interactionComplete = true
                    }
                    else
                    {
                        if(assessment.AttemptsToPass > 0)
                        {
                            results = Resources.Assessment_Results_AttemptsLeft_Text.replace(/%%attempts%%/g,assessment.Attempts);
                            results = results.replace(/%%total%%/g,assessment.AttemptsToPass);
                            $("#ResultsViewLine3").html(results)
                        }
                        $("#ResultsAction").html(Resources.Assessment_Results_Directions_Fail_Text);
                        $("#ResultsAction").addClass("ResultsActionRestart").removeClass("ResultsActionReturn").removeClass("ResultsActionGradeTest");
                        $("#ResultsAction").attr("title",Resources.Assessment_Results_Retry_Text);
                        $("#ResultsAction").attr("href","#");
                        statusTileElem.addClass("actionable").off("click").on("click",function()
                        {
                            assessmentView.Observer.fire("resultsTileClicked")
                        });
                        actionButton.addClass("ResultsActionRestart").removeClass("ResultsActionReturn").removeClass("ResultsActionGradeTest");
                        actionButton.html(Resources.Assessment_Results_Directions_Fail_Text);
                        actionButton.attr("title",Resources.Assesment_Results_Retry_Text)
                    }
                    $("#ResultsViewLine3").append("<div>" + assessment.ReviewFailedText + "</div>");
                    assessmentView.enableReport();
                    statusTileElem.removeClass("AssessmentPassResult").addClass("AssessmentFailResult");
                    break;
                case AssessmentStatus.Passed:
                    $("#ResultsViewLine1").html(Resources.Assessment_Results_Status_Pass_Text);
                    $("#ResultsViewLine1").addClass("AssesssmentResultPass").removeClass("AssesssmentResultIncomplete").removeClass("AssesssmentResultFail");
                    if(assessment.PassingMethod == "MustAnswerAll")
                        $("#ResultsViewLine2").html(Resources.Assessment_Results_CongratulationOnly_Text);
                    else
                    {
                        var results = Resources.Assessment_Results_Congratulation_Text.replace(/%%percent%%/g,assessment.getScore() + "");
                        $("#ResultsViewLine2").html(results)
                    }
                    $("#ResultsViewLine3").html(assessment.ReviewPassedText);
                    $("#ResultsAction").html(Resources.Assessment_Results_Directions_Pass_Text);
                    $("#ResultsAction").removeClass("ResultsActionRestart").removeClass("ResultsActionReturn").removeClass("ResultsActionGradeTest");
                    $("#ResultsAction").removeAttr("href");
                    $("#ResultsAction").removeAttr("title");
                    statusTileElem.addClass("actionable").off("click");
                    actionButton.html("").removeClass("ResultsActionRestart").removeClass("ResultsActionReturn").removeClass("ResultsActionGradeTest").removeAttr("title");
                    interactionComplete = true;
                    assessmentView.enableReport();
                    statusTileElem.removeClass("AssessmentFailResult").addClass("AssessmentPassResult")
            }
        interactionComplete ? assessmentView.addClass("Assessment-interactionComplete") : assessmentView.removeClass("Assessment-interactionComplete");
        for(var i = 0; i < assessment.QuestionsPresented.length; i++)
            if(assessment.FeedbackType == "Delayed" && !assessment.isCompleted())
                if(!assessment.QuestionsPresented[i].isAnswered())
                    $("#QuestionTile" + i).removeClass("QuestionTile-Pass").removeClass("QuestionTile-Fail").removeClass("QuestionTile-Answered").removeClass("accent2").removeClass("accent2_border");
                else
                    $("#QuestionTile" + i).addClass("Question-Answered").removeClass("QuestionTile-Pass").removeClass("QuestionTile-Fail").addClass("accent2").addClass("accent2_border");
            else
                if(!assessment.QuestionsPresented[i].Scored)
                    $("#QuestionTile" + i).removeClass("QuestionTile-Pass").removeClass("QuestionTile-Fail").removeClass("QuestionTile-Answered").removeClass("accent2").removeClass("accent2_border");
                else
                    if(assessment.QuestionsPresented[i].isCorrect())
                        $("#QuestionTile" + i).addClass("QuestionTile-Pass").removeClass("QuestionTile-Fail").removeClass("QuestionTile-Answered").addClass("accent2").addClass("accent2_border");
                    else
                        $("#QuestionTile" + i).addClass("QuestionTile-Fail").removeClass("QuestionTile-Pass").removeClass("QuestionTile-Answered").addClass("accent2").addClass("accent2_border");
        reviewTitleElem.html("");
        reviewPromptElem.html("");
        reviewChoicesContainerElem.html("");
        feedbackTitleElem.html("");
        reviewCorrectElem.html("");
        reviewFeedbackElem.html("");
        feedbackButtonsElem.empty();
        reviewContainerElem.hide();
        feedbackContainerElem.hide();
        contentElem.show();
        rootElem.show()
    };
    return rootElem
}
function AssessmentReviewView(assessmentView)
{
    var rootElem = $('<div id="AssessmentReviewView"/>');
    views.utils.createButton("PassAssessmentButton",Resources.Assessment_PassTestButton_Text).click(function()
    {
        assessmentView.Observer.fire("passAssessmentClicked")
    }).appendTo(rootElem);
    views.utils.createButton("FailAssessmentButton",Resources.Assessment_FailTestButton_Text).click(function()
    {
        assessmentView.Observer.fire("failAssessmentClicked")
    }).appendTo(rootElem);
    return rootElem
}
function AssessmentScenarioView()
{
    var rootElem = $('<div id="ScenarioView">'),
        boxElem = $('<div id="ScenarioViewBox"/>').appendTo(rootElem),
        titleElem = $('<div class="ScenarioViewTitle accent2"/>').appendTo(boxElem),
        contentElem = $('<div id="ScenarioViewContent"/>').appendTo(boxElem),
        scrollElem = $('<div id="ScenarioViewContentScroll"/>').appendTo(contentElem),
        scenarioTextElem = $('<div id="ScenarioViewText" />').appendTo(scrollElem),
        bottomMask = $('<div class="scroll-padding-bottom-mask"><div></div></div>').appendTo(contentElem);
    rootElem.updateScenario = function(scenario)
    {
        if(scenario)
        {
            titleElem.html(scenario.Title);
            scenarioTextElem.html(scenario.Text)
        }
        else
        {
            titleElem.html("");
            scenarioTextElem.html("")
        }
    };
    rootElem.ContentArea = contentElem;
    return rootElem
}
function AssessmentView(view,audioController,courseController)
{
    view.Observer = new Observer;
    view.CourseController = courseController;
    view.AudioController = audioController;
    var ac = audioController;
    view.showAssessment = function(assessment)
    {
        !assessment.Initialized && 
            assessment.loadScormData();
        !assessment.Initialized && 
            assessment.init();
        assessment.ViewState.navBarVisible() ? navBarView.show() : navBarView.hide();
        assessment.ViewState.questionsNavButtonVisible() ? navBarView.showQuestionsLink() : navBarView.hideQuestionsLink();
        view.show();
        view.attr("aria-hidden","false");
        view.disableReport();
        switch(assessment.Location)
        {
            case AssessmentLocation.Intro:
                if(resultsView)
                {
                    resultsView.remove();
                    resultsView = null
                }
                if(questionView)
                {
                    questionView.remove();
                    questionView = null
                }
                if(!introView)
                {
                    introView = new AssessmentIntroView(this,audioController);
                    introView.insertBefore(navBarView)
                }
                introView.showIntro(assessment);
                introView.attr("aria-hidden","false");
                navBarView.checkIntro();
                view.removeClass("Assessment-interactionComplete");
                break;
            case AssessmentLocation.Question:
                if(introView)
                {
                    introView.remove();
                    introView = null
                }
                if(resultsView)
                {
                    resultsView.remove();
                    resultsView = null
                }
                if(!questionView)
                {
                    questionView = new AssessmentQuestionView(this,audioController);
                    questionView.insertBefore(navBarView)
                }
                questionView.showQuestionView(assessment,ac);
                questionView.attr("aria-hidden","false");
                navBarView.checkQuestions();
                questionView.removeClass("QuestionView-HideNavBar");
                view.removeClass("Assessment-interactionComplete");
                !assessment.ViewState.navBarVisible() && 
                    questionView.addClass("QuestionView-HideNavBar");
                break;
            case AssessmentLocation.Review:
                if(introView)
                {
                    introView.remove();
                    introView = null
                }
                if(questionView)
                {
                    questionView.remove();
                    questionView = null
                }
                if(!resultsView)
                {
                    resultsView = new AssessmentResultsView(this,assessment,audioController);
                    resultsView.insertBefore(navBarView)
                }
                resultsView.showResults(assessment);
                resultsView.attr("aria-hidden","false");
                navBarView.checkReview()
        }
    };
    view.hideAssessment = function()
    {
        view.hide();
        view.attr("aria-hidden","true");
        if(resultsView)
        {
            resultsView.remove();
            resultsView = null
        }
        if(questionView)
        {
            questionView.remove();
            questionView = null
        }
        if(introView)
        {
            introView.remove();
            introView = null
        }
    };
    view.isVisible = function()
    {
        return view.is(":visible")
    };
    view.updateNavButtons = function(assessment)
    {
        assessment.Location == AssessmentLocation.Question && 
            questionView.updateNavButtons(assessment)
    };
    view.refreshResults = function(assessment)
    {
        resultsView.showResults(assessment)
    };
    view.showReport = function(assessment)
    {
        resultsView.showReport(assessment)
    };
    view.resultsShowQuestion = function(assessment,index)
    {
        resultsView.resultsShowQuestion(assessment,index)
    };
    view.enableReport = function()
    {
        view.addClass("AllowReport");
        navBarView.showReportLink()
    };
    view.disableReport = function()
    {
        view.removeClass("AllowReport");
        navBarView.hideReportLink()
    };
    var navBarView = new AssessmentNavBarView(view);
    navBarView.appendTo(view);
    var questionView = null,
        introView = null,
        resultsView = null;
    return view
}
function QuestionNavBarView(assessmentView)
{
    var navBar = $('<div class="QuestionNavBar"></div>'),
        navButtons = $('<div id="QuestionNavButtons"></div>'),
        prevButton = views.utils.createButton("AssessmentPreviousButton","","AssessmentPreviousButton").click(function()
        {
            assessmentView.Observer.fire("previousLocationClicked")
        }),
        nextButton = views.utils.createButton("AssessmentNextButton","","AssessmentNextButton").click(function()
        {
            assessmentView.Observer.fire("nextLocationClicked")
        });
    navButtons.append(prevButton);
    navButtons.append(nextButton);
    navBar.append(navButtons);
    navBar.updateNavButtons = function(assessment)
    {
        if(assessment.LocationIndex == 0)
            prevButton.attr("title",Resources.Assessment_Buttons_Instructions_Text);
        else
            prevButton.attr("title",Resources.Assessment_Buttons_PreviousQuestion_Text);
        if(assessment.LocationIndex == assessment.QuestionsPresented.length - 1)
            nextButton.attr("title",Resources.Assessment_Buttons_Review_Text);
        else
            nextButton.attr("title",Resources.Assessment_Buttons_NextQuestion_Text)
    };
    return navBar
}
function BranchingContentView(branchingView,audioController)
{
    var ac = audioController,
        branchingPoint,
        rootElem = $('<div id="BranchingContentView"/>'),
        foregroundElem = $('<div id="BranchingContentViewForeground"/>').appendTo(rootElem),
        contentIframeElem = $('<iframe id="BranchingContentIframe" src=""></iframe>');
    foregroundElem.append(contentIframeElem);
    rootElem.unloadContent = function(callback)
    {
        contentIframeElem.hide().removeClass("fullscreen").off("load").on("load",function()
        {
            callback && callback()
        }).attr("src","");
        branchingView.CourseController.course.observer.unobserve("pageStatusChanged",pageStatusChangedHandler)
    };
    var pageStatusChangedHandler = function(page)
        {
            page.isComplete() && branchingPoint && page.id == branchingPoint.contentPageId && !branchingPoint.contentCompleted && branchingPoint.setContentCompleted();
            branchingView.updateNavButtons(branchingPoint.graph);
            branchingView.Observer.fire("stateChanged",branchingPoint.graph)
        };
    rootElem.showContent = function(branchingPointModel)
    {
        branchingPoint = branchingPointModel;
        var pageDisplayed = branchingView.CourseController.getPageFromId(branchingPoint.contentPageId);
        if(!pageDisplayed)
        {
            branchingPoint.graph.observer.fire("contentMissing");
            return
        }
        if(pageDisplayed.canSendCompletion() && !pageDisplayed.isComplete() && pageDisplayed.isRequired())
            pageDisplayed.setIncomplete();
        else
            pageDisplayed.setComplete();
        if(pageDisplayed.isComplete())
            !branchingPoint.contentCompleted && branchingPoint.setContentCompleted();
        else
            branchingView.CourseController.course.observer.observe("pageStatusChanged",pageStatusChangedHandler);
        var playOnPageDisplayAudio = pageDisplayed.getPlayOnPageDisplayAudio();
        if(playOnPageDisplayAudio)
            audioController.readyToPlay(playOnPageDisplayAudio,branchingPoint.graph.course.volume);
        else
            audioController.hideAndStop();
        contentIframeElem.show().off("load").on("load",function()
        {
            contentIframeElem.off("load");
            if(contentIframeElem.attr("src") == "")
                return;
            if(!branchingPoint.contentViewed)
            {
                branchingPoint.setContentViewed();
                branchingView.updateNavButtons(branchingPoint.graph);
                branchingView.Observer.fire("stateChanged",branchingPoint.graph)
            }
            $("html",document).hasClass("light_theme") && 
                $("html",contentIframeElem.get(0).contentDocument).addClass("light_theme");
            if(pageDisplayed.pageType.PlaybackSource == "Video")
            {
                vid = new VideoController(contentIframeElem[0].contentWindow,branchingView.CourseController);
                vid.page = pageDisplayed;
                vid.videoFile = pageDisplayed.hasVideo() ? pageDisplayed.videoFiles[0] : new MediaFile(branchingView.CourseController.course,"");
                vid.volume = branchingView.CourseController.course.volume;
                vid.keyPointsFilePath = pageDisplayed.getKeyPointsPath(vid.videoFile.FileName);
                !vid.videoFile.mustPlayAll && 
                    pageDisplayed.setComplete();
                vid.observer = branchingView.Observer;
                vid.context = pageDisplayed;
                vid.readyToPlay()
            }
        });
        if(pageDisplayed.pageType.PlaybackSource == "Video")
            contentIframeElem.attr("src","VideoPage.htm");
        else
            contentIframeElem.attr("src",pageDisplayed.getFilePath());
        rootElem.show()
    };
    return rootElem
}
function BranchingFeedbackContentView(branchingView,audioController)
{
    var ac = audioController,
        branchingPoint,
        rootElem = $('<div id="BranchingFeedbackContentView"/>'),
        backgroundElem = $('<div id="BranchingFeedbackContentViewBackground"/>').appendTo(rootElem),
        foregroundElem = $('<div id="BranchingFeedbackContentViewForeground"/>').appendTo(rootElem),
        titleBar = $('<div class="BranchingDialogTitlebar"></div>'),
        close = $('<a class="BranchingDialogClose" href="#">' + Resources.Dialog_Close_Text + "</a>").on("click",function()
        {
            audioController.hideAndStop();
            branchingView.Observer.fire("closeFeedbackContentClicked")
        }).appendTo(titleBar);
    titleBar.appendTo(rootElem);
    var contentIframeElem = $('<iframe id="BranchingFeedbackContentIframe" src=""></iframe>');
    foregroundElem.append(contentIframeElem);
    rootElem.unloadContent = function(callback)
    {
        contentIframeElem.hide().removeClass("fullscreen").off("load").on("load",function()
        {
            callback && callback()
        }).attr("src","");
        branchingView.CourseController.course.observer.unobserve("pageStatusChanged",pageStatusChangedHandler)
    };
    var pageStatusChangedHandler = function(page)
        {
            page.isComplete() && branchingPoint && branchingPoint.currentAttempt && branchingPoint.currentAttempt.getFeedbackPageId() == page.id && !branchingPoint.feedbackCompleted() && branchingPoint.setFeedbackCompleted();
            branchingView.updateNavButtons(branchingPoint.graph);
            branchingView.Observer.fire("stateChanged",branchingPoint.graph)
        };
    rootElem.showContent = function(branchingPointModel)
    {
        branchingPoint = branchingPointModel;
        if(branchingPoint.location === BranchingPointLocation.FeedbackContent)
            rootElem.addClass("BranchingFeedbackContent-linearMode");
        else
            rootElem.removeClass("BranchingFeedbackContent-linearMode");
        var pageDisplayed = branchingPoint.location === BranchingPointLocation.FeedbackContent ? branchingPoint.currentAttempt ? branchingView.CourseController.getPageFromId(branchingPoint.currentAttempt.getFeedbackPageId()) : null : branchingPoint.selectedFeedbackPageId ? branchingView.CourseController.getPageFromId(branchingPoint.selectedFeedbackPageId) : null;
        if(!pageDisplayed)
        {
            branchingPoint.graph.observer.fire("feedbackContentMissing");
            return
        }
        if(pageDisplayed.canSendCompletion() && !pageDisplayed.isComplete() && pageDisplayed.isRequired())
            pageDisplayed.setIncomplete();
        else
            pageDisplayed.setComplete();
        if(pageDisplayed.isComplete())
            !branchingPoint.selectedFeedbackPageIsAlternative() && !branchingPoint.feedbackCompleted() && branchingPoint.setFeedbackCompleted();
        else
            branchingView.CourseController.course.observer.observe("pageStatusChanged",pageStatusChangedHandler);
        var playOnPageDisplayAudio = pageDisplayed.getPlayOnPageDisplayAudio();
        if(playOnPageDisplayAudio)
            audioController.readyToPlay(playOnPageDisplayAudio,branchingPoint.graph.course.volume);
        else
            audioController.hideAndStop();
        contentIframeElem.show().off("load").on("load",function()
        {
            contentIframeElem.off("load");
            if(contentIframeElem.attr("src") == "")
                return;
            if(!branchingPoint.feedbackViewed() && !branchingPoint.selectedFeedbackPageIsAlternative())
            {
                branchingPoint.setFeedbackViewed();
                branchingView.updateNavButtons(branchingPoint.graph);
                branchingView.Observer.fire("stateChanged",branchingPoint.graph)
            }
            $("html",document).hasClass("light_theme") && 
                $("html",contentIframeElem.get(0).contentDocument).addClass("light_theme");
            if(pageDisplayed.pageType.PlaybackSource == "Video")
            {
                vid = new VideoController(contentIframeElem[0].contentWindow,branchingView.CourseController);
                vid.page = pageDisplayed;
                vid.videoFile = pageDisplayed.hasVideo() ? pageDisplayed.videoFiles[0] : new MediaFile(branchingView.CourseController.course,"");
                vid.volume = branchingView.CourseController.course.volume;
                vid.keyPointsFilePath = pageDisplayed.getKeyPointsPath(vid.videoFile.FileName);
                !vid.videoFile.mustPlayAll && 
                    pageDisplayed.setComplete();
                vid.observer = branchingView.Observer;
                vid.context = pageDisplayed;
                vid.readyToPlay()
            }
        });
        if(pageDisplayed.pageType.PlaybackSource == "Video")
            contentIframeElem.attr("src","VideoPage.htm");
        else
            contentIframeElem.attr("src",pageDisplayed.getFilePath());
        rootElem.show()
    };
    return rootElem
}
function BranchingFeedbackView(branchingView,audioController)
{
    var branchingPoint = null,
        ac = audioController,
        feedbackView = $('<div id="BranchingFeedbackView"></div>'),
        feedbackViewBox = $('<div id="BranchingFeedbackViewBox"></div>').appendTo(feedbackView);
    feedbackViewBox.append($('<div class="BranchingQALabel accent2_text">Q&amp;A</div>'));
    var titleBar = $('<div class="BranchingFeedbackTitleBar"></div>');
    feedbackViewBox.append(titleBar);
    var titleBarText = $('<div class="BranchingTitleBarText"></div>');
    titleBar.append(titleBarText);
    var feedbackContentElem = $('<div id="BranchingFeedbackContent"></div>');
    feedbackViewBox.append(feedbackContentElem);
    var feedbackContentScrollElem = $('<div id="BranchingFeedbackContentScroll"></div>');
    feedbackContentElem.append(feedbackContentScrollElem);
    var bottomMask = $('<div class="scroll-padding-bottom-mask"><div></div></div>').appendTo(feedbackContentElem),
        feedbackTextElem = $('<div id="BranchingFeedbackViewText" />').appendTo(feedbackContentScrollElem),
        feedbackIncompleteMessage = $('<div id="BranchingFeedbackIncompleteMessage"/>').html(Resources.Branching_FeedbackIncomplete_Text).appendTo(feedbackContentScrollElem),
        actionBar = $('<div class="BranchingFeedbackActionBar"></div>');
    feedbackViewBox.append(actionBar);
    var buttonsElem = $('<div id="BranchingFeedbackViewButtons"></div>'),
        retryBtn = views.utils.createButton("BranchingFRetryButton",Resources.Branching_Buttons_RetryQuestion_Text).addClass("accent2").addClass("accent2_border").click(function()
        {
            branchingView.Observer.fire("retryQuestionClicked")
        }).appendTo(buttonsElem),
        showFeedbackBtn = views.utils.createButton("BranchingFShowFeedbackButton",Resources.Branching_Buttons_ShowFeedback_Text).addClass("accent2").addClass("accent2_border").click(function()
        {
            branchingView.Observer.fire("showFeedbackContentClicked")
        }).appendTo(feedbackContentScrollElem);
    actionBar.append(buttonsElem);
    var relatedOutcomesSelector = new BranchingRelatedOutcomesSelectorView(branchingView),
        relatedOutcomesTiles = new BranchingRelatedOutcomesTileView(branchingView);
    relatedOutcomesSelector.appendTo(actionBar);
    relatedOutcomesTiles.appendTo(feedbackContentScrollElem);
    var setViewState = function(branchingPoint)
        {
            if(branchingPoint.feedbackContentPosition !== BranchingPointFeedbackContentPosition.Popup)
            {
                feedbackView.removeClass("BranchingFeedbackView-canRetry").removeClass("BranchingFeedbackView-hasOutcome").removeClass("BranchingFeedbackView-feedbackIncomplete");
                retryBtn.button("disable");
                showFeedbackBtn.button("disable");
                if(branchingPoint.location === BranchingPointLocation.Feedback)
                {
                    feedbackView.removeClass("BranchingFeedbackView-feedbackAlternativesView");
                    if((branchingPoint.feedbackContentPosition === BranchingPointFeedbackContentPosition.BeforeFeedback || branchingPoint.feedbackContentPosition === BranchingPointFeedbackContentPosition.SkipFeedback || !branchingPoint.currentAttemptHasFeedbackContent()) && branchingPoint.canViewAlternativeFeedback() && branchingPoint.hasAlternativeFeedbackContent())
                        feedbackView.addClass("BranchingFeedbackView-canViewAlternatives");
                    else
                        feedbackView.removeClass("BranchingFeedbackView-canViewAlternatives")
                }
                else
                    if(branchingPoint.location === BranchingPointLocation.FeedbackContent)
                        feedbackView.removeClass("BranchingFeedbackView-canViewAlternatives").removeClass("BranchingFeedbackView-feedbackAlternativesView");
                    else
                        feedbackView.addClass("BranchingFeedbackView-canViewAlternatives").addClass("BranchingFeedbackView-feedbackAlternativesView")
            }
            else
            {
                feedbackView.removeClass("BranchingFeedbackView-feedbackAlternativesView");
                if(branchingPoint.canRetry())
                {
                    feedbackView.addClass("BranchingFeedbackView-canRetry");
                    retryBtn.button("enable")
                }
                else
                {
                    feedbackView.removeClass("BranchingFeedbackView-canRetry");
                    retryBtn.button("disable")
                }
                if(branchingPoint.currentAttemptHasFeedbackContent())
                {
                    feedbackView.addClass("BranchingFeedbackView-hasOutcome");
                    showFeedbackBtn.button("enable")
                }
                else
                {
                    feedbackView.removeClass("BranchingFeedbackView-hasOutcome");
                    showFeedbackBtn.button("disable")
                }
                if(branchingPoint.canViewAlternativeFeedback() && branchingPoint.hasAlternativeFeedbackContent())
                    feedbackView.addClass("BranchingFeedbackView-canViewAlternatives");
                else
                    feedbackView.removeClass("BranchingFeedbackView-canViewAlternatives");
                if(branchingPoint.currentAttemptHasFeedbackContent() && branchingPoint.feedbackViewed() && branchingPoint.mustCompleteFeedback && !branchingPoint.feedbackCompleted())
                    feedbackView.addClass("BranchingFeedbackView-feedbackIncomplete");
                else
                    feedbackView.removeClass("BranchingFeedbackView-feedbackIncomplete")
            }
        };
    feedbackView.showFeedbackView = function(branchingPointModel)
    {
        branchingPoint = branchingPointModel;
        setViewState(branchingPoint);
        feedbackTextElem.empty();
        if(branchingPoint.isScored())
            if(branchingPoint.location !== BranchingPointLocation.FeedbackContent)
            {
                feedbackView.show();
                feedbackView.hideFeedbackContent();
                feedbackTextElem.html(branchingPoint.currentAttempt.getFeedback().Text);
                if(branchingPoint.location === BranchingPointLocation.Feedback)
                {
                    titleBarText.html(branchingPoint.isCorrect() ? Resources.Branching_Correct_Header_Text : Resources.Branching_Incorrect_Header_Text);
                    relatedOutcomesTiles.clearList();
                    if((branchingPoint.feedbackContentPosition === BranchingPointFeedbackContentPosition.BeforeFeedback || !branchingPoint.currentAttemptHasFeedbackContent()) && branchingPoint.canViewAlternativeFeedback())
                        relatedOutcomesSelector.updateList(branchingPoint);
                    else
                        relatedOutcomesSelector.clearList();
                    audioFilePath = branchingPoint.currentAttempt.getFeedbackAudioFilePath();
                    if(audioFilePath)
                        ac.readyToPlay(audioFilePath,branchingPoint.graph.course.volume,null,null);
                    else
                        ac.hideAndStop()
                }
                else
                {
                    titleBarText.html(Resources.Branching_RelatedOutcomes_Header_Text);
                    relatedOutcomesSelector.clearList();
                    relatedOutcomesTiles.updateList(branchingPoint);
                    ac.hideAndStop()
                }
            }
            else
            {
                relatedOutcomesTiles.clearList();
                relatedOutcomesSelector.clearList();
                feedbackView.hide();
                feedbackView.showFeedbackContent()
            }
        else
        {
            feedbackView.hide();
            feedbackView.hideFeedbackContent();
            relatedOutcomesTiles.clearList();
            relatedOutcomesSelector.clearList();
            feedbackTextElem.html("");
            titleBarText.html("");
            ac.hideAndStop()
        }
    };
    feedbackView.showFeedbackContent = function()
    {
        ac.hideAndStop();
        if(!feedbackContentView)
        {
            feedbackContentView = new BranchingFeedbackContentView(branchingView,audioController);
            feedbackContentView.insertAfter(feedbackView)
        }
        feedbackContentView.showContent(branchingPoint);
        setViewState(branchingPoint);
        branchingPoint.location !== BranchingPointLocation.FeedbackContent && branchingView.addClass("BranchingView-popupOpen")
    };
    feedbackView.hideFeedbackContent = function()
    {
        if(feedbackContentView)
        {
            feedbackContentView.hide();
            feedbackContentView.unloadContent();
            setViewState(branchingPoint);
            branchingView.removeClass("BranchingView-popupOpen")
        }
    };
    var feedbackContentView = null;
    return feedbackView
}
function BranchingNavBarView(branchingView)
{
    var navBar = $('<div id="BranchingNavBar"></div>'),
        navButtons = $('<div id="BranchingNavButtons"></div>'),
        prevButton = views.utils.createButton("BranchingPreviousButton","","BranchingPreviousButton").click(function()
        {
            branchingView.Observer.fire("previousLocationClicked")
        });
    prevButton.prop("title",Resources.Branching_Previous_Button_Title);
    var nextButton = views.utils.createButton("BranchingNextButton","","BranchingNextButton").click(function()
        {
            branchingView.Observer.fire("nextLocationClicked")
        });
    nextButton.prop("title",Resources.Branching_Next_Button_Title);
    navButtons.append(prevButton);
    navButtons.append(nextButton);
    navBar.append(navButtons);
    navBar.setNavButtons = function(branchingGraph)
    {
        if(branchingGraph.canMoveForward())
            nextButton.removeAttr("disabled");
        else
            nextButton.attr("disabled",true);
        if(branchingGraph.canMoveBackward())
            prevButton.removeAttr("disabled");
        else
            prevButton.attr("disabled",true)
    };
    return navBar
}
function BranchingQuestionView(branchingView,audioController)
{
    var branchingPoint = null,
        ac = audioController,
        questionView = $('<div id="BranchingQuestionView"></div>'),
        questionViewBox = $('<div id="BranchingQuestionViewBox"></div>').appendTo(questionView);
    questionViewBox.append($('<div class="BranchingQALabel accent2_text">Q&amp;A</div>'));
    var titleBar = $('<div class="BranchingQuestionTitleBar"></div>');
    questionViewBox.append(titleBar);
    var titleBarText = $('<div class="BranchingTitleBarText"></div>');
    titleBar.append(titleBarText);
    var questionContentElem = $('<div id="BranchingQuestionContent"></div>');
    questionViewBox.append(questionContentElem);
    var questionContentScrollElem = $('<div id="BranchingQuestionContentScroll"></div>');
    questionContentElem.append(questionContentScrollElem);
    var bottomMask = $('<div class="scroll-padding-bottom-mask"><div></div></div>').appendTo(questionContentElem),
        promptTextElem = $('<div id="BranchingQuestionViewPrompt" />').appendTo(questionContentScrollElem),
        choicesContainer = $('<div id="BranchingQuestionViewChoices"/>').appendTo(questionContentScrollElem),
        buttonsElem = $('<div id="BranchingQuestionViewButtons"></div>'),
        retryBtn = views.utils.createButton("BranchingQRetryButton",Resources.Branching_Buttons_RetryQuestion_Text).addClass("accent2").addClass("accent2_border").click(function()
        {
            branchingView.Observer.fire("retryQuestionClicked");
            branchingPoint.startLatencyTimer();
            setViewState(branchingPoint)
        }).appendTo(buttonsElem);
    titleBar.append(buttonsElem);
    var setViewState = function(branchingPoint)
        {
            if(branchingPoint.isScored())
            {
                questionView.addClass("BranchingQuestionView-scored");
                choicesContainer.find(":input").attr("disabled","disabled");
                if(branchingPoint.canRetry())
                {
                    questionView.addClass("BranchingQuestionView-canRetry");
                    retryBtn.button("enable")
                }
                else
                {
                    questionView.removeClass("BranchingQuestionView-canRetry");
                    retryBtn.button("disable")
                }
                titleBarText.html(branchingPoint.isCorrect() ? Resources.Branching_Correct_Header_Text : Resources.Branching_Incorrect_Header_Text)
            }
            else
            {
                questionView.removeClass("BranchingQuestionView-scored").removeClass("BranchingQuestionView-canRetry");
                choicesContainer.find(":input").removeAttr("disabled");
                retryBtn.button("disable");
                titleBarText.html("")
            }
        };
    questionView.showQuestionView = function(branchingPointModel)
    {
        questionView.show();
        choicesContainer.empty();
        promptTextElem.empty();
        branchingPoint = branchingPointModel;
        if(branchingPoint.hasQuestion())
        {
            promptTextElem.html(branchingPoint.question.Prompt.Text);
            if(branchingPoint.question.Prompt.Image)
            {
                var sFile = branchingPoint.graph.course.getImagesFolderPath() + branchingPoint.question.Prompt.Image;
                choicesContainer.append('<img class="BranchingQuestionViewImage" src="' + sFile + '" alt="' + branchingPoint.question.Prompt.ImageAltText + '"/>')
            }
            for(var aLetter = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"],
                answersArray = branchingPoint.getAnswersArray(),
                i = 0; i < branchingPoint.choicesOrder.length; i++)
            {
                var choice = branchingPoint.choicesOrder[i],
                    attrs = $.inArray(i + 1 + "",answersArray) != -1 ? " checked" : " unchecked";
                switch(branchingPoint.question.Type)
                {
                    case"choice":
                    case"true-false":
                        choicesContainer.append('<label style="display:block"><input type="radio" name="branchingQuestionChoice"' + attrs + ' value="' + (i + 1) + '"/><span>' + aLetter[i] + ". " + choice.Text + "</span></label>");
                        break;
                    case"choice-multiple":
                        choicesContainer.append('<label style="display:block"><input type="checkbox" name="branchingQuestionChoice"' + attrs + ' value="' + (i + 1) + '"/><span>' + aLetter[i] + ". " + choice.Text + "</span></label>")
                }
            }
            if(branchingPoint.isScored())
                ac.hideAndStop();
            else
                if(branchingPoint.question.Prompt.AudioFile)
                    ac.readyToPlay(branchingPoint.graph.course.getMediaFolderPath() + branchingPoint.question.Prompt.AudioFile,branchingPoint.graph.course.volume,null,null);
                else
                    ac.hideAndStop();
            setViewState(branchingPoint);
            branchingPoint.startLatencyTimer();
            choicesContainer.find("input").on("change",function()
            {
                if(branchingPoint)
                {
                    branchingPoint.currentAnswer = views.utils.getCheckedItems(choicesContainer,"branchingQuestionChoice","~");
                    branchingView.updateNavButtons(branchingPoint.graph);
                    branchingView.Observer.fire("stateChanged",branchingPoint.graph)
                }
                if(this.checked)
                {
                    var t = this;
                    setTimeout(function()
                    {
                        if(!t.checked)
                            t.checked = true
                    },1)
                }
            })
        }
    };
    questionView.unloadQuestion = function(callback)
    {
        choicesContainer.empty();
        promptTextElem.empty();
        callback && callback()
    };
    return questionView
}
function BranchingRelatedOutcomesSelectorView(branchingView)
{
    var relatedOutcomesSelector = $('<div id="BranchingRelatedOutcomesSelector"/>'),
        relatedOutcomesOpener = $('<a href="#"><span class="label">' + Resources.Branching_Buttons_RelatedOutcomes_Text + '</span><span class="expandVisual"></span></a>').appendTo(relatedOutcomesSelector),
        relatedOutcomesMenu = $('<div id="BranchingRelatedOutcomesMenu"/>').appendTo(relatedOutcomesSelector),
        relatedOutcomesList = $("<ul/>").appendTo(relatedOutcomesMenu),
        showMenu = function()
        {
            relatedOutcomesSelector.addClass("expanded")
        },
        hideMenu = function()
        {
            relatedOutcomesSelector.removeClass("expanded")
        };
    relatedOutcomesSelector.on("focusout",function()
    {
        relatedOutcomesSelector.find(":focus").length === 0 && relatedOutcomesSelector.find(":hover").length === 0 && relatedOutcomesSelector.filter(":hover").length === 0 && hideMenu()
    }).on("mouseout",function(e)
    {
        relatedOutcomesList.find(":focus").length === 0 && relatedOutcomesSelector.find(e.toElement).length === 0 && relatedOutcomesSelector.filter(e.toElement).length === 0 && hideMenu()
    });
    relatedOutcomesList.on("focusin",showMenu);
    relatedOutcomesOpener.on("click",function()
    {
        relatedOutcomesOpener.focus();
        if(relatedOutcomesSelector.hasClass("expanded"))
            hideMenu();
        else
            showMenu()
    });
    relatedOutcomesSelector.updateList = function(branchingPoint)
    {
        relatedOutcomesList.empty();
        if(branchingPoint.isScored())
            for(var alternativeFeedbackPageIds = branchingPoint.getAlternativeFeedbackPageIds(),
                i = 0,
                link; i < alternativeFeedbackPageIds.length; i++)
            {
                link = $('<a href="#"/>').html(Resources.Branching_RelatedOutcome_Item.replace("%%index%%",("0" + (i + 1)).substr(-2,2))).attr("data-pageId",alternativeFeedbackPageIds[i]);
                relatedOutcomesList.append($("<li/>").append(link));
                link.on("click",function()
                {
                    branchingView.Observer.fire("alternateFeedbackContentClicked",$(this).attr("data-pageId"))
                })
            }
    };
    relatedOutcomesSelector.clearList = function()
    {
        relatedOutcomesList.empty()
    };
    return relatedOutcomesSelector
}
function BranchingRelatedOutcomesTileView(branchingView)
{
    var relatedOutcomes = $('<div id="BranchingRelatedOutcomes"/>');
    relatedOutcomes.updateList = function(branchingPoint)
    {
        relatedOutcomes.empty();
        if(branchingPoint.isScored())
        {
            for(var alternativeFeedbackPageIds = branchingPoint.getAlternativeFeedbackPageIds(),
                i = 0,
                link,
                page; i < alternativeFeedbackPageIds.length; i++)
            {
                page = branchingView.CourseController.getPageFromId(alternativeFeedbackPageIds[i]);
                if(page)
                {
                    link = $('<a class="accent2" href="#"/>').html('<div class="outcome_number">' + ("0" + (i + 1)).substr(-2,2) + '</div><div class="outcome_name">' + page.name + "</div>").attr("data-pageId",alternativeFeedbackPageIds[i]);
                    relatedOutcomes.append(link);
                    link.on("click",function()
                    {
                        branchingView.Observer.fire("alternateFeedbackContentClicked",$(this).attr("data-pageId"))
                    })
                }
            }
            i > 0 && relatedOutcomes.append($('<div class="clear"/>'))
        }
    };
    relatedOutcomes.clearList = function()
    {
        relatedOutcomes.empty()
    };
    return relatedOutcomes
}
function BranchingView(view,audioController,courseController)
{
    view.Observer = new Observer;
    view.CourseController = courseController;
    view.AudioController = audioController;
    var ac = audioController;
    view.showBranchingGraph = function(branchingGraph)
    {
        branchingGraph.stopCurrentLocationLatencyTimer();
        view.updateViewState(branchingGraph);
        view.show();
        if(!branchingGraph.getCurrentLocation())
        {
            if(feedbackView)
            {
                feedbackView.hide();
                feedbackView.hideFeedbackContent()
            }
            if(questionView)
            {
                questionView.hide();
                questionView.unloadQuestion()
            }
            if(contentView)
            {
                contentView.hide();
                contentView.unloadContent()
            }
        }
        else
            switch(branchingGraph.getCurrentBranchingPointLocation())
            {
                case BranchingPointLocation.Content:
                    if(feedbackView)
                    {
                        feedbackView.hide();
                        feedbackView.hideFeedbackContent()
                    }
                    if(questionView)
                    {
                        questionView.hide();
                        questionView.unloadQuestion()
                    }
                    if(!contentView)
                    {
                        contentView = new BranchingContentView(this,audioController);
                        contentView.insertBefore(navBarView)
                    }
                    branchingGraph.getCurrentLocation() && 
                        contentView.showContent(branchingGraph.getCurrentLocation());
                    break;
                case BranchingPointLocation.Question:
                    if(contentView)
                    {
                        contentView.hide();
                        contentView.unloadContent()
                    }
                    if(feedbackView)
                    {
                        feedbackView.hide();
                        feedbackView.hideFeedbackContent()
                    }
                    if(!questionView)
                    {
                        questionView = new BranchingQuestionView(this,audioController);
                        questionView.insertBefore(navBarView)
                    }
                    questionView.showQuestionView(branchingGraph.getCurrentLocation(),ac);
                    break;
                case BranchingPointLocation.Feedback:
                case BranchingPointLocation.FeedbackContent:
                case BranchingPointLocation.FeedbackAlternatives:
                    if(contentView)
                    {
                        contentView.hide();
                        contentView.unloadContent()
                    }
                    if(questionView)
                    {
                        questionView.hide();
                        questionView.unloadQuestion()
                    }
                    if(!feedbackView)
                    {
                        feedbackView = new BranchingFeedbackView(this,audioController);
                        feedbackView.insertBefore(navBarView)
                    }
                    feedbackView.showFeedbackView(branchingGraph.getCurrentLocation(),ac);
                    break;
                default:
                    if(contentView)
                    {
                        contentView.hide();
                        contentView.unloadContent()
                    }
                    if(questionView)
                    {
                        questionView.hide();
                        questionView.unloadQuestion()
                    }
                    if(feedbackView)
                    {
                        feedbackView.hide();
                        feedbackView.hideFeedbackContent()
                    }
            }
    };
    view.showFeedbackContent = function(branchingGraph)
    {
        if(!feedbackView)
        {
            feedbackView = new BranchingFeedbackView(this,audioController);
            view.append(feedbackView);
            feedbackView.showFeedbackView(branchingGraph.getCurrentLocation(),ac)
        }
        feedbackView.showFeedbackContent()
    };
    view.hideFeedbackContent = function()
    {
        feedbackView && feedbackView.hideFeedbackContent()
    };
    view.updateNavButtons = function(branchingGraph)
    {
        navBarView.setNavButtons(branchingGraph)
    };
    view.updateViewState = function(branchingGraph)
    {
        if(branchingGraph.canRestart())
        {
            view.addClass("Branching-canRestart");
            restartBtn.button("enable")
        }
        else
        {
            view.removeClass("Branching-canRestart");
            restartBtn.button("disable")
        }
        branchingGraph.pathComplete ? view.addClass("Branching-pathComplete") : view.removeClass("Branching-pathComplete");
        branchingGraph.complete ? view.addClass("Branching-complete") : view.removeClass("Branching-complete");
        branchingGraph.passed ? view.addClass("Branching-passed") : view.removeClass("Branching-passed");
        var currentLocation = branchingGraph.getCurrentLocation();
        currentLocation && currentLocation.interactionComplete() && !currentLocation.canMoveForward() ? view.addClass("Branching-terminus") : view.removeClass("Branching-terminus")
    };
    view.hideGraph = function(callback)
    {
        view.hide();
        if(feedbackView)
        {
            feedbackView.hide();
            feedbackView.hideFeedbackContent(callback)
        }
        if(questionView)
        {
            questionView.hide();
            questionView.unloadQuestion(callback)
        }
        if(contentView)
        {
            contentView.hide();
            contentView.unloadContent(callback)
        }
    };
    view.isVisible = function()
    {
        return view.is(":visible")
    };
    var navBarView = new BranchingNavBarView(view);
    navBarView.appendTo(view);
    var restartBtn = views.utils.createButton("BranchingRestartButton",Resources.Branching_Buttons_Restart_Text).addClass("accent2").addClass("accent2_border");
    restartBtn.on("click",function()
    {
        view.Observer.fire("restartClicked")
    }).appendTo(view);
    var contentView = null,
        questionView = null,
        feedbackView = null;
    return view
}
function ChangeLanguagesTileView(courseController)
{
    var tileAction = $("<a/>",{"class":"action",href:"#"}),
        title = $("<div />",{"class":"tile_title"}).appendTo(tileAction),
        subtitle = $("<div />",{"class":"tile_subtitle"}).appendTo(tileAction),
        footer = $("<div />",{"class":"tile_footer"}).appendTo(tileAction),
        footerContent = $("<div />",{"class":"tile_footer_content"}).appendTo(footer),
        button = $("<div />",{"class":"tileActionButton"}).appendTo(tileAction);
    title.text(Resources.AppBar_Languages_Button_Text);
    footerContent.text(Resources.Contents_MyProgress_Text);
    tileAction.click(function()
    {
        courseController.showLanguageDialog();
        return false
    });
    return tileAction
}
function ChangeTracksTileView(courseController)
{
    var tileAction = $("<a/>",{"class":"action",href:"#"}),
        title = $("<div />",{"class":"tile_title"}).appendTo(tileAction),
        subtitle = $("<div />",{"class":"tile_subtitle"}).appendTo(tileAction),
        footer = $("<div />",{"class":"tile_footer"}).appendTo(tileAction),
        footerContent = $("<div />",{"class":"tile_footer_content"}).appendTo(footer),
        button = $("<div />",{"class":"tileActionButton"}).appendTo(tileAction);
    title.text(Resources.AppBar_ChangeTracks_Button_Text);
    footerContent.text(Resources.Contents_MyProgress_Text);
    tileAction.click(function()
    {
        courseController.showTracksDialog();
        return false
    });
    return tileAction
}
function CommunityTileView(courseController)
{
    var tileAction = $("<a/>",{"class":"action",href:"#"}),
        title = $("<div />",{"class":"tile_title"}).appendTo(tileAction),
        subtitle = $("<div />",{"class":"tile_subtitle"}).appendTo(tileAction),
        footer = $("<div />",{"class":"tile_footer"}).appendTo(tileAction),
        footerContent = $("<div />",{"class":"tile_footer_content"}).appendTo(footer),
        button = $("<div />",{"class":"tileActionButton"}).appendTo(tileAction);
    title.text(Resources.AppBar_Discussion_Button_Text);
    footerContent.text(Resources.Contents_MyProgress_Text);
    tileAction.click(function()
    {
        open(courseController.course.settings.DiscussionLink,"DiscussionLink");
        return false
    });
    return tileAction
}
function ContentsTileView(courseController)
{
    var tileAction = $("<a/>",{"class":"action",href:"#"}),
        title = $("<div />",{"class":"tile_title"}).appendTo(tileAction),
        subtitle = $("<div />",{"class":"tile_subtitle"}).appendTo(tileAction),
        footer = $("<div />",{"class":"tile_footer"}).appendTo(tileAction),
        footerContent = $("<div />",{"class":"tile_footer_content"}).appendTo(footer),
        button = $("<div />",{"class":"tileActionButton"}).appendTo(tileAction);
    title.text(Resources.AppBar_TableOfContents_Button_Text);
    footerContent.text(Resources.Contents_MyProgress_Text);
    tileAction.click(function()
    {
        courseController.showContentsDialog();
        return false
    });
    return tileAction
}
function DownloadCourseTileView(courseController)
{
    var tileAction = $("<a/>",{"class":"action",href:"#"}),
        title = $("<div />",{"class":"tile_title"}).appendTo(tileAction),
        subtitle = $("<div />",{"class":"tile_subtitle"}).appendTo(tileAction),
        footer = $("<div />",{"class":"tile_footer"}).appendTo(tileAction),
        footerContent = $("<div />",{"class":"tile_footer_content"}).appendTo(footer),
        button = $("<div />",{"class":"tileActionButton"}).appendTo(tileAction);
    title.text(Resources.AppBar_Download_Button_Text);
    footerContent.text(Resources.Contents_MyProgress_Text);
    tileAction.click(function()
    {
        courseController.downloadCourse(1);
        return false
    });
    return tileAction
}
function DownloadTranscriptTileView(courseController)
{
    var tileAction = $("<a/>",{"class":"action",href:"#"}),
        title = $("<div />",{"class":"tile_title"}).appendTo(tileAction),
        subtitle = $("<div />",{"class":"tile_subtitle"}).appendTo(tileAction),
        footer = $("<div />",{"class":"tile_footer"}).appendTo(tileAction),
        footerContent = $("<div />",{"class":"tile_footer_content"}).appendTo(footer),
        button = $("<div />",{"class":"tileActionButton"}).appendTo(tileAction);
    title.text(Resources.AppBar_CourseTranscript_Button_Text);
    footerContent.text(Resources.Contents_MyProgress_Text);
    tileAction.click(function()
    {
        courseController.showCourseTranscript(0);
        return false
    });
    return tileAction
}
function GlossaryTileView(courseController)
{
    var tileAction = $("<a/>",{"class":"action",href:"#"}),
        title = $("<div />",{"class":"tile_title"}).appendTo(tileAction),
        subtitle = $("<div />",{"class":"tile_subtitle"}).appendTo(tileAction),
        footer = $("<div />",{"class":"tile_footer"}).appendTo(tileAction),
        footerContent = $("<div />",{"class":"tile_footer_content"}).appendTo(footer),
        button = $("<div />",{"class":"tileActionButton"}).appendTo(tileAction);
    title.text(Resources.AppBar_Glossary_Button_Text);
    footerContent.text(Resources.Contents_MyProgress_Text);
    tileAction.click(function()
    {
        courseController.showGlossaryDialog();
        return false
    });
    return tileAction
}
function HelpTileView(courseController)
{
    var tileAction = $("<a/>",{"class":"action",href:"#"}),
        title = $("<div />",{"class":"tile_title"}).appendTo(tileAction),
        subtitle = $("<div />",{"class":"tile_subtitle"}).appendTo(tileAction),
        footer = $("<div />",{"class":"tile_footer"}).appendTo(tileAction),
        footerContent = $("<div />",{"class":"tile_footer_content"}).appendTo(footer),
        button = $("<div />",{"class":"tileActionButton"}).appendTo(tileAction);
    title.text(Resources.Welcome_GetHelp_Text);
    tileAction.click(function()
    {
        courseController.showHelpDialog();
        return false
    });
    return tileAction
}
function ProgressTileView(courseController)
{
    var tileAction = $("<a/>",{"class":"action",href:"#"}),
        footer = $("<div />",{"class":"tile_footer"}).appendTo(tileAction),
        footerContent = $("<div />",{"class":"tile_footer_content"}).appendTo(footer),
        title = $("<div />",{"class":"tile_title"}).appendTo(tileAction),
        subtitle = $("<div />",{"class":"tile_subtitle"}).appendTo(tileAction),
        button = $("<div />",{"class":"tileActionButton"}).appendTo(tileAction);
    if(courseController.course.scormState.isComplete)
        var nPercent = 100;
    else
    {
        var nTotal = 0,
            nComplete = 0;
        courseController.course.recursePageTreeFn(function(page)
        {
            if(page.contribute == "r" && !page.pageState.isOptional && !page.isModule)
            {
                nTotal++;
                if(page.isComplete())
                    nComplete++
            }
        });
        var nPercent = Math.round(100 * nComplete / nTotal)
    }
    title.text(nPercent + "%");
    subtitle.text(Resources.Contents_Module_Complete_Text);
    var nextPage = courseController.course.getNextRequiredPage();
    nextPage && 
        button.append($("<span/>").html(Resources.NavigationBar_WhatsNext_Text.replace("%%pageName%%","<br/>" + nextPage.name)).attr("title",nextPage.name));
    footerContent.html("<span>" + Resources.Contents_MyProgress_Text + "</span>");
    tileAction.click(function()
    {
        courseController.navigateToNextPage();
        return false
    });
    tileAction.adjustLayout = function()
    {
        button.children("span").css("max-width",button.position().left - footerContent.children("span").position().left - footerContent.children("span").outerWidth() + "px")
    };
    return tileAction
}
function ResourcesTileView(courseController)
{
    var tileAction = $("<a/>",{"class":"action",href:"#"}),
        title = $("<div />",{"class":"tile_title"}).appendTo(tileAction),
        subtitle = $("<div />",{"class":"tile_subtitle"}).appendTo(tileAction),
        footer = $("<div />",{"class":"tile_footer"}).appendTo(tileAction),
        footerContent = $("<div />",{"class":"tile_footer_content"}).appendTo(footer),
        button = $("<div />",{"class":"tileActionButton"}).appendTo(tileAction);
    title.text(Resources.AppBar_Resources_Button_Text);
    footerContent.text(Resources.Contents_MyProgress_Text);
    tileAction.click(function()
    {
        courseController.showResourcesDialog();
        return false
    });
    return tileAction
}
function TestOutTileView(courseController)
{
    var tileAction = $("<a/>",{"class":"action",href:"#"}),
        title = $("<div />",{"class":"tile_title"}).appendTo(tileAction),
        subtitle = $("<div />",{"class":"tile_subtitle"}).appendTo(tileAction),
        footer = $("<div />",{"class":"tile_footer"}).appendTo(tileAction),
        footerContent = $("<div />",{"class":"tile_footer_content"}).appendTo(footer),
        button = $("<div />",{"class":"tileActionButton"}).appendTo(tileAction);
    title.text(Resources.Testout_AppBar_Button_Text);
    footerContent.text(Resources.Contents_MyProgress_Text);
    tileAction.click(function()
    {
        courseController.navigateToTestOut();
        return false
    });
    return tileAction
}
function AssessmentController(assessmentView,audioController)
{
    var assessment = null,
        ac = audioController;
    assessmentView.Observer.observe("nextLocationClicked",function()
    {
        if(assessment.Location === AssessmentLocation.Question && assessment.FeedbackType === "Immediate")
        {
            var question = assessment.QuestionsPresented[assessment.LocationIndex];
            if(question.Answer == "")
                courseController.course.observer.fire("notifyCheckAnswerFail",null);
            else
                if(!question.Scored)
                    courseController.course.observer.fire("notifyScoreQuestionRequired",null);
                else
                    if(!question.isBlocked())
                        courseController.course.observer.fire("notifyRetryQuestionRequired",null);
                    else
                    {
                        assessment.setNextLocation();
                        assessmentView.updateNavButtons(assessment)
                    }
        }
        else
        {
            assessment.setNextLocation();
            assessmentView.updateNavButtons(assessment)
        }
    });
    assessmentView.Observer.observe("previousLocationClicked",function()
    {
        assessment.setPreviousLocation();
        assessmentView.updateNavButtons(assessment)
    });
    assessmentView.Observer.observe("introLocationClicked",function()
    {
        assessment.setIntroLocation()
    });
    assessmentView.Observer.observe("reviewLocationClicked",function()
    {
        assessment.setReviewLocation()
    });
    assessmentView.Observer.observe("questionsLocationClicked",function()
    {
        assessment.setLocation(0);
        assessmentView.updateNavButtons(assessment)
    });
    assessmentView.Observer.observe("checkAnswerClicked",function()
    {
        assessment.checkAnswer()
    });
    assessmentView.Observer.observe("retryQuestionClicked",function()
    {
        assessment.retryQuestion()
    });
    assessmentView.Observer.observe("passAssessmentClicked",function()
    {
        assessment.pass();
        showCurrentLocation()
    });
    assessmentView.Observer.observe("failAssessmentClicked",function()
    {
        assessment.fail();
        showCurrentLocation()
    });
    assessmentView.Observer.observe("resultsTileClicked",function()
    {
        if(assessment.Status == AssessmentStatus.Failed)
        {
            if(assessment.hasAttemptsLeft())
            {
                assessment.Attempts++;
                assessment.init();
                assessment.resetScormData();
                assessment.setLocation(0);
                showCurrentLocation()
            }
        }
        else
            if(assessment.FeedbackType == "Delayed" && assessment.answeredAllQuestions())
            {
                assessment.scoreAllQuestions();
                assessmentView.refreshResults(assessment)
            }
            else
                for(var i = 0; i < assessment.QuestionsPresented.length; i++)
                    if(!assessment.QuestionsPresented[i].isAnswered())
                    {
                        assessment.setLocation(i);
                        break
                    }
    });
    assessmentView.Observer.observe("resultsReportClicked",function()
    {
        assessmentView.showReport(assessment)
    });
    assessmentView.Observer.observe("resultsQuestionClicked",function(questionIndex)
    {
        assessment.setLocation(questionIndex)
    });
    var showCurrentLocation = function()
        {
            assessmentView.showAssessment(assessment,ac);
            assessmentView.Observer.fire("locationChanged",assessment)
        };
    return{readyToPlay:function(assessmentModel)
    {
        assessment = assessmentModel;
        assessment.Observer.unobserve("locationChanged",showCurrentLocation);
        assessment.Observer.observe("locationChanged",showCurrentLocation);
        showCurrentLocation();
        assessmentView.updateNavButtons(assessment);
        if(assessment.Status == AssessmentStatus.NotAttempted)
            assessment.Status = AssessmentStatus.Incomplete
    },unload:function()
    {
        assessment && 
            assessment.unload()
    },hide:function()
    {
        assessmentView.hideAssessment()
    },isVisible:function()
    {
        return assessmentView.isVisible()
    },navigateNext:function()
    {
        assessmentView.Observer.fire("nextLocationClicked")
    },navigatePrevious:function()
    {
        assessmentView.Observer.fire("previousLocationClicked")
    }}
}
function AudioController(courseController,id)
{
    this.page = null;
    this.audioFile = null;
    this.captionsFile = "";
    this.hasCaptions = false;
    this.courseController = courseController;
    this.volume = 50;
    this.audioPosition = "";
    this.slider = null;
    this.IsPlaying = false;
    this.captionArray = [];
    this.observer = null;
    this.transcriptSelector = null;
    var ac = this;
    ac.id = id;
    var cc = courseController;
    this.getCurrentPage = function()
    {
        return this.page == null ? cc.course.getCurrentPage() : this.page
    };
    this.readyToPlay = function(file,volume,observer,data)
    {
        if(file instanceof MediaFile && file instanceof Object)
            ac.audioFile = file;
        else
        {
            ac.audioFile = new MediaFile(cc.course,null);
            ac.audioFile.FilePath = file
        }
        this.volume = volume;
        this.observer = observer;
        var currPage = this.getCurrentPage();
        this.captionsFile = currPage != null ? currPage.getAudioCaptionsPath(ac.audioFile.getFilePath()) : "";
        $.ajax({type:"GET",url:ac.captionsFile,dataType:"XML",error:function()
        {
            ac.hasCaptions = false;
            ac.captionArray = [];
            ac.startPlayback(observer,data)
        },success:function(xml)
        {
            var ttElem = $(xml).find("tt"),
                bodyElem = $(ttElem).find("body"),
                divElem = $(bodyElem).find("div");
            ac.captionArray = [];
            $(divElem).children("p").each(function()
            {
                var xmlP = $(this),
                    newCaption = new Caption;
                newCaption.timeStart = ac.charTimeToSeconds(xmlP.attr("begin"));
                newCaption.timeEnd = ac.charTimeToSeconds(xmlP.attr("end"));
                try
                {
                    var s = $("<div>").append(xmlP.clone()).remove().html();
                    newCaption.text = s.substring(s.indexOf(">") + 1,s.lastIndexOf("</"))
                }
                catch(e)
                {
                    newCaption.text = xmlP.text()
                }
                ac.captionArray.push(newCaption)
            });
            ac.hasCaptions = ac.captionArray.length > 0;
            ac.startPlayback(observer,data)
        }})
    };
    this.charTimeToSeconds = function(charTime)
    {
        var aParts = charTime.split(":");
        return aParts[0] * 24 * 60 + aParts[1] * 60 + (aParts[2] - 0) + aParts[3] / 100
    };
    this.hideAndStop = function()
    {
        var acViewSelector = $("#" + ac.id),
            audioSelector = acViewSelector.find("#" + ac.id + "Audio"),
            audioElement = audioSelector.get(0);
        try
        {
            audioElement.pause()
        }
        catch(e)
        {
        }
        audioSelector.attr("src","");
        ac.IsPlaying = false;
        acViewSelector.find("#" + ac.id + "Captions").html("");
        var playPauseSelector = acViewSelector.find("#" + ac.id + "PlayPauseButton");
        playPauseSelector.off("click");
        ac.transcriptSelector && 
            ac.transcriptSelector.off("click");
        acViewSelector.css("visibility","hidden");
        this.observer && 
            this.observer.fire("audioStopped")
    };
    this.stop = function()
    {
        var acViewSelector = $("#" + ac.id);
        if(acViewSelector && ac.IsPlaying)
        {
            var audioSelector = acViewSelector.find("#" + ac.id + "Audio"),
                audioElement = audioSelector.get(0);
            try
            {
                audioElement.pause()
            }
            catch(e)
            {
            }
            ac.IsPlaying = false;
            var playPauseSelector = acViewSelector.find("#" + ac.id + "PlayPauseButton");
            playPauseSelector.addClass("AudioPlayerShowPlay").removeClass("AudioPlayerShowPause");
            playPauseSelector.attr("title",Resources.MediaControls_Play_Menu_Text);
            this.observer && 
                this.observer.fire("audioStopped")
        }
    };
    this.play = function()
    {
        var acViewSelector = $("#" + ac.id);
        if(acViewSelector && !ac.IsPlaying)
        {
            var audioSelector = acViewSelector.find("#" + ac.id + "Audio"),
                audioElement = audioSelector.get(0);
            audioElement.play();
            ac.IsPlaying = true;
            var playPauseSelector = acViewSelector.find("#" + ac.id + "PlayPauseButton");
            playPauseSelector.addClass("AudioPlayerShowPause").removeClass("AudioPlayerShowPlay");
            playPauseSelector.attr("title",Resources.MediaControls_Pause_Menu_Text);
            if(this.courseController.activeVideoController)
                delete this.courseController.activeVideoController;
            this.observer && 
                this.observer.fire("audioStarted")
        }
    };
    this.togglePlay = function()
    {
        if(ac.audioFile)
            if(ac.IsPlaying)
                ac.stop();
            else
                ac.play()
    };
    this.toggleTranscript = function()
    {
        if(cc.isTranscriptShowing)
        {
            cc.hideTranscriptPopup();
            ac.transcriptSelector.attr("title",Resources.AudioPlayer_TranscriptShow_Text)
        }
        else
        {
            var transcriptFile = ac.audioFile.UseTranscript ? ac.getCurrentPage().getAudioTranscriptPath(ac.audioFile.getFilePath()) : ac.captionsFile;
            cc.showTranscriptPopup(transcriptFile,ac.audioFile.UseTranscript,ac.transcriptHidden);
            ac.transcriptSelector.attr("title",Resources.AudioPlayer_TranscriptHide_Text)
        }
    };
    this.transcriptHidden = function()
    {
        cc.isTranscriptShowing = false;
        ac.transcriptSelector.attr("title",Resources.AudioPlayer_TranscriptShow_Text)
    };
    this.startPlayback = function(observer,data)
    {
        var acViewSelector = $("#" + ac.id);
        acViewSelector.css("visibility","visible");
        var playPauseSelector = acViewSelector.find("#" + ac.id + "PlayPauseButton");
        playPauseSelector.removeClass("AudioPlayerShowPause");
        playPauseSelector.removeClass("AudioPlayerShowPlay");
        playPauseSelector.addClass("AudioPlayerShowPause");
        playPauseSelector.attr("title",Resources.MediaControls_Pause_Menu_Text);
        var audioSelector = acViewSelector.find("#" + ac.id + "Audio");
        audioSelector.attr("src",ac.audioFile.getFilePath());
        var audioCaptions = acViewSelector.find("#" + ac.id + "Captions");
        if(cc.course.settings.ShowCaptions && ac.hasCaptions)
        {
            audioCaptions.css("display","block");
            audioCaptions.html("")
        }
        else
            audioCaptions.css("display","none");
        var audioElement = audioSelector.get(0);
        audioElement.play();
        ac.IsPlaying = true;
        ac.observer && 
            ac.observer.fire("audioLoaded");
        audioElement.volume = ac.volume / 100;
        playPauseSelector.off("click",ac.togglePlay);
        playPauseSelector.on("click",ac.togglePlay);
        ac.transcriptSelector = acViewSelector.find("#" + ac.id + "TranscriptButton");
        ac.transcriptSelector.off("click",ac.toggleTranscript);
        ac.transcriptSelector.on("click",ac.toggleTranscript);
        if(ac.hasCaptions || ac.audioFile.UseTranscript)
        {
            ac.transcriptSelector.show();
            if(cc.isTranscriptShowing)
            {
                var transcriptFile = ac.audioFile.UseTranscript ? ac.getCurrentPage().getAudioTranscriptPath(ac.audioFile.getFilePath()) : ac.captionsFile;
                cc.showTranscriptPopup(transcriptFile,ac.audioFile.UseTranscript,ac.transcriptHidden);
                ac.transcriptSelector.attr("title",Resources.AudioPlayer_TranscriptHide_Text)
            }
            else
                ac.transcriptSelector.attr("title",Resources.AudioPlayer_TranscriptShow_Text)
        }
        else
        {
            ac.transcriptSelector.hide();
            cc.isTranscriptShowing && 
                cc.hideTranscriptPopup()
        }
        var audioLocationSelector = acViewSelector.find("#" + ac.id + "Location"),
            bCreatedSlider = false,
            progressSliderSelector = null;
        audioElement.addEventListener("ended",function()
        {
            playPauseSelector.addClass("AudioPlayerShowPlay").removeClass("AudioPlayerShowPause");
            playPauseSelector.attr("title",Resources.MediaControls_Play_Menu_Text);
            ac.IsPlaying = false;
            progressSliderSelector = acViewSelector.find("#" + ac.id + "ProgressSlider");
            progressSliderSelector.slider("option","value","0");
            ac.observer && 
                ac.observer.fire("audioEnded",data);
            ac.audioFile && ac.audioFile.mustPlayAll && 
                ac.getCurrentPage().setComplete()
        });
        audioElement.addEventListener("timeupdate",function()
        {
            var length = audioElement.duration;
            if(isNaN(length))
                return;
            for(var secs = audioElement.currentTime,
                i = 0; i < ac.captionArray.length; i++)
                if(secs >= ac.captionArray[i].timeStart && secs <= ac.captionArray[i].timeEnd)
                {
                    if(!ac.captionArray[i].isDisplayed)
                    {
                        ac.captionArray[i].isDisplayed = true;
                        audioCaptions.html(ac.captionArray[i].text)
                    }
                }
                else
                    if(ac.captionArray[i].isDisplayed)
                    {
                        audioCaptions.html("");
                        ac.captionArray[i].isDisplayed = false
                    }
            if(!bCreatedSlider)
            {
                progressSliderSelector = acViewSelector.find("#" + ac.id + "ProgressSlider");
                progressSliderSelector.slider({min:0,max:Math.round(length),value:0,slide:function(event,ui)
                {
                    audioElement.currentTime = ui.value
                }});
                $(".AudioPlayerProgressSlider > .ui-slider-handle").attr("title",Resources.AudioPlayer_ProgressBar_Title);
                bCreatedSlider = true
            }
            else
                progressSliderSelector.slider("option","value",Math.round(secs) + "");
            audioLocationSelector.html(views.utils.getMediaTimeDisplayFormat(secs,length))
        },false)
    }
}
function BranchingController(branchingView,audioController)
{
    var branchingGraph = null,
        ac = audioController;
    branchingView.Observer.observe("nextLocationClicked",function()
    {
        if(branchingGraph.canMoveForward())
        {
            branchingGraph.moveForward();
            branchingView.updateNavButtons(branchingGraph)
        }
        else
        {
            var currentLocation = branchingGraph.getCurrentLocation();
            if(currentLocation)
                switch(currentLocation.location)
                {
                    case BranchingPointLocation.Content:
                        if(!currentLocation.contentViewed)
                            courseController.course.observer.fire("notifyBranchingContentNotViewed",null);
                        else
                            currentLocation.mustCompleteContent && !currentLocation.contentCompleted && 
                                courseController.course.observer.fire("notifyBranchingContentIncomplete",null);
                        break;
                    case BranchingPointLocation.Question:
                        if(!currentLocation.currentAnswer)
                            courseController.course.observer.fire("notifyBranchingQuestionNotAnswered",null);
                        else
                            currentLocation.mustPass && !currentLocation.isCorrect() && 
                                courseController.course.observer.fire("notifyBranchingQuestionMustRetry",null);
                        break;
                    default:
                        if(currentLocation.currentAttemptHasFeedbackContent())
                            if(!currentLocation.currentAttempt.contentViewed)
                                courseController.course.observer.fire("notifyBranchingFeedbackContentNotViewed",null);
                            else
                                if(currentLocation.mustCompleteFeedback && !currentLocation.currentAttempt.contentComplete)
                                    courseController.course.observer.fire("notifyBranchingFeedbackContentIncomplete",null);
                                else
                                    currentLocation.mustPass && !currentLocation.isCorrect() && 
                                        courseController.course.observer.fire("notifyBranchingQuestionMustRetry",null);
                        else
                            currentLocation.mustPass && !currentLocation.isCorrect() && 
                                courseController.course.observer.fire("notifyBranchingQuestionMustRetry",null)
                }
        }
    });
    branchingView.Observer.observe("previousLocationClicked",function()
    {
        branchingGraph.moveBackward();
        branchingView.updateNavButtons(branchingGraph)
    });
    branchingView.Observer.observe("restartClicked",function()
    {
        branchingGraph.restart()
    });
    branchingView.Observer.observe("retryQuestionClicked",function()
    {
        branchingGraph.retryQuestion();
        branchingView.updateNavButtons(branchingGraph);
        branchingView.Observer.fire("stateChanged",branchingGraph)
    });
    branchingView.Observer.observe("showFeedbackContentClicked",function()
    {
        branchingGraph.selectFeedbackPage()
    });
    branchingView.Observer.observe("alternateFeedbackContentClicked",function(id)
    {
        branchingGraph.selectFeedbackPage(id)
    });
    branchingView.Observer.observe("closeFeedbackContentClicked",function()
    {
        branchingGraph.clearSelectedFeedbackPage()
    });
    branchingView.Observer.observe("mediaEnded",function(videoFile)
    {
        videoFile.mustPlayAll && typeof this.setComplete === "function" && 
            this.setComplete();
        var currentLocation = branchingGraph.getCurrentLocation();
        if(currentLocation && (currentLocation.location === BranchingPointLocation.Content || currentLocation.location === BranchingPointLocation.FeedbackContent) && currentLocation.canMoveForward())
        {
            branchingGraph.moveForward();
            branchingView.updateNavButtons(branchingGraph)
        }
        else
            (currentLocation && currentLocation.location === BranchingPointLocation.Feedback || currentLocation.location === BranchingPointLocation.FeedbackAlternatives) && 
                branchingGraph.clearSelectedFeedbackPage()
    });
    var showCurrentLocation = function()
        {
            branchingView.showBranchingGraph(branchingGraph,ac);
            branchingView.Observer.fire("locationChanged",branchingGraph)
        },
        displaySelectedFeedbackPage = function()
        {
            if(branchingGraph.hasSelectedFeedbackPage())
                branchingView.showFeedbackContent(branchingGraph);
            else
                branchingView.hideFeedbackContent()
        },
        updateViewState = function()
        {
            branchingView.updateViewState(branchingGraph)
        };
    return{readyToPlay:function(branchingGraphModel)
    {
        branchingGraph = branchingGraphModel;
        branchingGraph.observer.unobserve("locationChanged",showCurrentLocation);
        branchingGraph.observer.unobserve("selectedFeedbackPageChanged",displaySelectedFeedbackPage);
        branchingGraph.observer.unobserve("branchingPathCompleted",updateViewState);
        branchingGraph.initialized || branchingGraph.loadScormData();
        branchingGraph.initialized || branchingGraph.restart();
        branchingGraph.observer.observe("locationChanged",showCurrentLocation);
        branchingGraph.observer.observe("selectedFeedbackPageChanged",displaySelectedFeedbackPage);
        branchingGraph.observer.observe("branchingPathCompleted",updateViewState);
        branchingGraphModel.usePlayerNavigation ? branchingView.addClass("Branching-playerNavigation") : branchingView.removeClass("Branching-playerNavigation");
        showCurrentLocation();
        branchingView.updateNavButtons(branchingGraph)
    },unload:function()
    {
        if(branchingGraph)
        {
            branchingGraph.observer.unobserve("locationChanged",showCurrentLocation);
            branchingGraph.observer.unobserve("selectedFeedbackPageChanged",displaySelectedFeedbackPage);
            branchingGraph.observer.unobserve("branchingPathCompleted",updateViewState);
            branchingGraph.unload();
            branchingGraph = null
        }
    },hide:function(callback)
    {
        branchingView.hideGraph(callback)
    },isVisible:function()
    {
        return branchingView.isVisible()
    },navigateNext:function()
    {
        branchingView.Observer.fire("nextLocationClicked")
    },navigatePrevious:function()
    {
        branchingView.Observer.fire("previousLocationClicked")
    }}
}
function ContentPopupController(contentPopupView)
{
    return{show:function(page,callback)
    {
        contentPopupView.show(page,callback)
    },hide:function()
    {
    }}
}
function CourseController(courseModel)
{
    this.nextPageIndex = 0;
    var bInTestOut = false;
    this.contentPopupController = null;
    this.contentPopupView = null;
    this.isTranscriptShowing = false;
    return{navigateToPage:function(index)
    {
        courseModel.navigateToPage(index)
    },navigateToPageById:function(id)
    {
        courseModel.navigateToPageById(id)
    },navigatePrevious:function()
    {
        var currentPage = courseModel.getCurrentPage();
        if(currentPage.Assessment && currentPage.Assessment.hasPreviousLocation())
        {
            var assessmentController = player.getContentView().getAssessmentController();
            if(assessmentController)
            {
                assessmentController.navigatePrevious();
                return
            }
        }
        else
            if(currentPage.BranchingGraph && currentPage.BranchingGraph.usePlayerNavigation && currentPage.BranchingGraph.canMoveBackward())
            {
                var branchingController = player.getContentView().getBranchingController();
                if(branchingController)
                {
                    branchingController.navigatePrevious();
                    return
                }
            }
        this.navigateToPreviousPage()
    },navigateNext:function()
    {
        var currentPage = courseModel.getCurrentPage();
        if(currentPage.Assessment && currentPage.Assessment.hasNextLocation())
        {
            var assessmentController = player.getContentView().getAssessmentController();
            if(assessmentController)
            {
                assessmentController.navigateNext();
                return
            }
        }
        else
            if(currentPage.BranchingGraph && currentPage.BranchingGraph.usePlayerNavigation)
            {
                var branchingController = player.getContentView().getBranchingController(),
                    currentLocation = currentPage.BranchingGraph.getCurrentLocation();
                if(branchingController && currentLocation && (currentLocation.canMoveForward() || !currentLocation.interactionComplete()))
                {
                    branchingController.navigateNext();
                    return
                }
            }
        this.navigateToNextPage()
    },navigateToNextPage:function()
    {
        if(courseController.nextPageIndex > 0)
        {
            var target = courseController.nextPageIndex;
            this.nextPageIndex = 0;
            courseModel.navigateToPage(target)
        }
        else
            courseModel.navigateToNextPage()
    },navigateToPreviousPage:function()
    {
        courseModel.navigateToPreviousPage()
    },navigateToWelcomePage:function()
    {
        if(courseModel.testOutPage)
            courseModel.navigateToPage(1);
        else
            courseModel.navigateToPage(0)
    },navigateToTestOut:function()
    {
        this.nextPageIndex = courseModel.currentPageIndex;
        courseModel.testOutPage.navNext = courseModel.pageNavigation[courseModel.currentPageIndex];
        courseModel.navigateToPage(0)
    },navigateToStartupPage:function()
    {
        if(courseModel.scormState.bookmark != "")
            this.navigateToPage(+courseModel.scormState.bookmark);
        else
            if(courseModel.settings.SkipWelcomePage)
                if(courseModel.testOutPage)
                {
                    this.nextPageIndex = 3;
                    this.navigateToPage(2)
                }
                else
                {
                    this.nextPageIndex = 2;
                    this.navigateToPage(1)
                }
            else
            {
                if(courseModel.testOutPage)
                    this.nextPageIndex = 2;
                else
                    this.nextPageIndex = 1;
                this.navigateToWelcomePage()
            }
    },showTracksDialog:function()
    {
        TracksDialogView.getInstance().dialog("open")
    },showContentsDialog:function()
    {
        ContentsDialogView.getInstance().dialog("open")
    },hideContentsDialog:function()
    {
        ContentsDialogView.getInstance().dialog("close")
    },showResourcesDialog:function()
    {
        ResourcesDialogView.getInstance().dialog("open")
    },showHelpDialog:function()
    {
        HelpDialogView.getInstance().dialog("open")
    },showLanguageDialog:function()
    {
        LanguageDialogView.getInstance().dialog("open")
    },showHighContrastDialog:function()
    {
        HighContrastDialogView.getInstance().dialog("open")
    },showGlossaryDialog:function()
    {
        GlossaryDialogView.getInstance().dialog("open")
    },showDownloadProblemDialog:function()
    {
        DownloadProblemDialogView.getInstance().dialog("open")
    },showContentPopup:function(page,callback)
    {
        if(this.contentPopupController == null)
        {
            this.contentPopupView = new ContentPopupView(this);
            this.contentPopupController = new ContentPopupController(this.contentPopupView)
        }
        this.contentPopupController.show(page,callback)
    },showTranscriptPopup:function(captionsFile,isHtmTranscript,callback)
    {
        if(!this.transcriptPopup)
            this.transcriptPopup = new TranscriptPopupView;
        this.transcriptPopup.show(captionsFile,isHtmTranscript,callback);
        this.isTranscriptShowing = true
    },hideTranscriptPopup:function()
    {
        this.transcriptPopup && 
            this.transcriptPopup.hide();
        this.isTranscriptShowing = false
    },showCourseTranscript:function(location)
    {
        if(location == 1)
            open(this.course.settings.CourseTranscript,"coursetranscript");
        else
            open(this.course.getContentFolderPath() + this.course.settings.CourseTranscript,"coursetranscript")
    },showEvaluationDialog:function(parentWindow,bCoursCompletedByTestOut)
    {
        if(courseModel.settings.AttemptId == null)
            return;
        $.ajax({type:"GET",contentType:"application/json; charset=utf-8",url:courseModel.settings.EvalServiceUri + "GetPendingEvals/" + courseModel.settings.AttemptId,data:"{}",dataType:"jsonp",success:function(result)
        {
            if(result.Data && result.Data.length > 0)
            {
                for(var pendingEval = null,
                    i = 0,
                    ilen = result.Data.length; i < ilen; i++)
                {
                    var pendEval = result.Data[i];
                    if(pendEval.TriggerType == "UserComplete" && pendEval.RuleTriggerOffset > 0)
                    {
                        pendingEval = pendEval;
                        break
                    }
                    else
                        if(pendEval.TriggerType == "UserComplete" && pendEval.RuleTriggerOffset == 0)
                        {
                            pendingEval = pendEval;
                            break
                        }
                        else
                            if(pendEval.TriggerType == "UserLaunch" || pendEval.TriggerType == "ActivityStart" || pendEval.TriggerType == "UserRegistration")
                            {
                                pendingEval = pendEval;
                                break
                            }
                }
                if(pendingEval)
                    if(bCoursCompletedByTestOut)
                        $.ajax({type:"GET",contentType:"application/json; charset=utf-8",url:courseModel.settings.EvalServiceUri + "GetEvalQuestions?attemptId=" + courseModel.settings.AttemptId + "&formId=" + pendingEval.Form_PK,data:"{}",dataType:"jsonp",success:function(result)
                        {
                            $.ajax({type:"POST",contentType:"application/json; charset=utf-8",url:courseModel.settings.EvalServiceUri + "SaveEvalAnswers?attemptId=" + courseModel.settings.AttemptId,processData:false,data:JSON.stringify(result.Data),dataType:"json",success:function()
                            {
                            },error:function()
                            {
                            }})
                        },error:function()
                        {
                        }});
                    else
                        EvalDialogView.open(courseModel,pendingEval.Form_PK,parentWindow)
            }
        }})
    },volumeChanged:function(newVolume)
    {
        courseModel.volume = newVolume
    },initReceiveCredit:function(win)
    {
        var s = "";
        if(!course.scormState.isComplete && !course.getCurrentPage().isComplete())
        {
            for(var module = course.getCurrentPage(); module.parent != null; module = module.parent);
            for(var sIncompleteModules = "",
                i = 0; i < course.modules.length; i++)
                if(!course.modules[i].pageState.isOptional && !course.modules[i].isComplete() && course.modules[i] != module)
                {
                    if(sIncompleteModules != "")
                        sIncompleteModules += ", ";
                    sIncompleteModules += course.modules[i].name
                }
            var sIncompletePages = "";
            sIncompleteModules == "" && 
                course.recursePagesFn(module.pages,function(page)
                {
                    if(page.contribute == "r" && !page.pageState.isOptional && !page.isComplete() && page != course.getCurrentPage())
                    {
                        if(sIncompletePages != "")
                            sIncompletePages += ", ";
                        sIncompletePages += page.name
                    }
                },1);
            if(sIncompleteModules == "" && sIncompletePages == "")
            {
                s += '<div class="receiveCreditComplete">' + Resources.RC_Complete_Text + "</div>";
                s += '<input type="button" name="YES" value="' + Resources.RC_ReceiveCredit_Text + '" onclick="parent.player.courseController.markPageComplete();location.reload();">'
            }
            else
                if(sIncompleteModules != "")
                    s += '<div class="receiveCreditIncomplete">' + Resources.RC_IncompleteModules_Text.replace(/%%modules/g,sIncompleteModules) + "</div>";
                else
                    s += '<div class="receiveCreditIncomplete">' + Resources.RC_IncompletePages_Text.replace(/%%pages/g,sIncompletePages) + "</div>"
        }
        else
        {
            s += Resources.RC_CreditReceived_Text;
            course.getCurrentPage().pageState.status == "" && 
                this.markPageComplete()
        }
        win.document.getElementById("ReceiveCreditContent").innerHTML = s
    },initOnePageCourseComplete:function(win)
    {
        if(win == null)
            win = window;
        var module = course.getCurrentPage().getModule();
        if(module.isComplete())
        {
            win.document.getElementById("courseIncompleteContent").style.display = "none";
            win.document.getElementById("courseCompleteContent").style.display = "block"
        }
    },initConfirmModule:function(win)
    {
        if(win == null)
            win = window;
        var module = course.getCurrentPage().getModule();
        if(module.isComplete())
            sPrompt = Resources.ModuleCompletedMessage_Text;
        else
        {
            sPrompt = Resources.ModuleCompletionPrompt_Text;
            win.document.getElementById("buttonConfirm").style.display = "block"
        }
        win.document.getElementById("confirmPrompt").innerHTML = sPrompt
    },confirmModuleComplete:function(win)
    {
        win.document.getElementById("confirmPrompt").innerHTML = Resources.ModuleCompletedMessage_Text;
        win.document.getElementById("buttonConfirm").style.display = "none";
        this.markPageComplete()
    },initUserVerification:function(win)
    {
        var sXmlFile = win.location.href.substring(0,win.location.href.lastIndexOf(".")) + ".xml";
        jQuery.ajax({type:"GET",url:sXmlFile,dataType:"XML",success:function(xml)
        {
            var sName = course.scormState.getLearnerName();
            if(sName.indexOf(",") > 0)
            {
                var aParts = sName.split(",");
                if(aParts[1])
                    aParts[1] = jQuery.trim(aParts[1]);
                sName = aParts[1] + " " + aParts[0]
            }
            var pageTypeElem = $(xml).find("pageType"),
                pageInstructions = pageTypeElem.find("pageInstructions").text(),
                legalText = pageTypeElem.find("legalText").text(),
                electronicSignatureInstructions = pageTypeElem.find("electronicSignatureInstructions").text(),
                buttonText = pageTypeElem.find("buttonText").text(),
                incompleteCourseText = pageTypeElem.find("incompleteCourseText").text(),
                successfulCompletionText = pageTypeElem.find("successfulCompletionText").text(),
                signatureAccessibilityInfo = pageTypeElem.find("signatureAccessibilityInfo").text();
            signatureAccessibilityInfo = signatureAccessibilityInfo.replace(/%%scormLearnerName%%/g,sName);
            for(var module = course.getCurrentPage().getModule(),
                allComplete = true,
                i = 0; i < course.modules.length; i++)
                if(course.modules[i] != module)
                    if(!course.modules[i].pageState.isOptional)
                        if(!course.modules[i].isComplete())
                            allComplete = false;
            var s = "";
            if(!allComplete)
                s += '<div class="UserVerifyInstructions">' + incompleteCourseText + "</div>";
            else
                if(!course.getCurrentPage().isComplete())
                {
                    s += '<div class="UserVerifyInstructions">' + pageInstructions + "</div>";
                    s += '<div class="UserVerifyLegalText">' + legalText + "</div>";
                    s += '<div class="UserVerifyUsername">' + sName + "</div>";
                    s += '<input class="UserVerifyTextbox" type="text" name="UserVerifyText" id="UserVerifyText" size="70" title="' + signatureAccessibilityInfo + '" />';
                    s += '<div class="UserVerifySignatureInstructions">' + electronicSignatureInstructions + "</div>";
                    s += '<input class="UserVerifyButton" type="button" name="UserVerifyButton" value="' + buttonText + '" onclick="parent.player.courseController.submitUserVerification(window)" />'
                }
                else
                    s += '<div class="UserVerifyComplete">' + successfulCompletionText + "</div>";
            win.document.getElementById("UserVerify").innerHTML = s
        },async:false})
    },submitUserVerification:function(win)
    {
        var sNameEntered = win.document.getElementById("UserVerifyText").value,
            sName = course.scormState.getLearnerName();
        if(sName.indexOf(",") > 0)
        {
            var aParts = sName.split(",");
            if(aParts[1])
                aParts[1] = jQuery.trim(aParts[1]);
            sName = aParts[1] + " " + aParts[0]
        }
        if(sNameEntered.toLowerCase().length > 0)
        {
            setInteraction(null,"attestation","fill-in",sNameEntered,sNameEntered,"correct",null,null,null,null);
            this.markPageComplete();
            win.location.reload()
        }
        else
            courseController.alert(win.document.getElementById("UserVerifyText").title)
    },initScenarioBasedAssessment:function(win)
    {
        var currentPage = course.getCurrentPage();
        if(currentPage.privatePages.length == 0)
        {
            var sXmlFile = win.location.href.substring(0,win.location.href.lastIndexOf(".")) + ".xml";
            jQuery.ajax({type:"GET",url:sXmlFile,dataType:"XML",success:function(xml)
            {
                var sbaElem = $(xml).find("sba");
                currentPage.sbaContributesCourseScore = sbaElem.attr("contributesCourseScore");
                currentPage.sbaAdaptiveBehavior = sbaElem.attr("adaptiveBehavior");
                currentPage.sbaRetryBehavior = sbaElem.attr("retryBehavior");
                currentPage.sbaSequenceOfScenarios = sbaElem.attr("sequenceOfScenarios");
                currentPage.sbaAttemptMaximum = sbaElem.attr("attemptMaximum") - 0;
                currentPage.sbaAttempts = 1;
                $(sbaElem).children("set").each(function()
                {
                    var xmlSet = $(this),
                        newSetPage = new Page;
                    newSetPage.name = xmlSet.attr("name");
                    currentPage.privatePages.push(newSetPage);
                    $(xmlSet).children("level1").each(function()
                    {
                        var xmlPage = $(this),
                            newPage = new Page;
                        newSetPage.privatePages.push(newPage);
                        CourseParser.parsePage(newPage,xmlPage,newSetPage,course);
                        $(xmlPage).children("level2").each(function()
                        {
                            var xmlContent = $(this),
                                newContentPage = new Page;
                            newPage.privatePages.push(newContentPage);
                            CourseParser.parsePage(newContentPage,xmlContent,newPage,course)
                        })
                    })
                })
            },async:false})
        }
        this.initSbaStatus(currentPage);
        currentPage.sbaWin = win;
        this.showSbaStatus()
    },scoreScenarioBasedAssessment:function()
    {
        for(var currentPage = course.getCurrentPage(),
            i = 0; i < currentPage.privatePages.length; i++)
        {
            var selectedAssessment = currentPage.privatePages[i].privatePages[currentPage.privatePages[i].assessmentSelected].Assessment;
            selectedAssessment.scoreAllQuestions()
        }
        currentPage.sbaIsScored = true;
        this.updateSbaStatus()
    },retryScenarioBasedAssessment:function()
    {
        for(var currentPage = course.getCurrentPage(),
            i = 0; i < currentPage.privatePages.length; i++)
            if(currentPage.privatePages[i].assessmentStatus != AssessmentStatus.Passed || currentPage.sbaRetryBehavior != "OnlyFailedAssessments")
            {
                currentPage.privatePages[i].assessmentSelected = Math.floor(Math.random() * currentPage.privatePages[i].privatePages.length);
                var selectedAssessment = currentPage.privatePages[i].privatePages[currentPage.privatePages[i].assessmentSelected].Assessment;
                selectedAssessment.sbaMode = true;
                selectedAssessment.sbaPageId = currentPage.id;
                selectedAssessment.Attempts++;
                selectedAssessment.init();
                selectedAssessment.resetScormData();
                currentPage.sbaIsScored = false
            }
        currentPage.sbaIsRetried = true;
        this.updateSbaStatus(true)
    },initSbaStatus:function(currentPage)
    {
        var scormData = courseController.course.scormState.getState(currentPage.id),
            bStateRestored = false;
        if(scormData != "")
        {
            for(var aSbaState = scormData.split(":"),
                aSetState = aSbaState[0].split("-"),
                i = 0; i < currentPage.privatePages.length; i++)
            {
                aParts = aSetState[i].split(",");
                currentPage.privatePages[i].assessmentSelected = aParts[0] - 0;
                currentPage.privatePages[i].sbaIsLocked = aParts[1] == "1"
            }
            currentPage.sbaIsScored = aSbaState[1] == "1";
            currentPage.sbaIsRetried = aSbaState[2] == "1";
            bStateRestored = true
        }
        for(var bAllPassed = true,
            nComplete = 0,
            i = 0; i < currentPage.privatePages.length; i++)
        {
            if(currentPage.privatePages[i].assessmentSelected == undefined)
                currentPage.privatePages[i].assessmentSelected = Math.floor(Math.random() * currentPage.privatePages[i].privatePages.length);
            if(currentPage.privatePages[i].sbaIsLocked == undefined)
                currentPage.privatePages[i].sbaIsLocked = false;
            var selectedAssessment = currentPage.privatePages[i].privatePages[currentPage.privatePages[i].assessmentSelected].Assessment;
            selectedAssessment.sbaMode = true;
            selectedAssessment.sbaPageId = currentPage.id;
            if(!selectedAssessment.Initialized)
            {
                selectedAssessment.loadScormData();
                !selectedAssessment.Initialized && 
                    selectedAssessment.init()
            }
            if(selectedAssessment.Status != AssessmentStatus.Passed)
                bAllPassed = false;
            currentPage.privatePages[i].questionsUnanswered = selectedAssessment.countUnansweredQuestions();
            if(currentPage.privatePages[i].questionsUnanswered == 0)
                nComplete++;
            if(currentPage.sbaSequenceOfScenarios == "Linear")
                if(i > 0)
                    if(currentPage.privatePages[i - 1].questionsUnanswered > 0)
                        currentPage.privatePages[i].sbaIsLocked = true;
            if(currentPage.privatePages[i].assessmentStatus == undefined)
                currentPage.privatePages[i].assessmentStatus = selectedAssessment.Status
        }
        currentPage.sbaIsAllPassed = bAllPassed;
        if(currentPage.sbaIsScored == undefined)
            currentPage.sbaIsScored = false;
        if(currentPage.sbaIsRetried == undefined)
            currentPage.sbaIsRetried = false;
        currentPage.sbaAllAnswered = nComplete == currentPage.privatePages.length
    },updateSbaStatusClosed:function()
    {
        $("#IntroViewIframe").attr("src","");
        courseController.updateSbaStatus(true)
    },updateSbaStatus:function(skipCheckCompletion)
    {
        for(var currentPage = course.getCurrentPage(),
            bAllPassed = true,
            nComplete = 0,
            i = 0; i < currentPage.privatePages.length; i++)
        {
            var selectedAssessment = currentPage.privatePages[i].privatePages[currentPage.privatePages[i].assessmentSelected].Assessment;
            if(selectedAssessment.Status != AssessmentStatus.Passed)
                bAllPassed = false;
            currentPage.privatePages[i].questionsUnanswered = selectedAssessment.countUnansweredQuestions();
            currentPage.privatePages[i].assessmentStatus = selectedAssessment.Status;
            if(currentPage.sbaSequenceOfScenarios == "Linear")
                if(i > 0)
                    if(currentPage.privatePages[i - 1].questionsUnanswered > 0)
                        currentPage.privatePages[i].sbaIsLocked = true;
                    else
                        currentPage.privatePages[i].sbaIsLocked = false;
            if(currentPage.privatePages[i].questionsUnanswered == 0)
                nComplete++
        }
        currentPage.sbaIsAllPassed = bAllPassed;
        currentPage.sbaAllAnswered = nComplete == currentPage.privatePages.length;
        for(var scormData = "",
            i = 0; i < currentPage.privatePages.length; i++)
        {
            if(scormData != "")
                scormData += "-";
            scormData += currentPage.privatePages[i].assessmentSelected + ",";
            scormData += (currentPage.privatePages[i].sbaIsLocked ? "1" : "0") + ",";
            scormData += currentPage.privatePages[i].questionsUnanswered
        }
        scormData += ":" + (currentPage.sbaIsScored ? "1" : "0");
        scormData += ":" + (currentPage.sbaIsRetried ? "1" : "0");
        courseController.course.scormState.setState(currentPage.id,scormData);
        courseController.showSbaStatus();
        if(!skipCheckCompletion)
            if(bAllPassed)
            {
                setObjective(null,"Assessment." + currentPage.id + ".1","completed","100","passed",this.getSbaScore() / 100 + "",null);
                currentPage.setComplete(false)
            }
            else
                if(this.sbaHasNoAttemptsLeft(currentPage))
                {
                    setObjective(null,"Assessment." + currentPage.id + ".1","completed","100","failed",this.getSbaScore() / 100 + "",null);
                    currentPage.setComplete(false)
                }
    },getSbaScore:function()
    {
        for(var currentPage = course.getCurrentPage(),
            nScore = 0,
            nContributed = 0,
            i = 0; i < currentPage.privatePages.length; i++)
        {
            var selectedAssessment = currentPage.privatePages[i].privatePages[currentPage.privatePages[i].assessmentSelected].Assessment,
                nTotalQuestions = selectedAssessment.countQuestions();
            if(nTotalQuestions > 0)
            {
                nContributed++;
                nScore += selectedAssessment.countCorrectQuestions() / nTotalQuestions
            }
        }
        if(nContributed > 0)
            nScore = Math.round(nScore / nContributed * 100);
        else
            nScore = 100;
        return nScore
    },sbaHasNoAttemptsLeft:function(page)
    {
        return page && page.sbaAttemptMaximum && page.sbaAttempts ? page.sbaAttemptMaximum > 0 && page.sbaAttempts > page.sbaAttemptMaximum : false
    },showSbaStatus:function()
    {
        var currentPage = course.getCurrentPage(),
            s = '<div class="sbaContainer">';
        if(currentPage.sbaIsScored)
            if(currentPage.sbaIsAllPassed)
            {
                var nScore = this.getSbaScore(),
                    sMessage = Resources.SBA_ActionButtonScoredPassed_Text.replace(/%%Score%%/g,nScore);
                currentPage.sbaContributesCourseScore == "true" && 
                    this.course.scormState.setScore(nScore + "");
                s += '<div class="sbaActionContainer">' + sMessage + "</div>"
            }
            else
            {
                currentPage.sbaAttempts++;
                if(currentPage.sbaAttemptMaximum == 0 || currentPage.sbaAttemptMaximum > 0 && currentPage.sbaAttempts <= currentPage.sbaAttemptMaximum)
                {
                    s += '<div class="sbaActionContainer">' + Resources.SBA_ActionButtonScoredRetry_Text;
                    s += '<a class="sbaActionButton accent" href="" onclick="parent.player.courseController.retryScenarioBasedAssessment(window);return false;">' + Resources.SBA_ActionButtonRetryTest_Text + "</a>";
                    s += "</div>"
                }
                else
                {
                    s += '<div class="sbaActionContainer">' + Resources.SBA_NoAttemptsLeft_Text;
                    s += "</div>"
                }
            }
        else
        {
            s += '<div class="sbaActionContainer">' + Resources.SBA_ActionButtonNotScored_Text;
            if(currentPage.sbaAllAnswered)
                s += '<a class="sbaActionButton accent" href="" onclick="parent.player.courseController.scoreScenarioBasedAssessment(window);return false;">' + Resources.SBA_ActionButtonScoreTest_Text + "</a>";
            else
                s += '<a class="sbaActionButtonDisabled">' + Resources.SBA_ActionButtonScoreTest_Text + "</a>";
            s += "</div>"
        }
        s += '<div class="sbaSetContainer">';
        for(var i = 0; i < currentPage.privatePages.length; i++)
        {
            var setPage = currentPage.privatePages[i],
                className = "sbaSet";
            if(currentPage.sbaIsScored && setPage.questionsUnanswered == 0)
                if(setPage.assessmentStatus === AssessmentStatus.Passed)
                    className += " sbaSetScored sbaSetPassed";
                else
                    if(setPage.assessmentStatus === AssessmentStatus.Failed)
                        className += " sbaSetScored sbaSetFailed";
            s += '<a class="' + className + '" href="" onclick="parent.player.courseController.showScenarioBasedAssessment(window, ' + i + ');return false;">';
            s += '<div class="sbaSetName">' + setPage.name + "</div>";
            if(currentPage.sbaIsScored && setPage.questionsUnanswered == 0)
                switch(setPage.assessmentStatus)
                {
                    case AssessmentStatus.Passed:
                        s += '<div class="sbaSetResult">' + Resources.SBA_ResultPassed_Text + "</div>";
                        break;
                    case AssessmentStatus.Failed:
                        s += '<div class="sbaSetResult">' + Resources.SBA_ResultFailed_Text + "</div>"
                }
            if(currentPage.sbaIsScored || setPage.assessmentStatus == AssessmentStatus.Passed && currentPage.sbaIsRetried)
            {
                var selectedAssessment = currentPage.privatePages[i].privatePages[currentPage.privatePages[i].assessmentSelected].Assessment,
                    xofy = Resources.SBA_RemainingXofY_Text.replace(/%%correct%%/g,selectedAssessment.countCorrectQuestions());
                xofy = xofy.replace(/%%total%%/g,selectedAssessment.countQuestions());
                s += '<div class="sbaSetRemaining">' + xofy + "</div>"
            }
            else
                if(setPage.questionsUnanswered == 0)
                    s += '<div class="sbaSetRemaining">' + Resources.SBA_Remaining0_Text + "</div>";
                else
                    s += '<div class="sbaSetRemaining">' + Resources.SBA_RemainingMore_Text.replace(/%%number%%/g,setPage.questionsUnanswered) + "</div>";
            var questionCount = currentPage.privatePages[i].privatePages[currentPage.privatePages[i].assessmentSelected].Assessment.countQuestions();
            s += '<div class="sbaSetComplete">' + (questionCount - setPage.questionsUnanswered) + "/" + questionCount + "</div>";
            s += '<div class="sbaSetCompleteWord">' + Resources.Assessment_Status_Tile_QuestionsComplete_Text + "</div>";
            switch(setPage.assessmentStatus)
            {
                case AssessmentStatus.NotAttempted:
                    if(setPage.sbaIsLocked)
                        s += '<div class="sbaSetActionLocked">' + Resources.SBA_ActionBegin_Text + "</div>";
                    else
                        s += '<div class="sbaSetActionBegin">' + Resources.SBA_ActionBegin_Text + "</div>";
                    break;
                case AssessmentStatus.Incomplete:
                    s += '<div class="sbaSetActionResume">' + Resources.SBA_ActionResume_Text + "</div>";
                    break;
                case AssessmentStatus.Passed:
                case AssessmentStatus.Failed:
                    s += '<div class="sbaSetActionReview">' + Resources.SBA_ActionReview_Text + "</div>"
            }
            s += "</a>"
        }
        s += "</div></div>";
        currentPage.sbaWin.document.getElementById("SBA").innerHTML = s
    },showScenarioBasedAssessment:function(win,set)
    {
        var currentPage = course.getCurrentPage();
        if(currentPage.privatePages[set].sbaIsLocked)
            this.course.observer.fire("notifySbaLinear",null);
        else
        {
            var selectedAssessment = currentPage.privatePages[set].privatePages[currentPage.privatePages[set].assessmentSelected].Assessment;
            selectedAssessment.sbaSelectedSet = set;
            this.showContentPopup(currentPage.privatePages[set].privatePages[currentPage.privatePages[set].assessmentSelected],this.updateSbaStatusClosed)
        }
    },getQuestionFromId:function(id)
    {
        for(var i = 0; i < course.objectives.length; i++)
            for(var j = 0; j < course.objectives[i].Questions.length; j++)
                if(course.objectives[i].Questions[j].Id == id)
                    return course.objectives[i].Questions[j];
        return null
    },markPageComplete:function()
    {
        course.getCurrentPage().setComplete()
    },getPageNameFromId:function(id)
    {
        var pageName = null;
        course.recursePageTreeFn(function(page)
        {
            if(page.id == id)
                pageName = page.name
        });
        pageName == null && 
            course.recursePagesFn(courseModel.privatePages,function(page)
            {
                if(page.id == id)
                    pageName = page.name
            },1);
        return pageName
    },getPageFromId:function(id)
    {
        var pageFound = null;
        course.recursePageTreeFn(function(page)
        {
            if(page.id == id)
                pageFound = page
        });
        !pageFound && 
            course.recursePagesFn(courseModel.privatePages,function(page)
            {
                if(page.id == id)
                    pageFound = page
            },1);
        return pageFound
    },showPageLinks:function()
    {
        try
        {
            for(var s = "",
                id = course.getCurrentPage().id,
                i = 0; i < course.PageLinkArray.length; i++)
                if(course.PageLinkArray[i].id == id)
                {
                    var sFileName = course.PageLinkArray[i].source;
                    if(course.PageLinkArray[i].type == "File")
                        if(sFileName.substring(0,10) != "Resources/")
                            sFileName = "../Resources/" + sFileName;
                        else
                            sFileName = "../" + sFileName;
                    s += '<tr><td><a href="' + sFileName + '" target="_blank" title="' + course.PageLinkArray[i].description + '">' + course.PageLinkArray[i].name + "</a></td></tr>"
                }
            if(s != "")
                s = '<table class="PageResources"><caption>' + parent.Resources.ResourcesTable_Caption_Text + "</caption>" + s + "</table>";
            return s
        }
        catch(e)
        {
            return""
        }
    },getTestOutTile:function(styleColor,styleSize)
    {
        if(course.testOutPage)
        {
            var s = '<a class="WelcomeTestOutTile ' + styleColor + " " + styleSize + '" href="#" onclick="parent.player.courseController.navigateToTestOut(); return false;"><div class="WelcomeTestOutTileTitle">' + Resources.Welcome_TestOut_Title_Text + "</div>";
            s += '<div class="WelcomeTestOutTileBody">' + Resources.Welcome_TestOutNonAdaptive_Info_Html + "</div></a>";
            return s
        }
        else
            return""
    },getShowTranscriptTile:function(styleColor,styleSize,location)
    {
        var s = "";
        if(courseModel.settings.CourseTranscript)
        {
            s += '<a class="CourseTranscriptTile ' + styleColor + " " + styleSize + '" href="#" onclick="parent.player.courseController.showCourseTranscript(' + location + '); return false;">';
            s += '<div class="CourseTranscriptTileLine1">' + Resources.CourseTranscriptTile_Line1_Text + "</div>";
            s += '<div class="CourseTranscriptTileLine2">' + Resources.CourseTranscriptTile_Line2_Text + "</div>";
            s += '<div class="CourseTranscriptTileLine3">' + Resources.CourseTranscriptTile_Line3_Text + "</div>";
            s += "</a>"
        }
        return s
    },getProgressTile:function(styleColor,styleSize)
    {
        var s = '<div class="ContentsProgressBox ' + styleColor + " " + styleSize + '">';
        if(this.course.scormState.isComplete)
            var nPercent = 100;
        else
        {
            var nTotal = 0,
                nComplete = 0;
            this.course.recursePageTreeFn(function(page)
            {
                if(page.contribute == "r" && !page.pageState.isOptional && !page.isModule)
                {
                    nTotal++;
                    if(page.isComplete())
                        nComplete++
                }
            });
            var nPercent = Math.round(100 * nComplete / nTotal)
        }
        s += '<div class="ContentsProgressComplete">' + nPercent + "%</div>";
        s += '<div class="ContentsProgressCompleteWord">' + Resources.Contents_Module_Complete_Text + "</div>";
        var nextPage = this.course.getNextRequiredPage();
        if(nextPage)
            s += '<div class="ContentsProgressNext">' + Resources.NavigationBar_WhatsNext_Text.replace("%%pageName%%",nextPage.name) + "</div>";
        s += '<div class="ContentsProgressMyProgress">' + Resources.Contents_MyProgress_Text + "</div>";
        s += "</div>";
        return s
    },getStartButton:function(styleColor,styleSize)
    {
        var s = '<a class="WelcomeStartButtonTile ' + styleColor + " " + styleSize + '" href="#" onclick="parent.player.courseController.navigateToNextPage(); return false;" title="' + Resources.NavigationBar_NextPage_Button_Title + '">';
        s += '<span class="WelcomeStartButtonTileButton ' + styleSize + '" /></a>';
        return s
    },termScormCommunications:function()
    {
        if(!courseModel.scormState.ScormTerminated)
        {
            var currentPage = courseModel.getCurrentPage();
            currentPage && 
                currentPage.unload();
            courseModel.recordPathmark();
            setSessionTime(_timeSessionStart);
            courseModel.scormState.setState("USROPT",courseModel.volume + "," + Number(courseModel.settings.ShowOptionalContent) + "," + Number(courseModel.settings.TOCCollapsed) + "," + courseModel.settings.VideoPlaybackRate + "," + Number(courseModel.settings.ShowVideoCaptions) + "," + courseModel.settings.VideoQuality);
            courseModel.scormState.save();
            if(!courseModel.language.reloading)
            {
                termCommunications();
                courseModel.scormState.ScormTerminated = true
            }
        }
    },isLMSFree:function()
    {
        return $("iframe[name=OnlineLauncher]",parent.document).length ? true : false
    },isDownloadable:function()
    {
        if(this.course.settings.Downloadable)
        {
            var sDownload = this.course.scormState.getState("DOWNLOAD");
            if(sDownload != "")
            {
                var aDownload = sDownload.split(",");
                if(aDownload[0] == "1")
                    return true
            }
        }
        return false
    },isDownloaded:function()
    {
        var sDownload = this.course.scormState.getState("DOWNLOAD");
        if(sDownload != "")
        {
            var aDownload = sDownload.split(",");
            if(aDownload[1] == "1")
                return true
        }
        return false
    },isOnline:function()
    {
        return location.protocol == "http:" || location.protocol == "https:"
    },downloadCourse:function(nType)
    {
        courseController.confirm(Resources.DownloadCourse_Confirm_Text,courseController.downloadCourseConfirmed,nType)
    },downloadCourseConfirmed:function(nType)
    {
        try
        {
            var oCtl = new ActiveXObject("OfflinePlayerControl.Base"),
                sLMS = getLmsName(),
                bPlayerInstalled = oCtl.CheckPlayer(sLMS),
                bCourseInstalled = oCtl.CheckCourse(sLMS,getCbtPathId())
        }
        catch(e)
        {
            var oCtl = null
        }
        var sCbtPathId = getCbtPathId(),
            sUserId = courseController.getUserId();
        sArgs = getLaunchArgs();
        sArgs = encodeURIComponent(sArgs);
        var sDownload = courseController.course.scormState.getState("DOWNLOAD"),
            aDownload = sDownload.split(",");
        aDownload[5] = "1";
        courseController.course.scormState.setState("DOWNLOAD",aDownload.join(","));
        if(oCtl != null && bPlayerInstalled)
        {
            var callbackFunction;
            if(nType == 3)
                callbackFunction = "relaunchCourse";
            else
                callbackFunction = "launchOfflineContinue";
            frames.ServerResponse.location.replace(_sOpInit + "?cbtpathid=" + sCbtPathId + "&userid=" + sUserId + "&launchargs=" + sArgs + "&returnCall=" + callbackFunction + "&fileres=" + nType)
        }
        else
        {
            if(nType == 3)
                nType = "undefined";
            frames.ServerResponse.location.replace(_sOpInit + "?cbtpathid=" + sCbtPathId + "&userid=" + sUserId + "&launchargs=" + sArgs + "&returnCall=downloadPlayerContinue&fileres=" + nType)
        }
    },forceOnline:function()
    {
        var sCbtPathId = getCbtPathId(),
            sUserId = this.getUserId();
        sArgs = getLaunchArgs();
        sArgs = encodeURIComponent(sArgs);
        var sDownload = this.course.scormState.getState("DOWNLOAD"),
            aDownload = sDownload.split(",");
        aDownload[5] = "1";
        this.course.scormState.setState("DOWNLOAD",aDownload.join(","));
        var nType = 3;
        callbackFunction = "relaunchCourse";
        frames.ServerResponse.location.replace(_sOpInit + "?cbtpathid=" + sCbtPathId + "&userid=" + sUserId + "&launchargs=" + sArgs + "&returnCall=" + callbackFunction + "&fileres=" + nType)
    },getUserId:function()
    {
        if(_sAPI == "API_1484_11")
            var sID = scormGetValue("cmi.learner_id");
        else
            var sID = scormGetValue("cmi.core.student_id");
        return sID
    },alert:function(message)
    {
        player.notifyUserView.notify(message)
    },confirm:function(message,callback,param)
    {
        player.confirmUserView.confirm(message,callback,param)
    },showVideo:function(videoFileName,htmlElementId,context,observer,positionStateKey)
    {
        if(!videoFileName)
            return;
        var iframe = $('<iframe src="../../../VideoPage.htm" width="100%" height="100%" frameborder="0" >').load(function()
            {
                if(!this.src.match(/VideoPage.htm$/i))
                    return;
                var vid = new VideoController(this.contentWindow,courseController),
                    pageDisplayed = courseController.course.currentPopupPageId ? course.getPageById(courseController.course.currentPopupPageId) : course.getCurrentPage();
                if(pageDisplayed.pageType.PlaybackSource === "Branching" && pageDisplayed.BranchingGraph)
                {
                    var branchingPoint = pageDisplayed.BranchingGraph.getCurrentLocation(),
                        contentPageId = "";
                    if(branchingPoint)
                    {
                        if(branchingPoint.location === 0)
                            contentPageId = branchingPoint.contentPageId;
                        else
                            if(branchingPoint.location === 3 && branchingPoint.currentAttempt)
                                contentPageId = branchingPoint.currentAttempt.getFeedbackPageId();
                            else
                                if(branchingPoint.selectedFeedbackPageId)
                                    contentPageId = branchingPoint.selectedFeedbackPageId;
                        pageDisplayed = course.getPageById(contentPageId) || pageDisplayed
                    }
                }
                vid.page = pageDisplayed;
                vid.context = context;
                vid.observer = observer;
                if(positionStateKey || positionStateKey === "")
                    vid.positionStateKey = positionStateKey;
                vid.videoFile = pageDisplayed.getVideo(videoFileName);
                if(!vid.videoFile)
                    vid.videoFile = new MediaFile(course,"");
                vid.volume = course.volume;
                vid.keyPointsFilePath = pageDisplayed.getKeyPointsPath(vid.videoFile.FileName);
                vid.readyToPlay();
                observer && observer.fire("mediaLoaded",vid,context)
            });
        htmlElementId && 
            $("iframe").each(function()
            {
                if($(this).contents().find("#" + htmlElementId).length)
                {
                    $(this).contents().find("#" + htmlElementId).append(iframe);
                    return false
                }
            })
    },setVideoDisplay:function(videoWindow,isFullScreen)
    {
        if(videoWindow)
        {
            var w = videoWindow;
            while(w != window && w.frameElement)
            {
                if(isFullScreen)
                {
                    $(w.frameElement).addClass("fullscreen");
                    $("html",w.document).addClass("fullscreen")
                }
                else
                {
                    $(w.frameElement).removeClass("fullscreen");
                    $("html",w.document).removeClass("fullscreen")
                }
                w = w.parent
            }
        }
    },countRemainingRequiredPages:function(includeCurrentPage)
    {
        var currentPage = courseModel.getCurrentPage(),
            remaining = 0;
        courseModel.recursePageTreeFn(function(page,nCurrentLevel)
        {
            if(nCurrentLevel > 1 && page.isRequired() && !page.isComplete() && (page !== currentPage || includeCurrentPage))
                remaining++
        });
        return remaining
    },showCaptions:function(html)
    {
        if(this.contentPopupView && this.contentPopupView.getCurrentPage())
            $("#ContentsPopupCaptionsContainer").html(html);
        else
            $("#CaptionsContainer").html(html)
    },course:courseModel,navigationSuccess:false}
}
function VideoController(iframeWindow,courseController)
{
    this.page = null;
    this.context = null;
    this.observer = null;
    this.positionStateKey = "_video";
    this.videoFile = null;
    this.keyPointsFilePath = "";
    this.hasKeypoints = false;
    this.keyPointsArray = [];
    this.iframeWindow = iframeWindow;
    this.courseController = courseController;
    this.volume = 50;
    this.videoPosition = "";
    this.endedEventReceived = false;
    this.retry = 0;
    this.canSetQuality = true;
    var vc = this;
    this.readyToPlay = function()
    {
        this.endedEventReceived = false;
        if(this.page && this.positionStateKey)
            this.videoPosition = parseFloat(courseController.course.scormState.getState(this.page.id + this.positionStateKey));
        $.ajax({type:"GET",url:vc.keyPointsFilePath,dataType:"XML",error:function()
        {
            vc.hasKeypoints = false;
            vc.iframeWindow.videoView(vc);
            courseController.course.settings.VideoFullScreen && 
                vc.setVideoDisplay(true)
        },success:function(xml)
        {
            vc.hasKeypoints = true;
            try
            {
                var scriptCommandsElem = $(xml).find("ScriptCommands");
                scriptCommandsElem && 
                    $(scriptCommandsElem).children("ScriptCommand").each(function()
                    {
                        for(var scriptCommandElem = $(this),
                            newKeyPoint = new KeyPoint,
                            command = scriptCommandElem.attr("Command"),
                            aCommand = command.split("|"),
                            i = 0; i < aCommand.length; i++)
                            if(aCommand[i].length > 2)
                                aCommand[i] = aCommand[i].substring(1,aCommand[i].length - 1);
                            else
                                aCommand[i] = "";
                        newKeyPoint.timeStart = vc.charTimeToSeconds(scriptCommandElem.attr("Time"));
                        newKeyPoint.timeEnd = newKeyPoint.timeStart + vc.charTimeToSeconds(aCommand[1]);
                        newKeyPoint.text = aCommand[0];
                        newKeyPoint.type = newKeyPoint.text.length > 0 ? "text" : "image";
                        newKeyPoint.imageFile = aCommand[3];
                        var r = parseInt(aCommand[2].substr(3,2),16),
                            g = parseInt(aCommand[2].substr(5,2),16),
                            b = parseInt(aCommand[2].substr(7,2),16),
                            a = parseInt(aCommand[2].substr(1,2),16) / 256;
                        newKeyPoint.backgroundColor = "rgba(" + r + ", " + g + ", " + b + ", " + a + ")";
                        newKeyPoint.position = aCommand[4];
                        vc.keyPointsArray.push(newKeyPoint)
                    })
            }
            catch(e)
            {
            }
            vc.hasKeypoints = vc.keyPointsArray.length > 0;
            vc.iframeWindow.videoView(vc);
            courseController.course.settings.VideoFullScreen && 
                vc.setVideoDisplay(true)
        }})
    };
    this.charTimeToSeconds = function(charTime)
    {
        var aParts = charTime.split(":");
        return aParts[0] * 24 * 60 + aParts[1] * 60 + (aParts[2] - 0)
    }
}
VideoController.prototype.setVideoDisplay = function(isFullScreen)
{
    this.iframeWindow && 
        this.courseController.setVideoDisplay(this.iframeWindow,isFullScreen)
};
VideoController.prototype.play = function()
{
    this.iframeWindow && this.iframeWindow.myPlayer && this.iframeWindow.myPlayer.paused() && this.iframeWindow.myPlayer.play()
};
VideoController.prototype.togglePlay = function()
{
    if(this.iframeWindow && this.iframeWindow.myPlayer)
        if(this.iframeWindow.myPlayer.paused())
            this.iframeWindow.myPlayer.play();
        else
            this.iframeWindow.myPlayer.pause()
};
VideoController.prototype.videoStarted = function()
{
    this.courseController.activeVideoController = this;
    this.observer && 
        this.observer.fire("mediaStarted",this.videoFile,this.context)
};
VideoController.prototype.videoStopped = function()
{
    this.observer && 
        this.observer.fire("mediaStopped",this.videoFile,this.context)
};
VideoController.prototype.videoEnded = function()
{
    this.endedEventReceived = true;
    this.setVideoDisplay(false);
    this.videoPosition = "";
    if(this.page && this.positionStateKey)
    {
        var s = 'courseController.course.scormState.setState("' + this.page.id + this.positionStateKey + '","")';
        setTimeout(s,1)
    }
    if(this.observer)
        this.observer.fire("mediaEnded",this.videoFile,this.context);
    else
    {
        if(this.videoFile.mustPlayAll)
            this.page != null && 
                this.page.setComplete();
        if(this.videoFile.videoAutoNavigate)
            (this.page == null || this.courseController.course.getCurrentPage() === this.page) && 
                this.courseController.navigateToNextPage()
    }
};
VideoController.prototype.timeChanged = function(newTime)
{
    this.videoPosition = newTime;
    this.observer && 
        this.observer.fire("timeupdate",newTime);
    if(this.page != null)
        if(!this.endedEventReceived)
            if(this.positionStateKey)
            {
                var s = 'courseController.course.scormState.setState("' + this.page.id + this.positionStateKey + '",' + newTime + ")";
                setTimeout(s,1)
            }
};
VideoController.prototype.volumeChanged = function(newVolume)
{
    this.volume = newVolume;
    this.courseController.volumeChanged(newVolume)
};
VideoController.prototype.getManifestItem = function()
{
    var videoManifestItem = null;
    if(this.courseController.course.settings.errorOnVideoRetry)
    {
        this.courseController.course.settings.errorOnVideoRetry = false;
        videoManifestItem = this.courseController.course.mediaManifest.getFirstRequiredVideoItem()
    }
    else
        if(window.CheckRGHosted && CheckRGHosted())
            videoManifestItem = this.courseController.course.mediaManifest.getMpgVideoItemByUiLabel(this.courseController.course.settings.VideoQuality);
        else
            if(this.courseController.course.inOfflinePlayer())
                videoManifestItem = this.courseController.course.mediaManifest.getMpgVideoItemByUiLabel("Standard");
            else
                if(!common.isSilverlightInstalled())
                    videoManifestItem = this.courseController.course.mediaManifest.getMpgVideoItemByUiLabel(this.courseController.course.settings.VideoQuality);
                else
                    if(this.courseController.course.mediaManifest.getVideoItemByPlayerType("Streaming"))
                    {
                        this.canSetQuality = false;
                        videoManifestItem = this.courseController.course.mediaManifest.getVideoItemByPlayerType("Streaming")
                    }
                    else
                        if(this.courseController.course.mediaManifest.getVideoItemByPlayerType("WMV"))
                        {
                            this.canSetQuality = false;
                            videoManifestItem = this.courseController.course.mediaManifest.getVideoItemByPlayerType("WMV")
                        }
                        else
                            videoManifestItem = this.courseController.course.mediaManifest.getMpgVideoItemByUiLabel(this.courseController.course.settings.VideoQuality);
    return videoManifestItem
};
VideoController.prototype.getDownloadableManifestItem = function()
{
    return this.courseController.course.mediaManifest.getFirstDownloadableVideoItem()
};
VideoController.prototype.getAvailableVideoQualities = function()
{
    return this.courseController.course.mediaManifest.getVideoUiLabels()
};
function Course()
{
    this.pageTree = [];
    this.privatePages = [];
    this.pageNavigation = [];
    this.modules = [];
    this.pageTypesArray = [];
    this.currentPageIndex = 0;
    this.currentPopupPageId = null;
    this.PageLinkArray = [];
    this.name = "";
    this.buildId = "";
    this.isFirstLaunch = true;
    this.language = new Language;
    this.settings = new Settings;
    this.scormState = new ScormState(this);
    this.observer = new Observer;
    this.testOutPage = null;
    this.Assessments = [];
    this.tracks = new Tracks;
    this.mediaManifest = new MediaManifest;
    this.objectives = [];
    this.volume = 75;
    this.version = "8.123";
    this.navigationStarted = false;
    var that = this,
        ajaxQueue = function(step,callback)
        {
            switch(step)
            {
                case 0:
                    $.ajax({type:"GET",url:"Types/Pages/PageTypes.xml",dataType:"XML",complete:function()
                    {
                        ajaxQueue(1,callback)
                    },success:function(pageTypesXml)
                    {
                        CourseParser.parsePageTypesXml(pageTypesXml,that)
                    }});
                    break;
                case 1:
                    $.ajax({type:"GET",url:that.language.code + "/objectives.xml",dataType:"XML",complete:function()
                    {
                        ajaxQueue(2,callback)
                    },success:function(objectivesXml)
                    {
                        CourseParser.parseObjectivesXml(objectivesXml,that)
                    }});
                    break;
                case 2:
                    $.ajax({type:"GET",url:that.language.code + "/pages.xml",dataType:"XML",complete:function()
                    {
                        ajaxQueue(3,callback)
                    },success:function(pagesXml)
                    {
                        CourseParser.parsePagesXml(pagesXml,that);
                        that.restoreState()
                    }});
                    break;
                case 3:
                    $.ajax({type:"GET",url:that.language.code + "/test-out.xml",dataType:"XML",complete:function()
                    {
                        ajaxQueue(4,callback)
                    },success:function(testOutXml)
                    {
                        var testOutPage = new TestOutPage;
                        testOutPage.name = "Test-out";
                        testOutPage.pageType.PlaybackSource = "KnowledgeCheck";
                        testOutPage.pageType.canSendCompletion = true;
                        var testOutAssessment = CourseParser.parseAssessmentXml(testOutXml,that,testOutPage);
                        if(testOutAssessment && testOutAssessment.isTestOut())
                        {
                            testOutAssessment.Type = "Test-out";
                            testOutPage.Assessment = testOutAssessment;
                            testOutPage.course = that;
                            that.testOutPage = testOutPage;
                            that.settings.ShowTestedOutContent = testOutAssessment.ShowTestedOutContent;
                            if(that.settings.UserCanToggleOptional)
                                if(!that.settings.ShowTestedOutContent)
                                    that.settings.ShowOptionalContent = false
                        }
                    }});
                    break;
                case 4:
                    $.ajax({type:"GET",url:that.language.code + "/tracks.xml",dataType:"XML",complete:function()
                    {
                        ajaxQueue(5,callback)
                    },success:function(tracksXml)
                    {
                        CourseParser.parseTracksXml(tracksXml,that)
                    }});
                    break;
                case 5:
                    $.ajax({type:"GET",url:that.language.code + "/pageLinks.xml",dataType:"XML",complete:function()
                    {
                        ajaxQueue(6,callback)
                    },success:function(xml)
                    {
                        CourseParser.parsePageLinksXml(xml,that)
                    }});
                    break;
                case 6:
                    $.ajax({type:"GET",url:that.language.code + "/resources.xml",dataType:"XML",complete:function()
                    {
                        that.loadPageNavigation();
                        callback()
                    },success:function(resourcesXml)
                    {
                        CourseParser.parseResourcesXml(resourcesXml)
                    }});
                    break;
                case 7:
                    $.ajax({type:"GET",url:"mediaManifest.xml",dataType:"XML",success:function(mediaManifestXml)
                    {
                        CourseParser.parseMediaManifest(mediaManifestXml,that)
                    }})
            }
        };
    this.load = function(callback)
    {
        try
        {
            var aX = new window.ActiveXObject("Microsoft.XMLHTTP")
        }
        catch(e)
        {
            var aX = null
        }
        if(aX)
        {
            function createActiveXHR()
            {
                try
                {
                    return new window.ActiveXObject("Microsoft.XMLHTTP")
                }
                catch(e)
                {
                }
            }
            $.ajaxSetup({xhr:createActiveXHR})
        }
        this.scormState.load();
        this.language.init();
        var sUserOptions = this.scormState.getState("USROPT");
        if(sUserOptions)
        {
            var aUserOptions = sUserOptions.split(",");
            this.volume = aUserOptions[0] - 0;
            this.settings.ShowOptionalContent = Boolean(aUserOptions[1] - 0);
            this.settings.TOCCollapsed = Boolean(aUserOptions[2] - 0);
            this.settings.VideoPlaybackRate = aUserOptions[3] - 0;
            this.settings.ShowVideoCaptions = Boolean(aUserOptions[4] - 0);
            this.settings.VideoQuality = aUserOptions[5]
        }
        ajaxQueue(7);
        ajaxQueue(0,callback)
    }
}
Course.prototype.getObjective = function(id)
{
    for(obj in this.objectives)
        if(this.objectives[obj].Id == id)
            return this.objectives[obj];
    return null
};
Course.prototype.restoreState = function()
{
    var sPathMark = this.scormState.getState("PATHMARK");
    if(sPathMark)
    {
        var aPathMark = sPathMark.split(":"),
            nIndex = 0;
        this.recursePageTreeFn(function(page)
        {
            var aParts = aPathMark[nIndex].split(",");
            page.pageState.status = aParts[0];
            page.pageState.isVisited = aParts[1] = "1";
            nIndex++
        })
    }
    sPathMark = this.scormState.getState("PRIVATEMARK");
    if(sPathMark)
    {
        var aPathMark = sPathMark.split(":"),
            nIndex = 0;
        this.recursePrivatePageTreeFn(function(page)
        {
            var aParts = aPathMark[nIndex].split(",");
            page.pageState.status = aParts[0];
            page.pageState.isVisited = aParts[1] = "1";
            nIndex++
        })
    }
};
Course.prototype.checkCompletion = function(currentPage)
{
    if(!this.scormState.isComplete)
    {
        var bCourseComplete = true,
            passFail = "",
            score = null,
            bCourseCompleteByAssessment = false,
            bCourseCompleteByTestOutAssessment = false;
        if(currentPage.Assessment && currentPage.Assessment.CompletesCourse)
            if(currentPage.Assessment.Status == AssessmentStatus.Passed)
            {
                passFail = "passed";
                score = currentPage.Assessment.getScore();
                bCourseCompleteByAssessment = true;
                bCourseCompleteByTestOutAssessment = currentPage.Assessment.isTestOut()
            }
            else
                if(currentPage.Assessment.Status == AssessmentStatus.Failed)
                    if(!currentPage.Assessment.isTestOut() && !currentPage.Assessment.hasAttemptsLeft())
                    {
                        passFail = "failed";
                        score = currentPage.Assessment.getScore();
                        bCourseCompleteByAssessment = true
                    }
        for(var i = 0; i < this.modules.length; i++)
        {
            var bModuleComplete = true;
            this.recursePagesFn(this.modules[i].pages,function(page)
            {
                if(page.contribute == "r" && !page.pageState.isOptional)
                    if(!page.isComplete())
                        bModuleComplete = false
            },1);
            if(bModuleComplete)
            {
                if(!this.modules[i].pageState.isOptional && !this.modules[i].isComplete())
                {
                    setObjective(null,"Module" + (i + 1),"completed",null,null,null,null);
                    this.modules[i].pageState.isVisited = true;
                    this.modules[i].setComplete(true)
                }
            }
            else
                bCourseComplete = false
        }
        if(bCourseCompleteByAssessment || bCourseComplete)
        {
            this.scormState.setCompletionStatus("completed");
            passFail && 
                this.scormState.setPassFail(passFail);
            score != null && 
                this.scormState.setScore(score);
            this.observer.fire("courseCompleted",bCourseCompleteByTestOutAssessment)
        }
    }
};
Course.prototype.loadPageNavigation = function()
{
    var sTracks = this.scormState.getState("TRACKS");
    if(sTracks)
    {
        var aParts = sTracks.split(",");
        aParts.length > this.tracks.items.length && 
            courseController.alert("The data for the tracks cannot be restored correctly. See if all of the different language versions of this course has the same tracks data.");
        for(var i = 0; i < this.tracks.items.length; i++)
            this.tracks.items[i].state.isSelected = false;
        for(var i = 0; i < aParts.length; i++)
        {
            var index = aParts[i] - 1;
            this.tracks.items[index].state.isSelected = true
        }
    }
    var sObjectives = this.scormState.getState("OBJ");
    if(sObjectives != "")
        for(var aObjectives = sObjectives.split(","),
            i = 0; i < aObjectives.length; i++)
            for(var j = 0; j < this.objectives.length; j++)
                if(this.objectives[j].Id == aObjectives[i])
                    this.objectives[j].Complete = true;
    this.updateNavigationForTracks();
    this.updateForObjectives();
    var currentViewedPage = null;
    if(this.pageNavigation.length > 0)
        currentViewedPage = this.pageNavigation[course.currentPageIndex];
    this.pageNavigation = [];
    this.currentPageIndex = -1;
    var that = this;
    this.testOutPage && 
        this.pageNavigation.push(this.testOutPage);
    var welcomePage = new WelcomePage;
    welcomePage.course = this;
    this.pageNavigation.push(welcomePage);
    if(this.testOutPage)
        this.testOutPage.navNext = welcomePage;
    this.recursePageTreeFn(function(page,nCurrentLevel)
    {
        if(nCurrentLevel > 1)
            if(page.isRequired())
            {
                that.pageNavigation.push(page);
                page.navNext = null;
                if(that.pageNavigation.length > 0)
                {
                    that.pageNavigation[course.pageNavigation.length - 2].navNext = page;
                    page.navPrevious = that.pageNavigation[course.pageNavigation.length - 2]
                }
                else
                    page.navPrevious = null
            }
    });
    if(currentViewedPage == null)
        if(this.testOutPage)
            this.currentPageIndex = 1;
        else
            this.currentPageIndex = 0;
    else
    {
        for(var i = 0; i < this.pageNavigation.length; i++)
            if(currentViewedPage.id == this.pageNavigation[i].id)
            {
                this.currentPageIndex = i;
                break
            }
        if(this.currentPageIndex == -1)
        {
            this.currentPageIndex = 0;
            courseController.navigateToWelcomePage()
        }
        this.navigateToPage(this.currentPageIndex)
    }
    this.updateLockedModules();
    this.observer.fire("pageNavigationLoaded")
};
Course.prototype.updateLockedModules = function()
{
    for(var i = 0; i < this.modules.length; i++)
    {
        this.modules[i].pageState.isLocked = false;
        if(this.modules[i].mustCompletePrevModules)
            for(var aParts = this.modules[i].modulesToComplete.split(","),
                j = 0; j < aParts.length; j++)
            {
                var moduleIndex = aParts[j] - 1;
                if(!this.modules[moduleIndex].pageState.isOptional && !this.modules[moduleIndex].isComplete())
                {
                    this.modules[i].pageState.isLocked = true;
                    break
                }
            }
    }
};
Course.prototype.getCurrentLanguageFolderPath = function()
{
    return this.language.code + "/"
};
Course.prototype.getContentFolderPath = function()
{
    return this.getCurrentLanguageFolderPath() + "Content/"
};
Course.prototype.getMediaFolderPath = function()
{
    if(!this.inOfflinePlayer())
        if(this.settings.MediaLocation == "Server" && courseController.isOnline())
            return this.settings.MediaURL;
    return"Media/"
};
Course.prototype.getImagesFolderPath = function()
{
    return this.getContentFolderPath() + "Images/"
};
Course.prototype.getPopupsFolderPath = function()
{
    return this.getContentFolderPath() + "Popups/"
};
Course.prototype.getCurrentPage = function()
{
    return this.pageNavigation[this.currentPageIndex]
};
Course.prototype.inOfflinePlayer = function()
{
    return parent.g_Courseid ? true : opener && opener.parent.g_Courseid ? true : false
};
Course.prototype.getNextRequiredPage = function()
{
    if(courseController.nextPageIndex > 0)
        return this.pageNavigation[courseController.nextPageIndex];
    var currentPage = this.getCurrentPage();
    return currentPage && currentPage.navNext ? currentPage.navNext : null
};
Course.prototype.getNextRequiredModule = function()
{
    for(var currentModule = this.getCurrentPage().getModule(),
        i = 0; i < this.modules.length; i++)
        if(this.modules[i] == currentModule)
        {
            for(var j = i + 1; j < this.modules.length; j++)
                if(!this.modules[j].pageState.isOptional)
                    return this.modules[j];
            return null
        }
    for(var i = 0; i < this.modules.length; i++)
        if(!this.modules[i].pageState.isOptional)
            return this.modules[j];
    return null
};
Course.prototype.getPageById = function(id)
{
    for(var page = null,
        i = 0; i < this.pageNavigation.length; i++)
        if(id == this.pageNavigation[i].id)
        {
            page = this.pageNavigation[i];
            break
        }
    if(!page)
        for(i = 0; i < this.privatePages.length; i++)
            if(id == this.privatePages[i].id)
            {
                page = this.privatePages[i];
                break
            }
    return page
};
Course.prototype.navigateToNextPage = function()
{
    this.navigateToPage(this.currentPageIndex + 1)
};
Course.prototype.navigateToPreviousPage = function()
{
    this.navigateToPage(this.currentPageIndex - 1)
};
Course.prototype.navigateToPage = function(index)
{
    var page = this.pageNavigation[index];
    this.navigateToPageByPage(page,index)
};
Course.prototype.navigateToPageById = function(id)
{
    for(var page = null,
        index = 0,
        i = 0; i < this.pageNavigation.length; i++)
        if(id == this.pageNavigation[i].id)
        {
            page = this.pageNavigation[i];
            index = i;
            break
        }
    courseController.nextPageIndex = 0;
    this.navigateToPageByPage(page,index)
};
var _NavAwayFromTestOut = false;
Course.prototype.navigateToPageByPage = function(page,index)
{
    courseController.navigationSuccess = false;
    if(page)
    {
        if(this.pageNavigation[this.currentPageIndex].isTestOut())
            if(!this.pageNavigation[this.currentPageIndex].Assessment.isCompleted() && !_NavAwayFromTestOut)
            {
                courseController.confirm(Resources.Navigation_LeaveTestOut_Text,$.proxy(this.navigateToPage,this),index);
                _NavAwayFromTestOut = true;
                return
            }
            else
                _NavAwayFromTestOut = false;
        var targetPageModule = page.getModule(),
            currentPageModule = this.pageNavigation[this.currentPageIndex].getModule();
        if(targetPageModule == currentPageModule)
        {
            if(targetPageModule.mustCompleteRequiredPages)
                if(index > this.currentPageIndex)
                    if(this.pageNavigation[this.currentPageIndex].isComplete())
                    {
                        for(var i = this.currentPageIndex; i < index; i++)
                            if(this.pageNavigation[i].contribute == "r" && !this.pageNavigation[i].pageState.isOptional && !this.pageNavigation[i].isComplete())
                            {
                                this.observer.fire("notifyNavigateLinearRequired",page);
                                return
                            }
                    }
                    else
                    {
                        this.observer.fire("notifyNavigateLinearRequiredComplete",this.pageNavigation[this.currentPageIndex]);
                        return
                    }
        }
        else
            if(targetPageModule.pageState.isLocked)
            {
                this.observer.fire("notifyNavigateModuleLocked",targetPageModule);
                return
            }
            else
                if(targetPageModule.mustCompleteRequiredPages)
                    if(!page.pageState.isVisited)
                        for(i = index - 1; i > -1; i--)
                        {
                            var backPage = this.pageNavigation[i],
                                backPageModule = backPage.getModule();
                            if(backPageModule == targetPageModule)
                            {
                                if(this.pageNavigation[i].contribute == "r" && !backPage.pageState.isOptional && !backPage.isComplete())
                                {
                                    this.observer.fire("notifyNavigateLinearRequired",page);
                                    return
                                }
                            }
                            else
                                break
                        }
        this.currentPageIndex = index;
        this.observer.fire("navigatedToPage",page);
        page.pageState.isVisited = true;
        if(page.canSendCompletion() && !page.isComplete() && page.isRequired())
            page.setIncomplete();
        else
            page.setComplete();
        !targetPageModule.isComplete() && 
            targetPageModule.setIncomplete();
        this.scormState.save();
        courseController.navigationSuccess = true
    }
};
Course.prototype.recordPathmark = function()
{
    var sPathMark = "";
    this.recursePageTreeFn(function(page)
    {
        if(sPathMark != "")
            sPathMark += ":";
        sPathMark += page.pageState.status + "," + (page.pageState.isVisited ? "1" : "0")
    });
    this.scormState.setState("PATHMARK",sPathMark);
    sPathMark = "";
    this.recursePrivatePageTreeFn(function(page)
    {
        if(sPathMark != "")
            sPathMark += ":";
        sPathMark += page.pageState.status + "," + (page.pageState.isVisited ? "1" : "0")
    });
    this.scormState.setState("PRIVATEMARK",sPathMark)
};
Course.prototype.updateNavigationForTracks = function()
{
    if(this.tracks.mapType == "Modules")
    {
        this.recursePageTreeFn(function(page)
        {
            var pageState = page.pageState;
            pageState.isOptionalByTrackSelection = false;
            pageState.isOptional = pageState.isOptionalByTrackSelection || pageState.isOptionalByAuthor || pageState.isOptionalByObjectiveCompletion
        });
        for(var i = 0; i < this.tracks.items.length; i++)
            if(!this.tracks.items[i].state.isSelected)
            {
                var aModules = this.tracks.items[i].modules.split(",");
                for(j = 0; j < aModules.length; j++)
                {
                    var nIndex = aModules[j] - 1;
                    try
                    {
                        var pageState = this.pageTree[nIndex].pageState;
                        pageState.isOptionalByTrackSelection = true;
                        pageState.isOptional = pageState.isOptionalByTrackSelection || pageState.isOptionalByAuthor || pageState.isOptionalByObjectiveCompletion
                    }
                    catch(e)
                    {
                    }
                }
            }
        for(var i = 0; i < this.tracks.items.length; i++)
            if(this.tracks.items[i].state.isSelected)
            {
                var aModules = this.tracks.items[i].modules.split(",");
                for(j = 0; j < aModules.length; j++)
                {
                    var nIndex = aModules[j] - 1;
                    try
                    {
                        var pageState = this.pageTree[nIndex].pageState;
                        pageState.isOptionalByTrackSelection = false;
                        pageState.isOptional = pageState.isOptionalByTrackSelection || pageState.isOptionalByAuthor || pageState.isOptionalByObjectiveCompletion
                    }
                    catch(e)
                    {
                    }
                }
            }
        for(var i = 0; i < this.pageTree.length; i++)
            this.pageTree[i].pageState.isOptionalByTrackSelection && 
                this.recursePagesFn(this.pageTree[i].pages,function(page)
                {
                    var pageState = page.pageState;
                    pageState.isOptionalByTrackSelection = true;
                    pageState.isOptional = pageState.isOptionalByTrackSelection || pageState.isOptionalByAuthor || pageState.isOptionalByObjectiveCompletion
                },1)
    }
    else
    {
        for(var j = 0; j < this.objectives.length; j++)
            this.objectives[j].IsRequiredByTrack = true;
        for(var i = 0; i < this.tracks.items.length; i++)
            if(!this.tracks.items[i].state.isSelected)
                for(var aObjectives = this.tracks.items[i].objectives.split(","),
                    j = 0; j < aObjectives.length; j++)
                {
                    var index = aObjectives[j] - 1;
                    try
                    {
                        this.objectives[index].IsRequiredByTrack = false
                    }
                    catch(e)
                    {
                    }
                }
        for(var i = 0; i < this.tracks.items.length; i++)
            if(this.tracks.items[i].state.isSelected)
                for(var aObjectives = this.tracks.items[i].objectives.split(","),
                    j = 0; j < aObjectives.length; j++)
                {
                    var index = aObjectives[j] - 1;
                    try
                    {
                        this.objectives[index].IsRequiredByTrack = true
                    }
                    catch(e)
                    {
                    }
                }
        this.recursePageTreeFn(function(page)
        {
            if(page.objectives)
            {
                var pageState = page.pageState;
                pageState.isOptionalByTrackSelection = true;
                pageState.isOptional = true;
                var pageModule = page.getModule();
                if(pageModule && !pageModule.pageState.isOptionalByTrackSelection)
                {
                    pageModule.pageState.isOptionalByTrackSelection = true;
                    pageModule.pageState.isOptional = true
                }
            }
        });
        this.recursePageTreeFn(function(page)
        {
            if(page.objectives)
                for(var aObjectives = page.objectives.split(","),
                    j = 0; j < aObjectives.length; j++)
                {
                    var index = aObjectives[j] - 1;
                    try
                    {
                        if(page.course.objectives[index].IsRequiredByTrack)
                        {
                            var pageState = page.pageState;
                            pageState.isOptionalByTrackSelection = false;
                            pageState.isOptional = pageState.isOptionalByTrackSelection || pageState.isOptionalByAuthor || pageState.isOptionalByObjectiveCompletion;
                            break
                        }
                    }
                    catch(e)
                    {
                    }
                }
            if(!page.pageState.isOptionalByTrackSelection)
            {
                var pageModule = page.getModule();
                if(pageModule && pageModule.pageState.isOptionalByTrackSelection)
                {
                    var pageModuleState = pageModule.pageState;
                    pageModuleState.isOptionalByTrackSelection = false;
                    pageModuleState.isOptional = pageModuleState.isOptionalByTrackSelection || pageModuleState.isOptionalByAuthor || pageModuleState.isOptionalByObjectiveCompletion
                }
            }
        })
    }
};
Course.prototype.getCompletedObjectivesCsv = function()
{
    for(var sObjectives = "",
        i = 0; i < this.objectives.length; i++)
        if(this.objectives[i].Complete)
        {
            if(sObjectives != "")
                sObjectives += ",";
            sObjectives += this.objectives[i].Id
        }
    return sObjectives
};
Course.prototype.updateForAssessments = function()
{
    for(var i = 0; i < this.Assessments.length; i++)
        if(this.Assessments[i].hasUnrequiredObjectives())
        {
            this.Assessments[i].resetScormData();
            this.Assessments[i].Initialized = false
        }
};
Course.prototype.updateForObjectives = function()
{
    this.recursePageTreeFn(function(page)
    {
        if(page.objectives)
            for(var aObjectives = page.objectives.split(","),
                j = 0; j < aObjectives.length; j++)
            {
                var index = aObjectives[j] - 1;
                try
                {
                    if(page.course.objectives[index].Complete)
                    {
                        var pageState = page.pageState;
                        pageState.isOptionalByObjectiveCompletion = true;
                        pageState.isOptional = pageState.isOptionalByTrackSelection || pageState.isOptionalByAuthor || pageState.isOptionalByObjectiveCompletion;
                        break
                    }
                }
                catch(e)
                {
                }
            }
    })
};
Course.prototype.recursePageTreeFn = function(fn)
{
    for(var i = 0; i < this.pageTree.length; i++)
    {
        fn(this.pageTree[i],1);
        this.pageTree[i].pages && this.pageTree[i].pages.length > 0 && 
            this.recursePagesFn(this.pageTree[i].pages,fn,2)
    }
};
Course.prototype.recursePagesFn = function(pages,fn,nLevel)
{
    for(var i = 0; i < pages.length; i++)
    {
        fn(pages[i],nLevel);
        pages[i].pages && pages.length > 0 && 
            this.recursePagesFn(pages[i].pages,fn,nLevel + 1)
    }
};
Course.prototype.recursePrivatePageTreeFn = function(fn)
{
    for(var i = 0; i < this.privatePages.length; i++)
    {
        fn(this.privatePages[i],1);
        this.privatePages[i].pages && this.privatePages[i].pages.length > 0 && 
            this.recursePrivatePagesFn(this.privatePages[i].pages,fn,2)
    }
};
Course.prototype.recursePrivatePagesFn = function(pages,fn,nLevel)
{
    for(var i = 0; i < pages.length; i++)
    {
        fn(pages[i],nLevel);
        pages[i].pages && pages.length > 0 && 
            this.recursePrivatePagesFn(pages[i].pages,fn,nLevel + 1)
    }
};
var player = function()
    {
        jQuery.support.cors = true;
        this.course = new Course;
        this.course.observer.observe("courseCompleted",courseCompleted);
        this.courseController = new CourseController(this.course);
        this.pageAudioController = new AudioController(this.courseController,"PageLevelAudio");
        this.notifyUserView = new NotifyUserView(this.courseController);
        this.confirmUserView = new ConfirmUserView(this.courseController);
        this.contentsWidgetView = null;
        function courseCompleted(bCoursCompletedByTestOut)
        {
            if(course.settings.EmbeddedEvaluation == "ShowInModal")
            {
                courseController.termScormCommunications();
                window.setTimeout(function()
                {
                    courseController.showEvaluationDialog(null,bCoursCompletedByTestOut)
                },3500)
            }
        }
        function launch()
        {
            var credit = getCredit();
            courseController.isOnline() && scormGetLastError() != "0" && 
                courseController.alert("cannot communicate with the LMS");
            startSessionTime();
            course.isFirstLaunch = isFirstLaunch();
            if(course.isFirstLaunch)
            {
                getCompletionStatus() == "not attempted" && 
                    setCompletionStatus("incomplete");
                learnerWillReturn(true)
            }
            course.load(courseLoaded)
        }
        var courseLoaded = function()
            {
                $("#PlayerSRInstructions").html(Resources.ScreenReader_CourseIntro_Text);
                var audioPlayerView = new AudioPlayerView(courseController,"PageLevelAudio"),
                    navBarView = new NavBarView(courseController),
                    contentView = new ContentView(courseController,pageAudioController);
                player.getContentView = function()
                {
                    return contentView
                };
                var bannerView = new BannerView(courseController),
                    contentsWidgetView = new ContentsWidgetView(courseController);
                $("#Footer").after(contentsWidgetView.container);
                player.contentsWidgetView = contentsWidgetView;
                $("#Footer").append(navBarView);
                $("#Footer").after(audioPlayerView);
                if(courseController.isOnline() && courseController.isDownloaded())
                    courseController.showDownloadProblemDialog();
                else
                {
                    course.settings.EmbeddedEvaluation == "ShowInModal" && 
                        courseController.showEvaluationDialog();
                    if(course.settings.hasTracks && course.tracks.canUserSelect && course.isFirstLaunch)
                        courseController.showTracksDialog();
                    else
                    {
                        courseController.course.navigationStarted = true;
                        courseController.navigateToStartupPage()
                    }
                }
                course.observer.fire("pageNavigationLoaded");
                $(window).trigger("resize");
                highContrast()
            },
            sizeWidget = function()
            {
                $(".ContentsWidget").css("font-size",$(".ContentsWidget").width() / 140 + "em")
            };
        function highContrast(userOptions)
        {
            var defaults = {divId:"jQueryHighContrastDetection",image:"Player/theme/neutral/images/i.normal.png",styleSheet:"Player/css/highcontrast.css",styleSheetCustom:"Custom/css/highcontrast.css"},
                options = $.extend(defaults,userOptions),
                hcDetect = jQuery('<div id ="' + options.divId + '"></div>').css({background:'url("' + options.image + '")',width:"0px",height:"0px"});
            hcDetect.appendTo(document.body);
            if(hcDetect.css("background-image") == "none")
            {
                $("head").append('<link rel="stylesheet" href="' + options.styleSheet + '" type="text/css"/>');
                $("head").append('<link rel="stylesheet" href="' + options.styleSheetCustom + '" type="text/css"/>');
                this.course.settings.HighContrastModeActive = true;
                this.courseController.showHighContrastDialog()
            }
            $("#" + options.divId).remove()
        }
        $(document).ready(function()
        {
            $(window).bind("resize",function()
            {
                views.utils.sizeDialog($("#HelpDialog"));
                views.utils.sizeDialog($("#ResourcesDialog"));
                views.utils.sizeDialog($("#TracksDialog"));
                views.utils.sizeDialog($("#ContentsPopupDialog"));
                views.utils.sizeDialog($("#AssessmentFeedbackDialog"));
                views.utils.sizeDialog($("#LanguageDialog"));
                views.utils.sizeDialog($("#ContentsDialog"));
                views.utils.sizeDialog($("#EvalDialog"));
                views.utils.sizeDialog($("#HighContrastDialog"));
                views.utils.sizeDialog($("#GlossaryDialog"));
                views.utils.sizeDialog($("#DefineYourRoleDialog"));
                sizeWidget()
            });
            launch()
        });
        window.onunload = function()
        {
            termSCO();
            window.external && window.external.CloseCDLauncher && 
                window.external.CloseCDLauncher()
        };
        function generateReportProblemEmail()
        {
            var sEmailNewLine = " %0D%0A",
                emailBodyText = encodeURIComponent(Resources.ReportProblem_EmailBody_Text);
            emailBodyText += sEmailNewLine + sEmailNewLine + "-------------------------------------------------" + sEmailNewLine;
            var toAddresses = Resources.ReportProblem_APSTeam_EmailAlias,
                subject = encodeURIComponent(Resources.ReportProblem_EmailSubject_Text.replace(/%%courseName%%/g,course.name).replace(/%%buildId%%/g,course.buildId)),
                href = "mailto:" + toAddresses + "?subject=" + subject + "&body=" + emailBodyText,
                wndMail = open(href,"_blank","scrollbars=yes,resizable=yes,width=10,height=10");
            wndMail && 
                wndMail.close()
        }
        function showHelpDeskInfo()
        {
            var w = 650,
                h = 480,
                clipboardWindow = open(course.getPopupsFolderPath() + "__Help_Desk_Info.htm","helpDeskInfo","width=650,height=500,scrollbars=yes,resizable=yes,top=" + (screen.availHeight / 2 - h / 2) + ",left=" + (screen.availWidth / 2 - w / 2));
            clipboardWindow.focus()
        }
        function getHelpDeskCourseInfo()
        {
            var sNewLine = "\n",
                info = "cmi.suspend_data = " + course.scormState.getSuspendData() + sNewLine + "internal.suspend_data = " + course.scormState.calcSuspendData() + sNewLine + "cmi.core.student_name = " + course.scormState.getLearnerName() + sNewLine + "cmi.core.lesson_location = " + course.scormState.getScormBookmark() + sNewLine + "internal.lesson_location = " + course.scormState.getBookmark() + sNewLine + "cmi.core.score.raw = " + course.scormState.getScore() + sNewLine + "cmi.core.total_time = " + course.scormState.getTotalTime() + sNewLine + "cmi.core.student_id = " + course.scormState.getLearnerId() + sNewLine + sNewLine + "window.location.href = " + window.location.href + sNewLine + "Course Name = " + course.name + sNewLine + "navigator.userAgent = " + navigator.userAgent + sNewLine + "Mode = " + (course.inOfflinePlayer() == true ? "offline" : "online") + sNewLine + "Date/time = " + dateToTimestamp(new Date) + sNewLine + "Current Page Type Id = " + course.scormState.getBookmark() + sNewLine + "Player Version = " + course.version + sNewLine;
            return info
        }
        function helpDeskInfoPopupLoaded(popup)
        {
            var sNewLine = "\n",
                body = "cmi.suspend_data = " + course.scormState.getSuspendData() + sNewLine + "internal.suspend_data = " + course.scormState.calcSuspendData() + sNewLine + "cmi.core.student_name = " + course.scormState.getLearnerName() + sNewLine + "cmi.core.lesson_location = " + course.scormState.getScormBookmark() + sNewLine + "internal.lesson_location = " + course.scormState.getBookmark() + sNewLine + "cmi.core.score.raw = " + course.scormState.getScore() + sNewLine + "cmi.core.total_time = " + course.scormState.getTotalTime() + sNewLine + "cmi.core.student_id = " + course.scormState.getLearnerId() + sNewLine + sNewLine + "window.location.href = " + window.location.href + sNewLine + "Course Name = " + course.name + sNewLine + "navigator.userAgent = " + navigator.userAgent + sNewLine + "Mode = " + (course.inOfflinePlayer() == true ? "offline" : "online") + sNewLine + "Date/time = " + dateToTimestamp(new Date) + sNewLine + "Current Page Type Id = " + course.scormState.getBookmark() + sNewLine + "Player Version = " + course.version + sNewLine;
            popup.document.getElementById("courseInfoTextArea").value = body
        }
        return{courseController:courseController,pageAudioController:pageAudioController,notifyUserView:notifyUserView,confirmUserView:confirmUserView,hookAPI:function(callback)
        {
            courseController.course.observer.observe("pageNavigationLoaded",function()
            {
                callback(playerAPI)
            })
        },generateReportProblemEmail:generateReportProblemEmail,showHelpDeskInfo:showHelpDeskInfo,getHelpDeskCourseInfo:getHelpDeskCourseInfo,helpDeskInfoPopupLoaded:helpDeskInfoPopupLoaded}
    }(),
    _bExitButtonClicked = false;
function handleOnBeforeUnload()
{
    if(!_bSilentExit && !_bExitButtonClicked)
        if(!courseController.course.scormState.isComplete)
            return Resources.CloseCourse_NotComplete_Text;
        else
            if(!player.courseController.isLMSFree())
                return Resources.CloseCourse_Complete_Text
}
window.onbeforeunload = handleOnBeforeUnload;
function containerWantsToClose()
{
    termSCO()
}
var _bTerminated = false;
function termSCO()
{
    if(!_bTerminated)
    {
        _bTerminated = true;
        player.courseController.termScormCommunications()
    }
}
function doKeyDown(e)
{
    var ver = parseFloat(navigator.appVersion.slice(0,4)),
        verIE = navigator.appName == "Microsoft Internet Explorer" ? ver : 0,
        verNS = navigator.appName == "Netscape" ? ver : 0,
        verOP = navigator.appName == "Opera" ? ver : 0,
        verOld = verIE < 4 && verNS < 5,
        isMSIE = verIE >= 4,
        myKeyCode = !isMSIE ? e.which : e.keyCode,
        mySrcElement = !isMSIE ? e.target : e.srcElement,
        isShiftPressed = e.shiftKey,
        isCtrlPressed = e.ctrlKey,
        isAltPressed = e.altKey;
    if(verOld)
        return true;
    if(myKeyCode == 17 && myKeyCode <= 20)
        return true;
    if(isCtrlPressed && isAltPressed)
    {
        if(myKeyCode == 66)
            $("#PreviousMetroButton").trigger("click");
        else
            if(myKeyCode == 78)
                $("#NextMetroButton").trigger("click");
            else
                if(myKeyCode == 88)
                    $("#exitButton").trigger("click");
                else
                    if(myKeyCode == 75)
                    {
                        var page = courseController.course.getCurrentPage();
                        switch(page.pageType.PlaybackSource)
                        {
                            case"KnowledgeCheck":
                            case"PostTest":
                            case"StandAloneAssessment":
                            case"StandAloneQuestion":
                                $("div#Assessment").focus();
                                break;
                            case"Branching":
                                $("div#Branching").focus();
                                break;
                            default:
                                $("iframe#Content").focus()
                        }
                    }
                    else
                        if(myKeyCode == 80)
                            if(courseController.activeVideoController)
                                courseController.activeVideoController.togglePlay();
                            else
                                if($("#AssessmentFeedbackDialog").dialog("isOpen") == true)
                                    AssessmentFeedbackDialogView.getAudioController().togglePlay();
                                else
                                    if(courseController.activeAudioController)
                                        courseController.activeAudioController.togglePlay();
                                    else
                                        this.pageAudioController.togglePlay();
                        else
                            if(myKeyCode == 90)
                                window.toggleDebug && 
                                    toggleDebug()
    }
    else
        if(myKeyCode == 27)
            $(".ui-dialog:visible").length === 0 && $("#BranchingFeedbackContentView").is(":visible") && 
                $(".BranchingDialogClose","#BranchingFeedbackContentView").trigger("click")
}
function showPageLinks()
{
    return courseController.showPageLinks()
}
function moveAhead()
{
}
function closeCourse()
{
    _bExitButtonClicked = true;
    if(window.courseWantsToClose)
    {
        termSCO();
        courseWantsToClose()
    }
    else
    {
        top.close();
        window.location.replace("about:blank")
    }
}
var playerAPI = playerAPI || new PlayerAPI;
function PlayerAPI()
{
    var cc = function()
        {
            return player.courseController
        },
        getLogicalPageId = function(id)
        {
            return id == null ? 0 : id == "test-out" ? -1 : id
        },
        getActualPageId = function(id)
        {
            return id == 0 ? null : id == -1 ? "test-out" : id
        },
        hookAPI = function(callback)
        {
            callback(this)
        };
    return{objectType:function()
    {
        return"player"
    },version:function()
    {
        return cc().course.version
    },learner:function()
    {
        return{name:function()
        {
            return cc().course.scormState.getLearnerName()
        },id:function()
        {
            return cc().course.scormState.getLearnerId()
        }}
    },ui:function()
    {
        return{progressTile:function()
        {
            return new ProgressTileView(cc())
        },testOutTile:function()
        {
            return cc().course.testOutPage ? new TestOutTileView(cc()) : null
        },downloadCourseTile:function()
        {
            return cc().course.isOnline && cc().isDownloadable() ? new DownloadCourseTileView(cc()) : null
        },downloadTranscriptTile:function()
        {
            return cc().course.settings.CourseTranscript ? new DownloadTranscriptTileView(cc()) : null
        },changeTracksTile:function()
        {
            return cc().course.settings.hasTracks && cc().course.tracks.canUserSelect ? new ChangeTracksTileView(cc()) : null
        },changeLanguagesTile:function()
        {
            return cc().course.language.count > 1 ? new ChangeLanguagesTileView(cc()) : null
        },communityTile:function()
        {
            return cc().course.settings.DiscussionLink ? new CommunityTileView(cc()) : null
        },resourcesTile:function()
        {
            return cc().course.settings.ShowResources ? new ResourcesTileView(cc()) : null
        },glossaryTile:function()
        {
            return cc().course.settings.ShowGlossary ? new GlossaryTileView(cc()) : null
        },helpTile:function()
        {
            return new HelpTileView(cc())
        },contentsTile:function()
        {
            return new ContentsTileView(cc())
        }}
    },course:function()
    {
        return{objectType:function()
        {
            return"course"
        },player:function()
        {
            return playerAPI
        },name:function()
        {
            return cc().course.name
        },isFirstLaunch:function()
        {
            return cc().isOnline()
        },isDownloadable:function()
        {
            return cc().isDownloadable()
        },isDownloaded:function()
        {
            return cc().isDownloaded()
        },isOnline:function()
        {
            return cc().isOnline()
        },isOfflinePlayer:function()
        {
            return cc().course.inOfflinePlayer()
        },currentPage:function()
        {
            return new CoursePage(this,cc().course.currentPageIndex,false)
        },nextRequiredPage:function()
        {
            var p = cc().course.getNextRequiredPage();
            return p ? this.getPageById(p.id) : null
        },nextRequiredModule:function()
        {
            var m = cc().course.getNextRequiredModule();
            return m ? new CourseModule(this,m.moduleIndex) : null
        },pageVisibleTree:function()
        {
            return cc().course.pageTree
        },privatePages:function()
        {
            return cc().course.privatePages
        },modules:function()
        {
            for(var pmods = cc().course.modules,
                mods = [],
                i = 0; i < pmods.length; i++)
                mods[i] = new CourseModule(this,i);
            return mods
        },pageNavigation:function()
        {
            return cc().course.pageNavigation
        },pageTypes:function()
        {
            return cc().course.pageTypesArray
        },pageLinks:function()
        {
            return cc().course.pageLinkArray
        },testOutPage:function()
        {
            return cc().course.testOutPage
        },language:function()
        {
            return cc().course.language
        },objectives:function()
        {
            return cc().course.objectives
        },assessments:function()
        {
            return cc().course.assessments
        },volume:function()
        {
            return cc().course.volume
        },settings:function()
        {
            return cc().course.settings
        },eventObserver:function()
        {
            return cc().course.observer
        },tracks:function()
        {
            return cc().course.tracks
        },hasTracks:function()
        {
            return cc().course.tracks ? true : false
        },contentPath:function()
        {
            return cc().course.getContentFolderPath()
        },currentLanguagePath:function()
        {
            return cc().course.getCurrentLanguageFolderPath()
        },mediaPath:function()
        {
            return cc().course.getMediaFolderPath()
        },imagePath:function()
        {
            return cc().course.getImagesFolderPath()
        },data:function()
        {
            var dataTag = "u_";
            return{getValue:function(name)
            {
                return cc().course.scormState.getState(dataTag + name)
            },setValue:function(name,value)
            {
                cc().course.scormState.setState(dataTag + name,value);
                return cc().course.scormState.save()
            },clearValue:function(name)
            {
                cc().course.scormState.setState(dataTag + name,null);
                return cc().course.scormState.save()
            }}
        },bookmark:function()
        {
            return cc().course.scormState.getRestorePoint()
        },getPageById:function(id)
        {
            var inx = null,
                private = false,
                pageNav = cc().course.pageNavigation;
            for(i in pageNav)
                if(getLogicalPageId(pageNav[i].id) == id)
                {
                    inx = i;
                    break
                }
            if(!inx)
            {
                var privatePages = cc().course.privatePages;
                for(i in privatePages)
                    if(privatePages[i] == id)
                    {
                        inx = i;
                        private = true;
                        break
                    }
            }
            return inx ? new CoursePage(this,inx,private) : null
        },recursePageVisibleTreeFn:function(fn)
        {
            return cc().course.recursePageTree(fn)
        },recursePagesFn:function(pages,fn,nLevel)
        {
            return cc().course.recursePages(pages,fn,nLevel)
        },getObjectiveById:function(id)
        {
            return cc().course.getObjective(id)
        },navigateToPageByIndex:function(index)
        {
            return cc().navigateToPage(index)
        },navigateToPageById:function(id)
        {
            return cc().navigateToPageById(id)
        },navigateToNextPage:function()
        {
            return cc().navigateToNextPage()
        },navigateToPreviousPage:function()
        {
            return cc().navigateToPreviousPage()
        },navigateToWelcomePage:function()
        {
            return cc().navigateToWelcomePage()
        },navigateToTestOut:function()
        {
            return cc().navigateToTestOut()
        },navigateToStartupPage:function()
        {
            return cc().navigateToStartupPage()
        },showTracksDialog:function()
        {
            return cc().showTracksDialog()
        },showContentsDialog:function()
        {
            return cc().showContentsDialog()
        },hideContentsDialog:function()
        {
            return cc().hideContentsDialog()
        },showResourcesDialog:function()
        {
            return cc().showResourcesDialog()
        },showHelpDialog:function()
        {
            return cc().showHelpDialog()
        },showLanguageDialog:function()
        {
            return cc().showLanguageDialog()
        },showGlossaryDialog:function()
        {
            return cc().showGlossaryDialog()
        },showContentPopup:function(page,callback)
        {
            return cc().showContentPopup(page,callback)
        },showPageTranscriptPopup:function(page,callback)
        {
            return cc().showTranscriptPopup(page.getPageContentFolderPath() + "page_transcript.htm",true,callback)
        },hidePageTranscriptPopup:function()
        {
            return cc().hideContentPopup()
        },showCourseTranscriptPopup:function(location)
        {
            return cc().showCourseTranscript(location)
        },showVideo:function(videoFileName,htmlElementId,context,observer,positionStateKey)
        {
            return cc().showVideo(videoFileName,htmlElementId,context,observer,positionStateKey)
        },downloadCourse:function(nType)
        {
            return cc().downloadCourse(nType)
        },hideContentsPanel:function()
        {
            return player.contentsWidgetView.hideContentsWidget()
        },showContentsPanel:function()
        {
            return player.contentsWidgetView.showContentsWidget()
        },loadBookmark:function(restorePoint)
        {
            cc().course.scormState.setRestorePoint(restorePoint);
            location.reload()
        },setTrackSelection:function()
        {
            for(var course = cc().course,
                sB = "",
                i = 0; i < course.tracks.items.length; i++)
                if(course.tracks.items[i].state.isSelected)
                {
                    if(sB != "")
                        sB += ",";
                    sB += i + 1
                }
            course.scormState.setState("TRACKS",sB);
            course.loadPageNavigation();
            course.updateForAssessments();
            if(!course.navigationStarted)
            {
                course.navigationStarted = true;
                courseController.navigateToStartupPage()
            }
        }}
    },alert:function(message)
    {
        cc().alert(message)
    },confirm:function(message,callback,param)
    {
        cc().confirm(message,callback,param)
    },hook:function(callback)
    {
        cc().course.observer.observe("pageNavigationLoaded",function()
        {
            callback(this)
        })
    }}
}
function CourseModule(course,i)
{
    var cc = function()
        {
            return player.courseController
        },
        getMod = function()
        {
            return cc().course.modules[i]
        };
    return{objectType:function()
    {
        return"module"
    },course:function()
    {
        return course
    },name:function()
    {
        return getMod().name
    },index:function()
    {
        return i
    },number:function()
    {
        return i + 1
    },pages:function()
    {
        var pss = [],
            ps = getMod().pages;
        if(ps != null)
            for(var pageNav = cc().course.pageNavigation,
                j = 0; j < ps.length; j++)
            {
                for(var private = false,
                    pinx = null,
                    i = 0; i < pageNav.length; i++)
                    if(pageNav[i].id == ps[j].id)
                    {
                        pinx = i;
                        break
                    }
                !pinx;
                pss[j] = new CoursePage(course,pinx,private)
            }
        return pss
    },data:function()
    {
        var dataTag = "m" + i.toString() + "_";
        return{getValue:function(name)
        {
            return course.data.getValue(dataTag + name)
        },setValue:function(name,value)
        {
            return course.data.setValue(dataTag + name,value)
        },clearValue:function()
        {
            return course.data.clearValue()
        }}
    },mustCompletePreviousModules:function()
    {
        return getMod().mustCompletePrevModules
    },modulesToComplete:function()
    {
        return getMod().modulesToComplete
    },mustCompleteRequiredPages:function()
    {
        return getMod().mustCompleteRequiredPages
    },toString:function()
    {
        return"Module " + this.number + ": " + this.name
    }}
}
var enums = enums || new Enums;
function Enums()
{
    return{pageType:{none:"",passed:"P",failed:"F"},pageStatus:{none:"",passed:"P",failed:"F"},pageContributionType:{required:"r",optional:"o"}}
}
function stringToEnum(enumType,valueStr)
{
    for(var keys = Object.keys(enumType),
        i = keys.length; i--; )
        if(enumType[keys[i]].toUpperCase() == valueStr.toUpperCase())
            return keys[i];
    return null
}
if(typeof Object.keys != "function")
    Object.keys = function(obj)
    {
        if(typeof obj != "object" && typeof obj != "function" || obj == null)
            throw TypeError("Object.keys called on non-object");
        var keys = [];
        for(var p in obj)
            obj.hasOwnProperty(p) && keys.push(p);
        return keys
    };
function CoursePage(course,pinx,private)
{
    var videoController = null,
        cc = function()
        {
            return player.courseController
        },
        getPage = function()
        {
            var page = null;
            if(!private)
                page = cc().course.pageNavigation[pinx];
            else
                page = cc().course.privatePages[pinx];
            return page
        },
        getModule = function()
        {
            var i = -1,
                p = getPage();
            if(p)
            {
                var m = p.getModule();
                if(m)
                    i = m.moduleIndex
            }
            return i < 0 ? null : course.modules[i]
        },
        getPageId = function()
        {
            var id = getPage().id;
            return id == null ? 0 : id == "test-out" ? -1 : id
        };
    return{objectType:function()
    {
        return"page"
    },"private":function()
    {
        return private ? true : false
    },module:function()
    {
        return getModule()
    },moduleIndex:function()
    {
        return this.module ? this.module.index : -1
    },id:function()
    {
        return getPageId()
    },name:function()
    {
        return getPage().name
    },data:function()
    {
        var dataTag = "p" + this.id.toString() + "_";
        return{getValue:function(name)
        {
            return course.data.getValue(dataTag + name)
        },setValue:function(name,value)
        {
            return course.data.setValue(dataTag + name,value)
        },clearValue:function()
        {
            return course.data.clearValue()
        }}
    },contributionType:function()
    {
        return stringToEnum(enums.pageContributionType,getPage().contribute)
    },pageType:function()
    {
        return getPage().pageType
    },pageState:function()
    {
        return getPage().pageState
    },bookmark:function()
    {
        return course.bookmark
    },parentPage:function()
    {
        return getPage().parent
    },pageFileName:function()
    {
        return getPage().fileName
    },pageFilePath:function()
    {
        return getPage().getFilePath()
    },contentPath:function()
    {
        return getPage().getPageContentFolderPath()
    },mediaPath:function()
    {
        return course.mediaPath
    },imagePath:function()
    {
        return getPage().getKeyPointsImagesPath()
    },isRequired:function()
    {
        return getPage().isRequired()
    },isComplete:function()
    {
        return getPage().isComplete()
    },video:function()
    {
        return{player:function()
        {
            return videoController ? videoController : new VideoController
        },settings:function()
        {
            return{videoFileName:function()
            {
                return getPage().videoFiles[0].getFilePath()
            },videoCaptionsFilePath:function()
            {
                return getPage().getVideoCaptionsPath()
            },keyPointsFilePath:function()
            {
                return getPage().getKeyPointsPath()
            },getClickToPlay:function()
            {
                return getPage().videoFiles[0].videoClickToPlay
            },setClickToPlay:function(value)
            {
                getPage().videoFiles[0].videoClickToPlay = value
            }}
        }}
    },audio:function()
    {
        return{player:function()
        {
            return parent.player.pageAudioController
        },settings:function()
        {
            return{audioFileName:function()
            {
                return getPage().audioFile
            },audioFilePath:function()
            {
                return getPage().getFilePath()
            },audioCaptionsFilePath:function()
            {
                return getPage().getAudioCaptionsPath()
            }}
        }}
    },isLocked:function()
    {
        return getPage().pageState.isLocked
    },isOptional:function()
    {
        return getPage().pageState.isOptional
    },isOptionalByAuthor:function()
    {
        return getPage().pageState.isOptionalByAuthor
    },isOptionalByObjectiveCompletion:function()
    {
        return getPage().pageState.isOptionalByObjectiveCompletion
    },isOptionalByTrackSelection:function()
    {
        return getPage().pageState.isOptionalByTrackSelection
    },isVisited:function()
    {
        return getPage().pageState.isVisited
    },status:function()
    {
        return stringToEnum(enums.pageStatus,getPage().pageState.status)
    },setComplete:function()
    {
        return getPage().setComplete()
    },setIncomplete:function()
    {
        return getPage().setIncomplete()
    },toString:function()
    {
        return"Page " + this.id + ": " + this.name
    }}
}
function pageSerializationHelper(key,value)
{
    switch(key)
    {
        case"parentPage":
        case"module":
        case"player":
            return undefined;
            break;
        default:
            return value
    }
}
function moduleSerializationHelper(key,value)
{
    switch(key)
    {
        case"course":
            return undefined;
        default:
            switch(value.objectType)
            {
                case"page":
                    return pageSerializationHelper(key,value);
                default:
                    return value
            }
    }
}
function courseSerializationHelper(key,value)
{
    switch(key)
    {
        case"player":
        case"course":
            return undefined;
        default:
            switch(value.objectType)
            {
                case"page":
                    return pageSerializationHelper(key,value);
                case"module":
                    return moduleSerializationHelper(key,value);
                default:
                    return value
            }
    }
}
window.onmessage = handleRemoteMessage;
function handleRemoteMessage(e)
{
    if(!e.data)
        return;
    var tag = e.data.substr(0,1),
        pi = e.data.indexOf("?") ? e.data.indexOf("?") : -1,
        action = e.data.substring(2,pi > 0 ? pi : undefined),
        parameters = null;
    if(pi > 0)
    {
        parameters = [];
        var param = e.data.substring(e.data.indexOf("?") + 1);
        parameters[0] = JSON.parse(param)
    }
    var objResult = null;
    switch(action.toLowerCase())
    {
        case"getcurrentpage":
            var page = playerAPI.course().currentPage();
            objResult = {};
            objResult.id = page.id;
            objResult.name = page.name;
            objResult.bookmark = page.bookmark;
            break;
        case"getpage":
            var page = playerAPI.course().getPage(parameters[0]);
            objResult = {};
            objResult.id = page.id;
            objResult.name = page.name;
            objResult.bookmark = page.bookmark;
            break;
        case"loadbookmark":
            playerAPI.course().loadBookmark(parameters[0])
    }
    var response = tag + ":" + JSON.stringify(objResult);
    if(e.ports)
        for(var i = 0; i < e.ports.length; i++)
            e.ports[i].postMessage(response,"*");
    else
        e.source.postMessage(response,"*")
}
function PlayerORB(win,responseHandler)
{
    var mc = window.MessageChannel ? new MessageChannel : null,
        handleMessage = function(e)
        {
            responseHandler(e)
        };
    if(responseHandler)
        if(mc)
            mc.port1.onmessage = handleMessage;
        else
            window.addEventListener("message",handleMessage,false);
    return{messageChannel:function()
    {
        return mc
    },getRPC:function()
    {
        return new PlayerRPC(this)
    },execute:function(rpc)
    {
        if(mc)
            win.postMessage(rpc.name,"*",[mc.port2]);
        else
            win.postMessage(rpc.name,"*")
    }}
}
function PlayerRemoteAPI(win)
{
    var handlers = [],
        handleMessage = function(e)
        {
            for(var hi = -1,
                i = 0; i < handlers.length; i++)
                if(parseInt(e.data.substr(0,1)) == i)
                {
                    hi = i;
                    var data = e.data.substring(2);
                    handlers[i](data);
                    break
                }
            handlers.splice(hi,1)
        };
    window.addEventListener("message",handleMessage,false);
    return{getRPC:function()
    {
        return new PlayerRPC(this)
    },execute:function(rpc,handler)
    {
        for(var hi = -1,
            i = 0; i < handlers.length; i++)
            if(handlers[i] == handler)
            {
                exists = i;
                break
            }
        if(hi < 0)
        {
            hi = handlers.length;
            handlers[hi] = handler
        }
        win.postMessage(hi + ":" + rpc,"*")
    }}
}
function PlayerRPC(orb)
{
    var name = null,
        parameters = [];
    return{getName:function()
    {
        return name
    },setName:function(value)
    {
        name = value
    },getParameters:function()
    {
        return parameters
    },setParameters:function(value)
    {
        parameters = value
    },execute:function()
    {
        orb.execute(this)
    }}
}

// SIG // Begin signature block
// SIG // MIIauwYJKoZIhvcNAQcCoIIarDCCGqgCAQExCzAJBgUr
// SIG // DgMCGgUAMGcGCisGAQQBgjcCAQSgWTBXMDIGCisGAQQB
// SIG // gjcCAR4wJAIBAQQQEODJBs441BGiowAQS9NQkAIBAAIB
// SIG // AAIBAAIBAAIBADAhMAkGBSsOAwIaBQAEFB4xtzTe4SnK
// SIG // bUf7fCBAoCVk5m4loIIVgjCCBMMwggOroAMCAQICEzMA
// SIG // AAAz5SeGow5KKoAAAAAAADMwDQYJKoZIhvcNAQEFBQAw
// SIG // dzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
// SIG // b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
// SIG // Y3Jvc29mdCBDb3Jwb3JhdGlvbjEhMB8GA1UEAxMYTWlj
// SIG // cm9zb2Z0IFRpbWUtU3RhbXAgUENBMB4XDTEzMDMyNzIw
// SIG // MDgyM1oXDTE0MDYyNzIwMDgyM1owgbMxCzAJBgNVBAYT
// SIG // AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
// SIG // EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
// SIG // cG9yYXRpb24xDTALBgNVBAsTBE1PUFIxJzAlBgNVBAsT
// SIG // Hm5DaXBoZXIgRFNFIEVTTjpGNTI4LTM3NzctOEE3NjEl
// SIG // MCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2Vy
// SIG // dmljZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAMreyhkPH5ZWgl/YQjLUCG22ncDC7Xw4q1gzrWuB
// SIG // ULiIIQpdr5ctkFrHwy6yTNRjdFj938WJVNALzP2chBF5
// SIG // rKMhIm0z4K7eJUBFkk4NYwgrizfdTwdq3CrPEFqPV12d
// SIG // PfoXYwLGcD67Iu1bsfcyuuRxvHn/+MvpVz90e+byfXxX
// SIG // WC+s0g6o2YjZQB86IkHiCSYCoMzlJc6MZ4PfRviFTcPa
// SIG // Zh7Hc347tHYXpqWgoHRVqOVgGEFiOMdlRqsEFmZW6vmm
// SIG // y0LPXVRkL4H4zzgADxBr4YMujT5I7ElWSuyaafTLDxD7
// SIG // BzRKYmwBjW7HIITKXNFjmR6OXewPpRZIqmveIS8CAwEA
// SIG // AaOCAQkwggEFMB0GA1UdDgQWBBQAWBs+7cXxBpO+MT02
// SIG // tKwLXTLwgTAfBgNVHSMEGDAWgBQjNPjZUkZwCu1A+3b7
// SIG // syuwwzWzDzBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8v
// SIG // Y3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0
// SIG // cy9NaWNyb3NvZnRUaW1lU3RhbXBQQ0EuY3JsMFgGCCsG
// SIG // AQUFBwEBBEwwSjBIBggrBgEFBQcwAoY8aHR0cDovL3d3
// SIG // dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNyb3Nv
// SIG // ZnRUaW1lU3RhbXBQQ0EuY3J0MBMGA1UdJQQMMAoGCCsG
// SIG // AQUFBwMIMA0GCSqGSIb3DQEBBQUAA4IBAQAC/+OMA+rv
// SIG // fji5uXyfO1KDpPojONQDuGpZtergb4gD9G9RapU6dYXo
// SIG // HNwHxU6dG6jOJEcUJE81d7GcvCd7j11P/AaLl5f5KZv3
// SIG // QB1SgY52SAN+8psXt67ZWyKRYzsyXzX7xpE8zO8OmYA+
// SIG // BpE4E3oMTL4z27/trUHGfBskfBPcCvxLiiAFHQmJkTkH
// SIG // TiFO3mx8cLur8SCO+Jh4YNyLlM9lvpaQD6CchO1ctXxB
// SIG // oGEtvUNnZRoqgtSniln3MuOj58WNsiK7kijYsIxTj2hH
// SIG // R6HYAbDxYRXEF6Et4zpsT2+vPe7eKbBEy8OSZ7oAzg+O
// SIG // Ee/RAoIxSZSYnVFIeK0d1kC2MIIE7DCCA9SgAwIBAgIT
// SIG // MwAAALARrwqL0Duf3QABAAAAsDANBgkqhkiG9w0BAQUF
// SIG // ADB5MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGlu
// SIG // Z3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV
// SIG // TWljcm9zb2Z0IENvcnBvcmF0aW9uMSMwIQYDVQQDExpN
// SIG // aWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQTAeFw0xMzAx
// SIG // MjQyMjMzMzlaFw0xNDA0MjQyMjMzMzlaMIGDMQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMQ0wCwYDVQQLEwRNT1BSMR4wHAYD
// SIG // VQQDExVNaWNyb3NvZnQgQ29ycG9yYXRpb24wggEiMA0G
// SIG // CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDor1yiIA34
// SIG // KHy8BXt/re7rdqwoUz8620B9s44z5lc/pVEVNFSlz7SL
// SIG // qT+oN+EtUO01Fk7vTXrbE3aIsCzwWVyp6+HXKXXkG4Un
// SIG // m/P4LZ5BNisLQPu+O7q5XHWTFlJLyjPFN7Dz636o9UEV
// SIG // XAhlHSE38Cy6IgsQsRCddyKFhHxPuRuQsPWj/ov0DJpO
// SIG // oPXJCiHiquMBNkf9L4JqgQP1qTXclFed+0vUDoLbOI8S
// SIG // /uPWenSIZOFixCUuKq6dGB8OHrbCryS0DlC83hyTXEmm
// SIG // ebW22875cHsoAYS4KinPv6kFBeHgD3FN/a1cI4Mp68fF
// SIG // SsjoJ4TTfsZDC5UABbFPZXHFAgMBAAGjggFgMIIBXDAT
// SIG // BgNVHSUEDDAKBggrBgEFBQcDAzAdBgNVHQ4EFgQUWXGm
// SIG // WjNN2pgHgP+EHr6H+XIyQfIwUQYDVR0RBEowSKRGMEQx
// SIG // DTALBgNVBAsTBE1PUFIxMzAxBgNVBAUTKjMxNTk1KzRm
// SIG // YWYwYjcxLWFkMzctNGFhMy1hNjcxLTc2YmMwNTIzNDRh
// SIG // ZDAfBgNVHSMEGDAWgBTLEejK0rQWWAHJNy4zFha5TJoK
// SIG // HzBWBgNVHR8ETzBNMEugSaBHhkVodHRwOi8vY3JsLm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWND
// SIG // b2RTaWdQQ0FfMDgtMzEtMjAxMC5jcmwwWgYIKwYBBQUH
// SIG // AQEETjBMMEoGCCsGAQUFBzAChj5odHRwOi8vd3d3Lm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY0NvZFNpZ1BD
// SIG // QV8wOC0zMS0yMDEwLmNydDANBgkqhkiG9w0BAQUFAAOC
// SIG // AQEAMdduKhJXM4HVncbr+TrURE0Inu5e32pbt3nPApy8
// SIG // dmiekKGcC8N/oozxTbqVOfsN4OGb9F0kDxuNiBU6fNut
// SIG // zrPJbLo5LEV9JBFUJjANDf9H6gMH5eRmXSx7nR2pEPoc
// SIG // sHTyT2lrnqkkhNrtlqDfc6TvahqsS2Ke8XzAFH9IzU2y
// SIG // RPnwPJNtQtjofOYXoJtoaAko+QKX7xEDumdSrcHps3Om
// SIG // 0mPNSuI+5PNO/f+h4LsCEztdIN5VP6OukEAxOHUoXgSp
// SIG // Rm3m9Xp5QL0fzehF1a7iXT71dcfmZmNgzNWahIeNJDD3
// SIG // 7zTQYx2xQmdKDku/Og7vtpU6pzjkJZIIpohmgjCCBbww
// SIG // ggOkoAMCAQICCmEzJhoAAAAAADEwDQYJKoZIhvcNAQEF
// SIG // BQAwXzETMBEGCgmSJomT8ixkARkWA2NvbTEZMBcGCgmS
// SIG // JomT8ixkARkWCW1pY3Jvc29mdDEtMCsGA1UEAxMkTWlj
// SIG // cm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5
// SIG // MB4XDTEwMDgzMTIyMTkzMloXDTIwMDgzMTIyMjkzMlow
// SIG // eTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
// SIG // b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
// SIG // Y3Jvc29mdCBDb3Jwb3JhdGlvbjEjMCEGA1UEAxMaTWlj
// SIG // cm9zb2Z0IENvZGUgU2lnbmluZyBQQ0EwggEiMA0GCSqG
// SIG // SIb3DQEBAQUAA4IBDwAwggEKAoIBAQCycllcGTBkvx2a
// SIG // YCAgQpl2U2w+G9ZvzMvx6mv+lxYQ4N86dIMaty+gMuz/
// SIG // 3sJCTiPVcgDbNVcKicquIEn08GisTUuNpb15S3GbRwfa
// SIG // /SXfnXWIz6pzRH/XgdvzvfI2pMlcRdyvrT3gKGiXGqel
// SIG // cnNW8ReU5P01lHKg1nZfHndFg4U4FtBzWwW6Z1KNpbJp
// SIG // L9oZC/6SdCnidi9U3RQwWfjSjWL9y8lfRjFQuScT5EAw
// SIG // z3IpECgixzdOPaAyPZDNoTgGhVxOVoIoKgUyt0vXT2Pn
// SIG // 0i1i8UU956wIAPZGoZ7RW4wmU+h6qkryRs83PDietHdc
// SIG // pReejcsRj1Y8wawJXwPTAgMBAAGjggFeMIIBWjAPBgNV
// SIG // HRMBAf8EBTADAQH/MB0GA1UdDgQWBBTLEejK0rQWWAHJ
// SIG // Ny4zFha5TJoKHzALBgNVHQ8EBAMCAYYwEgYJKwYBBAGC
// SIG // NxUBBAUCAwEAATAjBgkrBgEEAYI3FQIEFgQU/dExTtMm
// SIG // ipXhmGA7qDFvpjy82C0wGQYJKwYBBAGCNxQCBAweCgBT
// SIG // AHUAYgBDAEEwHwYDVR0jBBgwFoAUDqyCYEBWJ5flJRP8
// SIG // KuEKU5VZ5KQwUAYDVR0fBEkwRzBFoEOgQYY/aHR0cDov
// SIG // L2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwvcHJvZHVj
// SIG // dHMvbWljcm9zb2Z0cm9vdGNlcnQuY3JsMFQGCCsGAQUF
// SIG // BwEBBEgwRjBEBggrBgEFBQcwAoY4aHR0cDovL3d3dy5t
// SIG // aWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNyb3NvZnRS
// SIG // b290Q2VydC5jcnQwDQYJKoZIhvcNAQEFBQADggIBAFk5
// SIG // Pn8mRq/rb0CxMrVq6w4vbqhJ9+tfde1MOy3XQ60L/svp
// SIG // LTGjI8x8UJiAIV2sPS9MuqKoVpzjcLu4tPh5tUly9z7q
// SIG // QX/K4QwXaculnCAt+gtQxFbNLeNK0rxw56gNogOlVuC4
// SIG // iktX8pVCnPHz7+7jhh80PLhWmvBTI4UqpIIck+KUBx3y
// SIG // 4k74jKHK6BOlkU7IG9KPcpUqcW2bGvgc8FPWZ8wi/1wd
// SIG // zaKMvSeyeWNWRKJRzfnpo1hW3ZsCRUQvX/TartSCMm78
// SIG // pJUT5Otp56miLL7IKxAOZY6Z2/Wi+hImCWU4lPF6H0q7
// SIG // 0eFW6NB4lhhcyTUWX92THUmOLb6tNEQc7hAVGgBd3TVb
// SIG // Ic6YxwnuhQ6MT20OE049fClInHLR82zKwexwo1eSV32U
// SIG // jaAbSANa98+jZwp0pTbtLS8XyOZyNxL0b7E8Z4L5UrKN
// SIG // MxZlHg6K3RDeZPRvzkbU0xfpecQEtNP7LN8fip6sCvsT
// SIG // J0Ct5PnhqX9GuwdgR2VgQE6wQuxO7bN2edgKNAltHIAx
// SIG // H+IOVN3lofvlRxCtZJj/UBYufL8FIXrilUEnacOTj5XJ
// SIG // jdibIa4NXJzwoq6GaIMMai27dmsAHZat8hZ79haDJLmI
// SIG // z2qoRzEvmtzjcT3XAH5iR9HOiMm4GPoOco3Boz2vAkBq
// SIG // /2mbluIQqBC0N1AI1sM9MIIGBzCCA++gAwIBAgIKYRZo
// SIG // NAAAAAAAHDANBgkqhkiG9w0BAQUFADBfMRMwEQYKCZIm
// SIG // iZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWlj
// SIG // cm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBD
// SIG // ZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDcwNDAzMTI1
// SIG // MzA5WhcNMjEwNDAzMTMwMzA5WjB3MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSEwHwYDVQQDExhNaWNyb3NvZnQgVGltZS1T
// SIG // dGFtcCBQQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
// SIG // ggEKAoIBAQCfoWyx39tIkip8ay4Z4b3i48WZUSNQrc7d
// SIG // GE4kD+7Rp9FMrXQwIBHrB9VUlRVJlBtCkq6YXDAm2gBr
// SIG // 6Hu97IkHD/cOBJjwicwfyzMkh53y9GccLPx754gd6udO
// SIG // o6HBI1PKjfpFzwnQXq/QsEIEovmmbJNn1yjcRlOwhtDl
// SIG // KEYuJ6yGT1VSDOQDLPtqkJAwbofzWTCd+n7Wl7PoIZd+
// SIG // +NIT8wi3U21StEWQn0gASkdmEScpZqiX5NMGgUqi+YSn
// SIG // EUcUCYKfhO1VeP4Bmh1QCIUAEDBG7bfeI0a7xC1Un68e
// SIG // eEExd8yb3zuDk6FhArUdDbH895uyAc4iS1T/+QXDwiAL
// SIG // AgMBAAGjggGrMIIBpzAPBgNVHRMBAf8EBTADAQH/MB0G
// SIG // A1UdDgQWBBQjNPjZUkZwCu1A+3b7syuwwzWzDzALBgNV
// SIG // HQ8EBAMCAYYwEAYJKwYBBAGCNxUBBAMCAQAwgZgGA1Ud
// SIG // IwSBkDCBjYAUDqyCYEBWJ5flJRP8KuEKU5VZ5KShY6Rh
// SIG // MF8xEzARBgoJkiaJk/IsZAEZFgNjb20xGTAXBgoJkiaJ
// SIG // k/IsZAEZFgltaWNyb3NvZnQxLTArBgNVBAMTJE1pY3Jv
// SIG // c29mdCBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eYIQ
// SIG // ea0WoUqgpa1Mc1j0BxMuZTBQBgNVHR8ESTBHMEWgQ6BB
// SIG // hj9odHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2Ny
// SIG // bC9wcm9kdWN0cy9taWNyb3NvZnRyb290Y2VydC5jcmww
// SIG // VAYIKwYBBQUHAQEESDBGMEQGCCsGAQUFBzAChjhodHRw
// SIG // Oi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01p
// SIG // Y3Jvc29mdFJvb3RDZXJ0LmNydDATBgNVHSUEDDAKBggr
// SIG // BgEFBQcDCDANBgkqhkiG9w0BAQUFAAOCAgEAEJeKw1wD
// SIG // RDbd6bStd9vOeVFNAbEudHFbbQwTq86+e4+4LtQSooxt
// SIG // YrhXAstOIBNQmd16QOJXu69YmhzhHQGGrLt48ovQ7DsB
// SIG // 7uK+jwoFyI1I4vBTFd1Pq5Lk541q1YDB5pTyBi+FA+mR
// SIG // KiQicPv2/OR4mS4N9wficLwYTp2OawpylbihOZxnLcVR
// SIG // DupiXD8WmIsgP+IHGjL5zDFKdjE9K3ILyOpwPf+FChPf
// SIG // wgphjvDXuBfrTot/xTUrXqO/67x9C0J71FNyIe4wyrt4
// SIG // ZVxbARcKFA7S2hSY9Ty5ZlizLS/n+YWGzFFW6J1wlGys
// SIG // OUzU9nm/qhh6YinvopspNAZ3GmLJPR5tH4LwC8csu89D
// SIG // s+X57H2146SodDW4TsVxIxImdgs8UoxxWkZDFLyzs7BN
// SIG // Z8ifQv+AeSGAnhUwZuhCEl4ayJ4iIdBD6Svpu/RIzCzU
// SIG // 2DKATCYqSCRfWupW76bemZ3KOm+9gSd0BhHudiG/m4LB
// SIG // J1S2sWo9iaF2YbRuoROmv6pH8BJv/YoybLL+31HIjCPJ
// SIG // Zr2dHYcSZAI9La9Zj7jkIeW1sMpjtHhUBdRBLlCslLCl
// SIG // eKuzoJZ1GtmShxN1Ii8yqAhuoFuMJb+g74TKIdbrHk/J
// SIG // mu5J4PcBZW+JC33Iacjmbuqnl84xKf8OxVtc2E0bodj6
// SIG // L54/LlUWa8kTo/0xggSlMIIEoQIBATCBkDB5MQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMSMwIQYDVQQDExpNaWNyb3NvZnQg
// SIG // Q29kZSBTaWduaW5nIFBDQQITMwAAALARrwqL0Duf3QAB
// SIG // AAAAsDAJBgUrDgMCGgUAoIG+MBkGCSqGSIb3DQEJAzEM
// SIG // BgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsxDjAMBgor
// SIG // BgEEAYI3AgEVMCMGCSqGSIb3DQEJBDEWBBTN99iaP4NE
// SIG // ETlo+kzjt14neq9CmTBeBgorBgEEAYI3AgEMMVAwTqAm
// SIG // gCQATQBpAGMAcgBvAHMAbwBmAHQAIABMAGUAYQByAG4A
// SIG // aQBuAGehJIAiaHR0cDovL3d3dy5taWNyb3NvZnQuY29t
// SIG // L2xlYXJuaW5nIDANBgkqhkiG9w0BAQEFAASCAQCctXL1
// SIG // FgbKXIkgG/Bc+6+DgoOB6TjPuy/U6yjq82EjF7XQAvEk
// SIG // MT8XUBXV5zuztpMvrI3lNykaJKkNI6PVt2Mu6iCRazl0
// SIG // bfI6FESAsXWh6TleE18ZnO9fej38GpzV99D0iZvLG1Ho
// SIG // z7AqygKQUMAJRrPiN2uw3c26dSfEkwavt0mvtXoqDNyB
// SIG // E/YWLtPCooPjovSFXRRoEL8eeprtsDruBMMK4KCURjjn
// SIG // UFP+Nuy+7xgR0KIqd4Lzv6CCQywmt+U/m8OU6ZgBSzyk
// SIG // cpK1AZnfu3TfXByRlvoLN16fR/sGc3L6Gt+p1uIejS1H
// SIG // fw+SiNzCDYUIqTLYgG/ndX/m4bhBoYICKDCCAiQGCSqG
// SIG // SIb3DQEJBjGCAhUwggIRAgEBMIGOMHcxCzAJBgNVBAYT
// SIG // AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
// SIG // EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
// SIG // cG9yYXRpb24xITAfBgNVBAMTGE1pY3Jvc29mdCBUaW1l
// SIG // LVN0YW1wIFBDQQITMwAAADPlJ4ajDkoqgAAAAAAAMzAJ
// SIG // BgUrDgMCGgUAoF0wGAYJKoZIhvcNAQkDMQsGCSqGSIb3
// SIG // DQEHATAcBgkqhkiG9w0BCQUxDxcNMTQwNDA0MjEwNTM4
// SIG // WjAjBgkqhkiG9w0BCQQxFgQUGF9fKBMDR9ZN5Iyg3LpP
// SIG // DK5huDkwDQYJKoZIhvcNAQEFBQAEggEAmo/9sVmn4SnX
// SIG // iyb4rq5DUwrVmPZraFazAK6iBc6dzHPBGBJ0vlTJ3hyc
// SIG // 6IRybBOh8uTqXbODF/SZ2ufjbTrB27tza8+Gpf00dLRK
// SIG // DV2GxdTyzncOrmQ7DgmAX09vcbnXg6FWOLRcSoX9vJd8
// SIG // N7N58WN64ppSCYE8wN4xbO2Mtlai6JN1xFoXexmfmsSm
// SIG // MbNPBp1vfbxiq0YWGv0Q6OPKb0BwsSwYW2+Gl3tm0NPU
// SIG // ooQSC7Jj/WRJKkjGAFs1T7u25Zp88q746rbWAp2lk6Ml
// SIG // zIU9rPmiZwlOyPhLJIK8V7FHoU334J1Sica8PPJy6w0z
// SIG // iVzGKWZvlT3GH4y00bqlsQ==
// SIG // End signature block
