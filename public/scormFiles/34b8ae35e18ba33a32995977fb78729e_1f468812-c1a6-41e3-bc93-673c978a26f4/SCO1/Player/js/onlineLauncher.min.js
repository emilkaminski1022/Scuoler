
var _debug = false;
lmsAPI = null;
API = {};
bInitialized = false;
bFinish = false;
sdList = null;
sLastError = "0";
sStorageKeyName = "scormData";
function initVisualizer()
{
    initVisualizerAPI();
    initAPI(window);
    iniStorageKeyName();
    getAllLMSData();
    launchIt()
}
function initVisualizerAPI()
{
    initScormData();
    API.LMSInitialize = LMSInitialize;
    API.LMSFinish = LMSFinish;
    API.LMSSetValue = LMSSetValue;
    API.LMSGetValue = LMSGetValue;
    API.LMSGetLastError = LMSGetLastError;
    API.LMSGetErrorString = LMSGetErrorString;
    API.LMSCommit = LMSCommit;
    API.LMSGetDiagnostic = LMSGetDiagnostic
}
function initScormData()
{
    var sdNew;
    sdList = new ScormData("rw","0","cmi.comments","CMIString4096","","",null);
    sdNew = new ScormData("ro","0","cmi.comments_from_lms","CMIString4096","","",sdList);
    sdNew = new ScormData("ro","0","cmi.core._children","CMIString255",'"credit","entry","exit","lesson_location","lesson_mode","lesson_status","score","session_time","student_id","student_name","total_time"',"credit,entry,exit,lesson_location,lesson_mode,lesson_status,score,session_time,student_id,student_name,total_time",sdNew);
    sdNew = new ScormData("ro","0","cmi.core.credit","CMIVocabulary",'"credit":"no-credit"',"credit",sdNew);
    sdNew.storeLocal = true;
    sdNew = new ScormData("ro","0","cmi.core.entry","CMIVocabulary",'"":"ab-initio":"resume"',"ab-initio",sdNew);
    sdNew.storeLocal = true;
    sdNew = new ScormData("wo","0","cmi.core.exit","CMIVocabulary",'"":"logout":"suspend":"time-out"',"",sdNew);
    sdNew = new ScormData("rw","0","cmi.core.lesson_location","CMIString255","","",sdNew);
    sdNew.storeLocal = true;
    sdNew = new ScormData("ro","0","cmi.core.lesson_mode","CMIVocabulary",'"normal":"review":"browse"',"normal",sdNew);
    sdNew = new ScormData("rw","0","cmi.core.lesson_status","CMIVocabulary",'"passed":"completed":"failed":"incomplete":"browsed":"not attempted"',"not attempted",sdNew);
    sdNew.storeLocal = true;
    sdNew = new ScormData("ro","0","cmi.core.score._children","CMIString255",'"max","min","raw"',"max,min,raw",sdNew);
    sdNew = new ScormData("rw","0","cmi.core.score.max","CMIDecimal","0,100","",sdNew);
    sdNew = new ScormData("rw","0","cmi.core.score.min","CMIDecimal","0,100","",sdNew);
    sdNew = new ScormData("rw","0","cmi.core.score.raw","CMIDecimal","0,100","",sdNew);
    sdNew = new ScormData("wo","0","cmi.core.session_time","CMITimespan","","",sdNew);
    sdNew = new ScormData("ro","0","cmi.core.student_id","CMIIdentifier","","Joe_Student1",sdNew);
    sdNew = new ScormData("ro","0","cmi.core.student_name","CMIString255","","Student, Joe",sdNew);
    sdNew = new ScormData("ro","0","cmi.core.total_time","CMITimespan","","00:00:00",sdNew);
    sdNew = new ScormData("ro","0","cmi.interactions._children","CMIString255",'"id","objectives","time","type","correct_responses","weighting","student_response","result","latency"',"id,objectives,time,type,correct_responses,weighting,student_response,result,latency",sdNew);
    sdNew = new ScormData("ro","0","cmi.interactions._count","CMIInteger","",0,sdNew);
    sdNew = new ScormData("ro","0","cmi.launch_data","CMIString4096","","",sdNew);
    sdNew = new ScormData("ro","0","cmi.objectives._children","CMIString255",'"id","score","status"',"id,score,status",sdNew);
    sdNew = new ScormData("ro","0","cmi.objectives._count","CMIInteger","",0,sdNew);
    sdNew = new ScormData("ro","0","cmi.student_data._children","CMIString255",'"mastery_score","max_time_allowed","time_limit_action"',"",sdNew);
    sdNew = new ScormData("ro","0","cmi.student_data.mastery_score","CMIDecimal","","",sdNew);
    sdNew = new ScormData("ro","0","cmi.student_data.max_time_allowed","CMITimespan","","",sdNew);
    sdNew = new ScormData("ro","0","cmi.student_data.time_limit_action","CMIVocabulary",'"exit,message":"exit,no message":"continue,message":"continue,no message"',"continue,no message",sdNew);
    sdNew = new ScormData("ro","0","cmi.student_preference._children","CMIString255",'"audio","language","speed","text"',"audio,language,speed,text",sdNew);
    sdNew = new ScormData("rw","0","cmi.student_preference.audio","CMIInteger","-9999,100","0",sdNew);
    sdNew = new ScormData("rw","0","cmi.student_preference.language","CMIString255","","",sdNew);
    sdNew = new ScormData("rw","0","cmi.student_preference.speed","CMIInteger","-100,100","0",sdNew);
    sdNew = new ScormData("rw","0","cmi.student_preference.text","CMIInteger","","0",sdNew);
    sdNew = new ScormData("rw","0","cmi.suspend_data","CMIString4096","-1,1","",sdNew);
    sdNew.storeLocal = true
}
function ScormData(mode,lastError,name,type,range,value,prev)
{
    this.mode = mode;
    this.lastError = lastError;
    this.name = name;
    this.type = type;
    this.range = range;
    this.value = value;
    this.storeLocal = false;
    if(prev == null)
        this.next = null;
    else
    {
        this.next = prev.next;
        prev.next = this
    }
    this.setValue = setValue;
    this.insertAlpha = insertAlpha
}
var storage = function()
    {
        var lStorage,
            fail,
            uid;
        try
        {
            uid = new Date;
            (lStorage = window.localStorage).setItem(uid,uid);
            fail = lStorage.getItem(uid) != uid;
            lStorage.removeItem(uid);
            fail && (lStorage = false)
        }
        catch(e)
        {
        }
        return{localStorage:lStorage,setItem:function(name,value)
        {
            if(lStorage)
                lStorage.setItem(name,value);
            else
            {
                var exdate = new Date(2020,0,1),
                    c_value = escape(value) + "; expires=" + exdate.toUTCString();
                document.cookie = name + "=" + c_value
            }
        },getItem:function(name)
        {
            if(lStorage)
                return lStorage.getItem(name);
            else
                for(var x,
                    y,
                    ARRcookies = document.cookie.split(";"),
                    i = 0; i < ARRcookies.length; i++)
                {
                    x = ARRcookies[i].substr(0,ARRcookies[i].indexOf("="));
                    y = ARRcookies[i].substr(ARRcookies[i].indexOf("=") + 1);
                    x = x.replace(/^\s+|\s+$/g,"");
                    if(x == name)
                        return unescape(y)
                }
        }}
    }();
function iniStorageKeyName()
{
    var oXml = getXmlDocument("version.xml"),
        aVersionXml = oXml.getElementsByTagName("version");
    if(aVersionXml.length)
    {
        var sCourseId = aVersionXml[0].getAttribute("id");
        if(sCourseId)
            sStorageKeyName += sCourseId
    }
}
function getAllLMSData()
{
    var lmsSdDate = 0;
    if(lmsAPI != null)
        if(lmsAPI.LMSInitialize("") == "true")
        {
            for(var sdCur = sdList; sdCur != null; sdCur = sdCur.next)
                if(sdCur.mode == "ro" || sdCur.mode == "rw")
                {
                    getLMSData(sdCur);
                    if(sdCur.name == "cmi.suspend_data")
                        lmsSdDate = getSuspendDataDate(sdCur.value)
                }
            getObjectives()
        }
    try
    {
        var localScormData = storage.getItem(sStorageKeyName);
        if(localScormData)
        {
            for(var aScormData = JSON.parse(localScormData),
                localSdDate = 0,
                i = 0; i < aScormData.length; i = i + 2)
                if(aScormData[i] == "cmi.suspend_data")
                {
                    localSdDate = getSuspendDataDate(aScormData[i + 1]);
                    break
                }
            localSdDate > lmsSdDate && 
                restoreBuff(aScormData)
        }
    }
    catch(e)
    {
    }
}
function getSuspendDataDate(suspend_data)
{
    if(!suspend_data)
        return 0;
    for(var aParts = suspend_data.split("{{"),
        i = 0; i < aParts.length; i = i + 2)
        if(aParts[i] == "DATE")
            return aParts[i + 1] + 0
}
function getLMSData(sdCur)
{
    var sData = lmsAPI.LMSGetValue(sdCur.name);
    sdCur.lastError = lmsAPI.LMSGetLastError();
    sdCur.setValue(sData);
    sLastError = sdCur.lastError
}
function locateData(sName)
{
    for(var sdCur = sdList; sdCur != null; sdCur = sdCur.next)
        if(sdCur.name == sName)
            return sdCur;
    return null
}
function setValue(sData)
{
    var aParts,
        sVal;
    sData += "";
    this.value = sData;
    this.lastError = "0";
    if(this.type == "CMIString4096")
    {
        if(sData.length > 4096)
            this.lastError = "405"
    }
    else
        if(this.type == "CMIString255")
        {
            if(sData.length > 255)
                this.lastError = "405"
        }
        else
            if(this.type == "CMIIdentifier")
            {
                if(sData.length > 255)
                    this.lastError = "405";
                if(sData.indexOf(" ") >= 0)
                    this.lastError = "405"
            }
            else
                if(this.type == "CMITimespan" || this.type == "CMITime")
                {
                    if(sData == "")
                        return;
                    aParts = sData.split(":");
                    if(aParts.length < 3 || aParts[0].length < 2 || aParts[1].length < 2 || aParts[2].length < 2 || isNaN(aParts[0]) == true || isNaN(aParts[1]) == true || isNaN(aParts[2]) == true)
                        this.lastError = "205";
                    else
                    {
                        aParts = aParts[2].split(".");
                        if(aParts.length > 1)
                            if(aParts[1].length > 2)
                                this.lastError = "205"
                    }
                }
                else
                    if(this.type == "CMIInteger")
                    {
                        if(sData == "")
                            return;
                        if(isNaN(sData) == true || sData != Math.floor(sData))
                            this.lastError = "405"
                    }
                    else
                        if(this.type == "CMIDecimal")
                        {
                            if(sData == "")
                                return;
                            if(isNaN(sData) == true)
                                this.lastError = "405"
                        }
                        else
                            if(this.type == "CMIVocabulary")
                            {
                                aParts = this.range.split(":");
                                for(i = 0; i < aParts.length; i++)
                                {
                                    if(aParts[i] == '""')
                                        sVal = "";
                                    else
                                        sVal = aParts[i].substring(1,aParts[i].length - 1);
                                    if(sVal == sData)
                                        return;
                                    if(sVal == "CMIDecimal" && isNaN(sData) == false)
                                        return
                                }
                                this.lastError = "405"
                            }
}
function insertAlpha(sdTheList)
{
    if(sdTheList == null)
        return this;
    if(this.name < sdTheList.name)
    {
        this.next = sdTheList;
        return this
    }
    for(var sdNext,
        sdCur = sdTheList; sdCur != null; sdCur = sdCur.next)
    {
        if(sdCur.next == null)
        {
            sdCur.next = this;
            return sdTheList
        }
        sdNext = sdCur.next;
        if(this.name < sdNext.name)
        {
            this.next = sdNext;
            sdCur.next = this;
            return sdTheList
        }
    }
}
function getObjectives()
{
    var sChildren = lmsAPI.LMSGetValue("cmi.objectives._children"),
        sError = lmsAPI.LMSGetLastError();
    if(sError != "0")
        return;
    var nCount = lmsAPI.LMSGetValue("cmi.objectives._count") - 0;
    sError = lmsAPI.LMSGetLastError();
    if(sError != "0")
        return;
    for(var bId = sChildren.indexOf("id"),
        bScore = sChildren.indexOf("score"),
        bStatus = sChildren.indexOf("status"),
        sdNew = locateData(sName),
        sName,
        sValue,
        bMin,
        bMax,
        bRaw,
        i = 0; i < nCount; i++)
    {
        if(bId)
        {
            sName = "cmi.objectives." + i + ".id";
            sdNew = new ScormData("rw","0",sName,"CMIIdentifier","","",sdNew);
            getLMSData(sdNew)
        }
        if(bScore)
        {
            sName = "cmi.objectives." + i + ".score_children";
            sValue = lmsAPI.LMSGetValue(sName);
            sError = lmsAPI.LMSGetLastError();
            if(sError != "0")
            {
                bMin = sChildren.indexOf("min");
                bMax = sChildren.indexOf("max");
                bRaw = sChildren.indexOf("raw");
                if(bMin)
                {
                    sName = "cmi.objectives." + i + ".score.min";
                    sdNew = new ScormData("rw","0",sName,"CMIDecimal","0,100","",sdNew);
                    getLMSData(sdNew)
                }
                if(bMax)
                {
                    sName = "cmi.objectives." + i + ".score.max";
                    sdNew = new ScormData("rw","0",sName,"CMIDecimal","0,100","",sdNew);
                    getLMSData(sdNew)
                }
                if(bRaw)
                {
                    sName = "cmi.objectives." + i + ".score.raw";
                    sdNew = new ScormData("rw","0",sName,"CMIDecimal","0,100","",sdNew);
                    getLMSData(sdNew)
                }
            }
        }
        if(bStatus)
        {
            sName = "cmi.objectives." + i + ".status";
            sdNew = new ScormData("rw","0",sName,"CMIVocabulary",'"passed":"completed":"failed":"incomplete":"browsed":"not attempted"',"",sdNew);
            getLMSData(sdNew)
        }
    }
}
function storeScormDataLocal()
{
    for(var scormData = [],
        sdCur = sdList; sdCur != null; sdCur = sdCur.next)
    {
        if(!storage.localStorage && !sdCur.storeLocal)
            continue;
        scormData.push(sdCur.name);
        scormData.push(sdCur.value)
    }
    var sScormData = JSON.stringify(scormData);
    storage.setItem(sStorageKeyName,sScormData);
    sScormData != storage.getItem(sStorageKeyName) && 
        storage.setItem(sStorageKeyName,"")
}
function restoreBuff(aState)
{
    if(!aState || !aState.length)
        return;
    for(var sName,
        sValue,
        sdCur,
        sdNew,
        i = 0; i < aState.length; i = i + 2)
    {
        sName = aState[i];
        if(sName == "")
            break;
        sValue = aState[i + 1];
        sdCur = locateData(sName);
        if(sdCur != null)
            sdCur.value = sValue;
        else
        {
            sdNew = createScormData(sName);
            if(sdNew != null)
            {
                sdNew.insertAlpha(sdList);
                sdNew.value = sValue
            }
        }
    }
}
var logWindow = null;
function showLog(sData)
{
    if(_debug)
    {
        if(logWindow == null)
            logWindow = open("","logWindow","width=600,height=600,scrollbars=yes,resizable=yes");
        logWindow && !logWindow.closed && 
            logWindow.document.write(sData + "</br />")
    }
}
function launchIt()
{
    document.getElementById("SCO").src = "LaunchPopup.htm"
}
function getXmlDocument(sFile)
{
    var xmlHttp,
        oXML;
    try
    {
        xmlHttp = new XMLHttpRequest;
        xmlHttp.open("GET",sFile,false);
        xmlHttp.send(null);
        oXML = xmlHttp.responseXML
    }
    catch(e)
    {
        xmlHttp = getXMLObject();
        xmlHttp.async = false;
        xmlHttp.load(sFile);
        oXML = xmlHttp
    }
    return oXML
}
function getXMLObject()
{
    for(var aVersions = ["Msxml2.DOMDocument.6.0","Msxml2.DOMDocument.3.0"],
        i = 0; i < aVersions.length; i++)
        try
        {
            return new ActiveXObject(aVersions[i])
        }
        catch(e)
        {
        }
    return null
}
function finishSession()
{
    var sdStatus,
        sdRaw,
        sdMastery,
        sdExit,
        sdEntry,
        sdSession,
        sdTotal;
    if(!bFinish)
    {
        bFinish = true;
        sdStatus = locateData("cmi.core.lesson_status");
        if(sdStatus.value == "not attempted")
            sdStatus.value = "completed";
        sdRaw = locateData("cmi.core.score.raw");
        if(sdRaw.value != "")
        {
            sdMastery = locateData("cmi.student_data.mastery_score");
            if(sdMastery.value != "")
                if(parseFloat(sdRaw.value) >= parseFloat(sdMastery.value))
                    sdStatus.value = "passed";
                else
                    sdStatus.value = "failed"
        }
        sdExit = locateData("cmi.core.exit");
        sdEntry = locateData("cmi.core.entry");
        if(sdExit.value = "suspend")
            sdEntry.value = "resume";
        else
            sdEntry.value = "";
        sdSession = locateData("cmi.core.session_time");
        sdTotal = locateData("cmi.core.total_time");
        sdTotal.value = addTimes(sdTotal.value,sdSession.value)
    }
}
function addTimes(timeTotal,timeSession)
{
    if(timeSession == "")
        return timeTotal;
    for(var aTotal = timeTotal.split(":"),
        aSession = timeSession.split(":"),
        i = 0; i < 3; i++)
    {
        aTotal[i] -= 0;
        aSession[i] -= 0
    }
    var nMin = 0,
        nHour = 0;
    aTotal[2] += aSession[2];
    if(aTotal[2] > 60)
    {
        nMin = 1;
        aTotal[2] -= 60
    }
    aTotal[1] += aSession[1] + nMin;
    if(aTotal[1] > 60)
    {
        nHour = 1;
        aTotal[1] -= 60
    }
    aTotal[0] += aSession[0] + nHour;
    for(i = 0; i < 3; i++)
    {
        aTotal[i] = Math.floor((aTotal[i] - 0) * 100) / 100;
        aTotal[i] += "";
        if(aTotal[i].length < 2)
            aTotal[i] = "0" + aTotal[i]
    }
    return aTotal.join(":")
}
function findAPI(win)
{
    while(win.API == null && win.parent != null && win.parent != win)
        win = win.parent;
    return win.API
}
function initAPI(win)
{
    if(win.parent != null && win != win.parent)
        lmsAPI = findAPI(win.parent);
    else
        if(win.opener != null)
            lmsAPI = findAPI(win.opener);
        else
            lmsAPI = null
}
function LMSInitialize(value)
{
    bInitialized = true;
    var sData = "";
    if(lmsAPI != null)
    {
        sReturn = lmsAPI.LMSInitialize(value);
        sLastError = lmsAPI.LMSGetLastError()
    }
    else
    {
        sReturn = "true";
        if(value != "")
            sLastError = "201";
        else
            sLastError = "0"
    }
    if(value != "")
        sData += "<br>Your call to LMSInitialize passed an illegal value = (" + value + ")<br>";
    sData += "Called LMSInitialize(" + value + ") - returned: " + sReturn;
    showLog(sData);
    return sReturn
}
function LMSFinish(value)
{
    var sReturn,
        sData = "";
    if(lmsAPI != null)
        sReturn = lmsAPI.LMSFinish(value);
    else
    {
        sReturn = "true";
        if(value != "")
            sLastError = "201";
        else
            sLastError = "0";
        sData = checkInit(sData)
    }
    if(value != "")
        sData += "<br>The call to LMSFinish passed an illegal value = (" + value + ")<br>";
    sData += "Called LMSFinish(" + value + ") - returned: " + sReturn;
    showLog(sData);
    return sReturn
}
function checkInit(sData)
{
    if(!bInitialized)
    {
        sData += "<br><b>Error:</b>Illegal Function call before LMSInitialize.<br>";
        sLastError = "301"
    }
    return sData
}
function LMSGetValue(sName)
{
    var sReturn,
        sdCur,
        sPart,
        sData = "";
    sLastError = "0";
    if(sName.indexOf("cmi.objectives") == 0 && sName.indexOf("score._children") > -1)
    {
        sData += "Called LMSGetValue(" + sName + ') - returned: "raw,min,max"';
        showLog(sData);
        return"raw,min,max"
    }
    if(lmsAPI != null)
        sReturn = lmsAPI.LMSGetValue(sName);
    else
    {
        sdCur = locateData(sName);
        sReturn = "";
        if(sdCur != null)
            if(sdCur.mode == "wo")
                sLastError = "404";
            else
                sReturn = sdCur.value;
        else
        {
            if(sName.indexOf("._children") > -1)
            {
                sPart = sName.substring(0,sName.lastIndexOf("._children"));
                sdCur = locateData(sPart);
                if(sdCur != null)
                    sLastError = "202"
            }
            else
                if(sName.indexOf("._count") > -1)
                {
                    sPart = sName.substring(0,sName.lastIndexOf("._count"));
                    sdCur = locateData(sPart);
                    if(sdCur != null)
                        sLastError = "203";
                    else
                    {
                        var sdNew = new ScormData("ro","0",sName,"CMIInteger","",0,null);
                        sdNew != null && 
                            sdNew.insertAlpha(sdList);
                        sReturn = "0"
                    }
                }
            if(sLastError == "0")
                sLastError = "201"
        }
        sData = checkInit(sData)
    }
    sData += "Called LMSGetValue(" + sName + ') - returned: "' + sReturn + '"';
    showLog(sData);
    return sReturn + ""
}
function LMSSetValue(sName,sValue)
{
    var sdCur,
        sdNew,
        sReturn,
        sData = "";
    if(lmsAPI != null)
    {
        sReturn = lmsAPI.LMSSetValue(sName,sValue);
        if(sReturn == "true")
        {
            sdCur = locateData(sName);
            if(sdCur != null)
                sdCur.value = sValue;
            else
            {
                sdNew = createScormData(sName);
                if(sdNew != null)
                {
                    sdNew.insertAlpha(sdList);
                    sdNew.value = sValue
                }
            }
        }
    }
    else
    {
        sdCur = locateData(sName);
        sReturn = "false";
        if(sdCur != null)
            if(sdCur.mode == "wo" || sdCur.mode == "rw")
            {
                sdCur.setValue(sValue);
                sLastError = sdCur.lastError;
                if(sLastError == "0")
                    sReturn = "true"
            }
            else
                sLastError = "403";
        else
        {
            sdNew = createScormData(sName);
            if(sdNew != null)
            {
                sdNew.insertAlpha(sdList);
                sdNew.setValue(sValue);
                sLastError = sdNew.lastError;
                sReturn = "true"
            }
            else
                sLastError = "201"
        }
        sData = checkInit(sData)
    }
    storeScormDataLocal();
    sData += "Called LMSSetValue(" + sName + ', "' + sValue + '") - returned: ' + sReturn;
    showLog(sData);
    return sReturn
}
function createScormData(sName)
{
    var nNum,
        sMode,
        sType,
        sdCur,
        nCurCount;
    sLastError = "201";
    var sRange = "";
    if(sName.match(/^cmi\.objectives\.(\d{1,})\./))
    {
        nNum = RegExp.$1 - 0;
        sMode = "rw";
        if(sName.match(/^cmi\.objectives\.\d{1,}\.id$/))
            sType = "CMIIdentifier";
        else
            if(sName.match(/^cmi\.objectives\.\d{1,}\.score\.(min|max|raw)$/))
            {
                sType = "CMIDecimal";
                sRange = "0,100"
            }
            else
                if(sName.match(/^cmi\.objectives\.\d{1,}\.status$/))
                {
                    sType = "CMIVocabulary";
                    sRange = '"passed":"completed":"failed":"incomplete":"browsed":"not attempted"'
                }
                else
                    return null;
        sdCur = locateData("cmi.objectives._count");
        nCurCount = sdCur.value - 0;
        if(nNum > nCurCount + 1)
            return null;
        if(nNum == nCurCount)
            sdCur.value += 1 - 0;
        return new ScormData(sMode,"0",sName,sType,sRange,"",null)
    }
    else
        if(sName.match(/^cmi\.interactions\.(\d{1,})\./))
        {
            nNum = RegExp.$1 - 0;
            sMode = "wo";
            if(sName.match(/^cmi\.interactions\.\d{1,}\.id$/))
                sType = "CMIIdentifier";
            else
                if(sName.match(/^cmi\.interactions\.\d{1,}\.objectives._count$/))
                {
                    sLastError = "403";
                    return null
                }
                else
                    if(sName.match(/^cmi\.interactions\.(\d{1,})\.objectives.(\d{1,}).id$/))
                    {
                        sCount = "cmi.interactions." + RegExp.$1 + ".objectives._count";
                        sdCur = locateData(sCount);
                        if(sdCur == null)
                            if(RegExp.$2 == 0)
                            {
                                sdCur = new ScormData("r","0",sCount,"CMIInteger","",1,null);
                                sdCur.insertAlpha(sdList)
                            }
                            else
                                return null;
                        else
                        {
                            nCurCount = sdCur.value - 0;
                            if(RegExp.$2 > nCurCount + 1)
                                return null;
                            if(nNum == nCurCount)
                                sdCur.value += 1 - 0
                        }
                        sType = "CMIIdentifier"
                    }
                    else
                        if(sName.match(/^cmi\.interactions\.\d{1,}\.time$/))
                            sType = "CMITime";
                        else
                            if(sName.match(/^cmi\.interactions\.\d{1,}\.type$/))
                            {
                                sType = "CMIVocabulary";
                                sRange = '"true-false":"choice":"fill-in":"matching":"performance":"likert":"sequencing":"numeric"'
                            }
                            else
                                if(sName.match(/^cmi\.interactions\.\d{1,}\.correct_responses._count$/))
                                {
                                    sLastError = "403";
                                    return null
                                }
                                else
                                    if(sName.match(/^cmi\.interactions\.(\d{1,})\.correct_responses.(\d{1,}).pattern$/))
                                    {
                                        sCount = "cmi.interactions." + RegExp.$1 + ".correct_responses._count";
                                        sdCur = locateData(sCount);
                                        if(sdCur == null)
                                            if(RegExp.$2 == 0)
                                            {
                                                sdCur = new ScormData("r","0",sCount,"CMIInteger","","1",null);
                                                sdCur.insertAlpha(sdList)
                                            }
                                            else
                                                return null;
                                        else
                                        {
                                            nCurCount = sdCur.value - 0;
                                            if(RegExp.$2 > nCurCount + 1)
                                                return null;
                                            if(nNum == nCurCount)
                                                sdCur.value += 1 - 0
                                        }
                                        sType = "CMIFeedback"
                                    }
                                    else
                                        if(sName.match(/^cmi\.interactions\.\d{1,}\.weighting$/))
                                            sType = "CMIDecimal";
                                        else
                                            if(sName.match(/^cmi\.interactions\.\d{1,}\.student_response$/))
                                                sType = "CMIFeedback";
                                            else
                                                if(sName.match(/^cmi\.interactions\.\d{1,}\.result$/))
                                                {
                                                    sType = "CMIVocabulary";
                                                    sRange = '"correct":"wrong":"unanticipated":"neutral":"CMIDecimal"'
                                                }
                                                else
                                                    if(sName.match(/^cmi\.interactions\.\d{1,}\.latency$/))
                                                        sType = "CMITimespan";
                                                    else
                                                        return null;
            sdCur = locateData("cmi.interactions._count");
            nCurCount = sdCur.value - 0;
            if(nNum > nCurCount + 1)
                return null;
            if(nNum == nCurCount)
                sdCur.value += 1 - 0;
            return new ScormData(sMode,"0",sName,sType,sRange,"",null)
        }
    sLastError = "201";
    return null
}
function LMSGetLastError()
{
    var sData = "";
    if(lmsAPI != null)
        sLastError = lmsAPI.LMSGetLastError();
    sData += "Called LMSGetLastError() - returned: " + sLastError;
    showLog(sData);
    return sLastError
}
function LMSGetErrorString(value)
{
    var sReturn = "",
        sData = "";
    if(lmsAPI != null)
        sReturn = lmsAPI.LMSGetErrorString(value);
    else
        if(value == "0")
            sReturn = "No error";
        else
            if(value == "101")
                sReturn = "General exception";
            else
                if(value == "201")
                    sReturn = "Invalid argument error";
                else
                    if(value == "202")
                        sReturn = "Element cannot have children";
                    else
                        if(value == "203")
                            sReturn = "Element not an array \ufffd cannot have count";
                        else
                            if(value == "301")
                                sReturn = "Not initialized";
                            else
                                if(value == "401")
                                    sReturn = "Not implemented error";
                                else
                                    if(value == "402")
                                        sReturn = "Invalid set value, element is a keyword";
                                    else
                                        if(value == "403")
                                            sReturn = "Element is read only";
                                        else
                                            if(value == "404")
                                                sReturn = "Element is write only";
                                            else
                                                if(value == "405")
                                                    sReturn = "Incorrect Data Type";
                                                else
                                                    sData += "<br>Illegal value passed to LMSGetErrorString, value = (" + value + ")<br>";
    sData += "Called LMSGetErrorString(" + value + ") - returned: " + sReturn;
    showLog(sData);
    return sReturn
}
function LMSCommit(value)
{
    var sReturn,
        sData = "";
    if(lmsAPI != null)
        sReturn = lmsAPI.LMSCommit(value);
    else
        sReturn = "true";
    if(value != "")
        sData += "<br>LMSCommit passed an illegal value = (" + value + ")<br>";
    sData += "Called LMSCommit(" + value + ") - returned: " + sReturn;
    showLog(sData);
    return sReturn
}
function LMSGetDiagnostic(value)
{
    var sData = "";
    if(lmsAPI != null)
        sReturn = lmsAPI.LMSGetDiagnostic(value);
    else
        sReturn = "REPLY HAZY, TRY AGAIN";
    sData += "Called LMSGetDiagnostic(" + value + ") - returned: " + sReturn;
    showLog(sData);
    return sReturn
}

// SIG // Begin signature block
// SIG // MIIauwYJKoZIhvcNAQcCoIIarDCCGqgCAQExCzAJBgUr
// SIG // DgMCGgUAMGcGCisGAQQBgjcCAQSgWTBXMDIGCisGAQQB
// SIG // gjcCAR4wJAIBAQQQEODJBs441BGiowAQS9NQkAIBAAIB
// SIG // AAIBAAIBAAIBADAhMAkGBSsOAwIaBQAEFE2NWCKDmdTi
// SIG // LbZ60yH7O72jnGkmoIIVgjCCBMMwggOroAMCAQICEzMA
// SIG // AAArOTJIwbLJSPMAAAAAACswDQYJKoZIhvcNAQEFBQAw
// SIG // dzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
// SIG // b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
// SIG // Y3Jvc29mdCBDb3Jwb3JhdGlvbjEhMB8GA1UEAxMYTWlj
// SIG // cm9zb2Z0IFRpbWUtU3RhbXAgUENBMB4XDTEyMDkwNDIx
// SIG // MTIzNFoXDTEzMTIwNDIxMTIzNFowgbMxCzAJBgNVBAYT
// SIG // AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
// SIG // EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
// SIG // cG9yYXRpb24xDTALBgNVBAsTBE1PUFIxJzAlBgNVBAsT
// SIG // Hm5DaXBoZXIgRFNFIEVTTjpDMEY0LTMwODYtREVGODEl
// SIG // MCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2Vy
// SIG // dmljZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAKa2MA4DZa5QWoZrhZ9IoR7JwO5eSQeF4HCWfL65
// SIG // X2JfBibTizm7GCKlLpKt2EuIOhqvm4OuyF45jMIyexZ4
// SIG // 7Tc4OvFi+2iCAmjs67tAirH+oSw2YmBwOWBiDvvGGDhv
// SIG // sJLWQA2Apg14izZrhoomFxj/sOtNurspE+ZcSI5wRjYm
// SIG // /jQ1qzTh99rYXOqZfTG3TR9X63zWlQ1mDB4OMhc+LNWA
// SIG // oc7r95iRAtzBX/04gPg5f11kyjdcO1FbXYVfzh4c+zS+
// SIG // X+UoVXBUnLjsfABVRlsomChWTOHxugkZloFIKjDI9zMg
// SIG // bOdpw7PUw07PMB431JhS1KkjRbKuXEFJT7RiaJMCAwEA
// SIG // AaOCAQkwggEFMB0GA1UdDgQWBBSlGDNTP5VgoUMW747G
// SIG // r9Irup5Y0DAfBgNVHSMEGDAWgBQjNPjZUkZwCu1A+3b7
// SIG // syuwwzWzDzBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8v
// SIG // Y3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0
// SIG // cy9NaWNyb3NvZnRUaW1lU3RhbXBQQ0EuY3JsMFgGCCsG
// SIG // AQUFBwEBBEwwSjBIBggrBgEFBQcwAoY8aHR0cDovL3d3
// SIG // dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNyb3Nv
// SIG // ZnRUaW1lU3RhbXBQQ0EuY3J0MBMGA1UdJQQMMAoGCCsG
// SIG // AQUFBwMIMA0GCSqGSIb3DQEBBQUAA4IBAQB+zLB75S++
// SIG // 51a1z3PbqlLRFjnGtM361/4eZbXnSPObRogFZmomhl7+
// SIG // h1jcxmOOOID0CEZ8K3OxDr9BqsvHqpSkN/BkOeHF1fnO
// SIG // B86r5CXwaa7URuL+ZjI815fFMiH67holoF4MQiwRMzqC
// SIG // g/3tHbO+zpGkkSVxuatysJ6v5M8AYolwqbhKUIzuLyJk
// SIG // pajmTWuVLBx57KejMdqQYJCkbv6TAg0/LCQNxmomgVGD
// SIG // ShC7dWNEqmkIxgPr4s8L7VY67O9ypwoM9ADTIrivInKz
// SIG // 58ScCyiggMrj4dc5ZjDnRhcY5/qC+lkLeryoDf4c/wOL
// SIG // Y7JNEgIjTy2zhYQ74qFH6M8VMIIE7DCCA9SgAwIBAgIT
// SIG // MwAAALARrwqL0Duf3QABAAAAsDANBgkqhkiG9w0BAQUF
// SIG // ADB5MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGlu
// SIG // Z3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV
// SIG // TWljcm9zb2Z0IENvcnBvcmF0aW9uMSMwIQYDVQQDExpN
// SIG // aWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQTAeFw0xMzAx
// SIG // MjQyMjMzMzlaFw0xNDA0MjQyMjMzMzlaMIGDMQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMQ0wCwYDVQQLEwRNT1BSMR4wHAYD
// SIG // VQQDExVNaWNyb3NvZnQgQ29ycG9yYXRpb24wggEiMA0G
// SIG // CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDor1yiIA34
// SIG // KHy8BXt/re7rdqwoUz8620B9s44z5lc/pVEVNFSlz7SL
// SIG // qT+oN+EtUO01Fk7vTXrbE3aIsCzwWVyp6+HXKXXkG4Un
// SIG // m/P4LZ5BNisLQPu+O7q5XHWTFlJLyjPFN7Dz636o9UEV
// SIG // XAhlHSE38Cy6IgsQsRCddyKFhHxPuRuQsPWj/ov0DJpO
// SIG // oPXJCiHiquMBNkf9L4JqgQP1qTXclFed+0vUDoLbOI8S
// SIG // /uPWenSIZOFixCUuKq6dGB8OHrbCryS0DlC83hyTXEmm
// SIG // ebW22875cHsoAYS4KinPv6kFBeHgD3FN/a1cI4Mp68fF
// SIG // SsjoJ4TTfsZDC5UABbFPZXHFAgMBAAGjggFgMIIBXDAT
// SIG // BgNVHSUEDDAKBggrBgEFBQcDAzAdBgNVHQ4EFgQUWXGm
// SIG // WjNN2pgHgP+EHr6H+XIyQfIwUQYDVR0RBEowSKRGMEQx
// SIG // DTALBgNVBAsTBE1PUFIxMzAxBgNVBAUTKjMxNTk1KzRm
// SIG // YWYwYjcxLWFkMzctNGFhMy1hNjcxLTc2YmMwNTIzNDRh
// SIG // ZDAfBgNVHSMEGDAWgBTLEejK0rQWWAHJNy4zFha5TJoK
// SIG // HzBWBgNVHR8ETzBNMEugSaBHhkVodHRwOi8vY3JsLm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWND
// SIG // b2RTaWdQQ0FfMDgtMzEtMjAxMC5jcmwwWgYIKwYBBQUH
// SIG // AQEETjBMMEoGCCsGAQUFBzAChj5odHRwOi8vd3d3Lm1p
// SIG // Y3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY0NvZFNpZ1BD
// SIG // QV8wOC0zMS0yMDEwLmNydDANBgkqhkiG9w0BAQUFAAOC
// SIG // AQEAMdduKhJXM4HVncbr+TrURE0Inu5e32pbt3nPApy8
// SIG // dmiekKGcC8N/oozxTbqVOfsN4OGb9F0kDxuNiBU6fNut
// SIG // zrPJbLo5LEV9JBFUJjANDf9H6gMH5eRmXSx7nR2pEPoc
// SIG // sHTyT2lrnqkkhNrtlqDfc6TvahqsS2Ke8XzAFH9IzU2y
// SIG // RPnwPJNtQtjofOYXoJtoaAko+QKX7xEDumdSrcHps3Om
// SIG // 0mPNSuI+5PNO/f+h4LsCEztdIN5VP6OukEAxOHUoXgSp
// SIG // Rm3m9Xp5QL0fzehF1a7iXT71dcfmZmNgzNWahIeNJDD3
// SIG // 7zTQYx2xQmdKDku/Og7vtpU6pzjkJZIIpohmgjCCBbww
// SIG // ggOkoAMCAQICCmEzJhoAAAAAADEwDQYJKoZIhvcNAQEF
// SIG // BQAwXzETMBEGCgmSJomT8ixkARkWA2NvbTEZMBcGCgmS
// SIG // JomT8ixkARkWCW1pY3Jvc29mdDEtMCsGA1UEAxMkTWlj
// SIG // cm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5
// SIG // MB4XDTEwMDgzMTIyMTkzMloXDTIwMDgzMTIyMjkzMlow
// SIG // eTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
// SIG // b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
// SIG // Y3Jvc29mdCBDb3Jwb3JhdGlvbjEjMCEGA1UEAxMaTWlj
// SIG // cm9zb2Z0IENvZGUgU2lnbmluZyBQQ0EwggEiMA0GCSqG
// SIG // SIb3DQEBAQUAA4IBDwAwggEKAoIBAQCycllcGTBkvx2a
// SIG // YCAgQpl2U2w+G9ZvzMvx6mv+lxYQ4N86dIMaty+gMuz/
// SIG // 3sJCTiPVcgDbNVcKicquIEn08GisTUuNpb15S3GbRwfa
// SIG // /SXfnXWIz6pzRH/XgdvzvfI2pMlcRdyvrT3gKGiXGqel
// SIG // cnNW8ReU5P01lHKg1nZfHndFg4U4FtBzWwW6Z1KNpbJp
// SIG // L9oZC/6SdCnidi9U3RQwWfjSjWL9y8lfRjFQuScT5EAw
// SIG // z3IpECgixzdOPaAyPZDNoTgGhVxOVoIoKgUyt0vXT2Pn
// SIG // 0i1i8UU956wIAPZGoZ7RW4wmU+h6qkryRs83PDietHdc
// SIG // pReejcsRj1Y8wawJXwPTAgMBAAGjggFeMIIBWjAPBgNV
// SIG // HRMBAf8EBTADAQH/MB0GA1UdDgQWBBTLEejK0rQWWAHJ
// SIG // Ny4zFha5TJoKHzALBgNVHQ8EBAMCAYYwEgYJKwYBBAGC
// SIG // NxUBBAUCAwEAATAjBgkrBgEEAYI3FQIEFgQU/dExTtMm
// SIG // ipXhmGA7qDFvpjy82C0wGQYJKwYBBAGCNxQCBAweCgBT
// SIG // AHUAYgBDAEEwHwYDVR0jBBgwFoAUDqyCYEBWJ5flJRP8
// SIG // KuEKU5VZ5KQwUAYDVR0fBEkwRzBFoEOgQYY/aHR0cDov
// SIG // L2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwvcHJvZHVj
// SIG // dHMvbWljcm9zb2Z0cm9vdGNlcnQuY3JsMFQGCCsGAQUF
// SIG // BwEBBEgwRjBEBggrBgEFBQcwAoY4aHR0cDovL3d3dy5t
// SIG // aWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNyb3NvZnRS
// SIG // b290Q2VydC5jcnQwDQYJKoZIhvcNAQEFBQADggIBAFk5
// SIG // Pn8mRq/rb0CxMrVq6w4vbqhJ9+tfde1MOy3XQ60L/svp
// SIG // LTGjI8x8UJiAIV2sPS9MuqKoVpzjcLu4tPh5tUly9z7q
// SIG // QX/K4QwXaculnCAt+gtQxFbNLeNK0rxw56gNogOlVuC4
// SIG // iktX8pVCnPHz7+7jhh80PLhWmvBTI4UqpIIck+KUBx3y
// SIG // 4k74jKHK6BOlkU7IG9KPcpUqcW2bGvgc8FPWZ8wi/1wd
// SIG // zaKMvSeyeWNWRKJRzfnpo1hW3ZsCRUQvX/TartSCMm78
// SIG // pJUT5Otp56miLL7IKxAOZY6Z2/Wi+hImCWU4lPF6H0q7
// SIG // 0eFW6NB4lhhcyTUWX92THUmOLb6tNEQc7hAVGgBd3TVb
// SIG // Ic6YxwnuhQ6MT20OE049fClInHLR82zKwexwo1eSV32U
// SIG // jaAbSANa98+jZwp0pTbtLS8XyOZyNxL0b7E8Z4L5UrKN
// SIG // MxZlHg6K3RDeZPRvzkbU0xfpecQEtNP7LN8fip6sCvsT
// SIG // J0Ct5PnhqX9GuwdgR2VgQE6wQuxO7bN2edgKNAltHIAx
// SIG // H+IOVN3lofvlRxCtZJj/UBYufL8FIXrilUEnacOTj5XJ
// SIG // jdibIa4NXJzwoq6GaIMMai27dmsAHZat8hZ79haDJLmI
// SIG // z2qoRzEvmtzjcT3XAH5iR9HOiMm4GPoOco3Boz2vAkBq
// SIG // /2mbluIQqBC0N1AI1sM9MIIGBzCCA++gAwIBAgIKYRZo
// SIG // NAAAAAAAHDANBgkqhkiG9w0BAQUFADBfMRMwEQYKCZIm
// SIG // iZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWlj
// SIG // cm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBD
// SIG // ZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDcwNDAzMTI1
// SIG // MzA5WhcNMjEwNDAzMTMwMzA5WjB3MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSEwHwYDVQQDExhNaWNyb3NvZnQgVGltZS1T
// SIG // dGFtcCBQQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
// SIG // ggEKAoIBAQCfoWyx39tIkip8ay4Z4b3i48WZUSNQrc7d
// SIG // GE4kD+7Rp9FMrXQwIBHrB9VUlRVJlBtCkq6YXDAm2gBr
// SIG // 6Hu97IkHD/cOBJjwicwfyzMkh53y9GccLPx754gd6udO
// SIG // o6HBI1PKjfpFzwnQXq/QsEIEovmmbJNn1yjcRlOwhtDl
// SIG // KEYuJ6yGT1VSDOQDLPtqkJAwbofzWTCd+n7Wl7PoIZd+
// SIG // +NIT8wi3U21StEWQn0gASkdmEScpZqiX5NMGgUqi+YSn
// SIG // EUcUCYKfhO1VeP4Bmh1QCIUAEDBG7bfeI0a7xC1Un68e
// SIG // eEExd8yb3zuDk6FhArUdDbH895uyAc4iS1T/+QXDwiAL
// SIG // AgMBAAGjggGrMIIBpzAPBgNVHRMBAf8EBTADAQH/MB0G
// SIG // A1UdDgQWBBQjNPjZUkZwCu1A+3b7syuwwzWzDzALBgNV
// SIG // HQ8EBAMCAYYwEAYJKwYBBAGCNxUBBAMCAQAwgZgGA1Ud
// SIG // IwSBkDCBjYAUDqyCYEBWJ5flJRP8KuEKU5VZ5KShY6Rh
// SIG // MF8xEzARBgoJkiaJk/IsZAEZFgNjb20xGTAXBgoJkiaJ
// SIG // k/IsZAEZFgltaWNyb3NvZnQxLTArBgNVBAMTJE1pY3Jv
// SIG // c29mdCBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eYIQ
// SIG // ea0WoUqgpa1Mc1j0BxMuZTBQBgNVHR8ESTBHMEWgQ6BB
// SIG // hj9odHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2Ny
// SIG // bC9wcm9kdWN0cy9taWNyb3NvZnRyb290Y2VydC5jcmww
// SIG // VAYIKwYBBQUHAQEESDBGMEQGCCsGAQUFBzAChjhodHRw
// SIG // Oi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01p
// SIG // Y3Jvc29mdFJvb3RDZXJ0LmNydDATBgNVHSUEDDAKBggr
// SIG // BgEFBQcDCDANBgkqhkiG9w0BAQUFAAOCAgEAEJeKw1wD
// SIG // RDbd6bStd9vOeVFNAbEudHFbbQwTq86+e4+4LtQSooxt
// SIG // YrhXAstOIBNQmd16QOJXu69YmhzhHQGGrLt48ovQ7DsB
// SIG // 7uK+jwoFyI1I4vBTFd1Pq5Lk541q1YDB5pTyBi+FA+mR
// SIG // KiQicPv2/OR4mS4N9wficLwYTp2OawpylbihOZxnLcVR
// SIG // DupiXD8WmIsgP+IHGjL5zDFKdjE9K3ILyOpwPf+FChPf
// SIG // wgphjvDXuBfrTot/xTUrXqO/67x9C0J71FNyIe4wyrt4
// SIG // ZVxbARcKFA7S2hSY9Ty5ZlizLS/n+YWGzFFW6J1wlGys
// SIG // OUzU9nm/qhh6YinvopspNAZ3GmLJPR5tH4LwC8csu89D
// SIG // s+X57H2146SodDW4TsVxIxImdgs8UoxxWkZDFLyzs7BN
// SIG // Z8ifQv+AeSGAnhUwZuhCEl4ayJ4iIdBD6Svpu/RIzCzU
// SIG // 2DKATCYqSCRfWupW76bemZ3KOm+9gSd0BhHudiG/m4LB
// SIG // J1S2sWo9iaF2YbRuoROmv6pH8BJv/YoybLL+31HIjCPJ
// SIG // Zr2dHYcSZAI9La9Zj7jkIeW1sMpjtHhUBdRBLlCslLCl
// SIG // eKuzoJZ1GtmShxN1Ii8yqAhuoFuMJb+g74TKIdbrHk/J
// SIG // mu5J4PcBZW+JC33Iacjmbuqnl84xKf8OxVtc2E0bodj6
// SIG // L54/LlUWa8kTo/0xggSlMIIEoQIBATCBkDB5MQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMSMwIQYDVQQDExpNaWNyb3NvZnQg
// SIG // Q29kZSBTaWduaW5nIFBDQQITMwAAALARrwqL0Duf3QAB
// SIG // AAAAsDAJBgUrDgMCGgUAoIG+MBkGCSqGSIb3DQEJAzEM
// SIG // BgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsxDjAMBgor
// SIG // BgEEAYI3AgEVMCMGCSqGSIb3DQEJBDEWBBTaLBzgfGds
// SIG // PL6KcpeDPyzCP5GKEjBeBgorBgEEAYI3AgEMMVAwTqAm
// SIG // gCQATQBpAGMAcgBvAHMAbwBmAHQAIABMAGUAYQByAG4A
// SIG // aQBuAGehJIAiaHR0cDovL3d3dy5taWNyb3NvZnQuY29t
// SIG // L2xlYXJuaW5nIDANBgkqhkiG9w0BAQEFAASCAQBvWkpZ
// SIG // DkzE4JxXq8o29WBjoi14pWpny22/C1E8GnOREzKKjMWi
// SIG // lEe7kjf5fPgl7L4FYxLxmO/i5qpyJu3QQOQqVbDmAfbd
// SIG // Fe+EWXI+MB54X4qAiSEwQfVbLMd1dP/3wk2nGT5KsCIT
// SIG // QJ1drwv7oJg3QTibDTRdfqvuPXGQ+e0bf6eJoeYR/Apd
// SIG // WUdBhOOdP1dWX2BkJFsItuzVoyKs2Ebw4q6AfJoyany2
// SIG // aVsEzP8361GLBl95Yh30K3dWNJ++kBEWIBo/YNzXm4y8
// SIG // 8+esOG6eeq0rW0lvB+8Gi+TBjUbSpSk79iDlj96pnoFS
// SIG // Pg/CQAF+7XNS8vLPb0PXKtaqEtJaoYICKDCCAiQGCSqG
// SIG // SIb3DQEJBjGCAhUwggIRAgEBMIGOMHcxCzAJBgNVBAYT
// SIG // AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
// SIG // EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
// SIG // cG9yYXRpb24xITAfBgNVBAMTGE1pY3Jvc29mdCBUaW1l
// SIG // LVN0YW1wIFBDQQITMwAAACs5MkjBsslI8wAAAAAAKzAJ
// SIG // BgUrDgMCGgUAoF0wGAYJKoZIhvcNAQkDMQsGCSqGSIb3
// SIG // DQEHATAcBgkqhkiG9w0BCQUxDxcNMTMwNTE1MTYwODQ3
// SIG // WjAjBgkqhkiG9w0BCQQxFgQUymWFMu2KSfYyvQY8J6mc
// SIG // V1kscXgwDQYJKoZIhvcNAQEFBQAEggEAZVDGFLvajYI0
// SIG // QjM8lX8+LcIy9PpPwPgPKmlbqYsOmJ9DD9grBJrupJHn
// SIG // ZsjbMsDIuEm+FwSYWYpQ8HYKIaP+JL/4slN/XVNf3xpI
// SIG // 5h4RkBcaY50T0n1W4vTgpmyq5QS7PMSAoEqFYSBAhqU9
// SIG // UN1SzBGC81bS5+j0Bu+aUihaX5eurgHYLWW/00Z6eVfV
// SIG // YoNFkUYKxfEsSiUOc4R3ykfVA+QDjYgY+cCtOSXuCE8x
// SIG // WIbq/311LAfFTiiQR4HdEhLqo5AceXfbZejNHaIsYHsM
// SIG // ZGPZubVo3KDUibUcsj3sC0GV7GAvqSHO8lJUz4ZEPE3P
// SIG // z1jIE1jKT1tWbBUdliPD0A==
// SIG // End signature block
