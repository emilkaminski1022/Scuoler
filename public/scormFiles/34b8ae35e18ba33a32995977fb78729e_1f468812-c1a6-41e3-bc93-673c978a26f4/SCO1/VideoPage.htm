<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <title></title>
    <link href="Player/css/jquery-ui-1.8.17.custom.css" rel="stylesheet" type="text/css" />
    <link href="Player/js/libs/videoplayer/css/playerframework.min.css" rel="stylesheet" type="text/css" />
    <script type="text/javascript" src="Player/js/libs/jquery-1.7.1.min.js"></script>
    <script type="text/javascript" src="Player/js/libs/jquery-ui-1.8.17.custom.min.js"></script>
    <script type="text/javascript" src="Player/js/libs/videoplayer/playerframework.min.js"></script>

    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>

    <style type="text/css">
        body, html {margin: 0px;padding:0px;overflow:hidden;}

        /* put the loading image more toward the center versus upper left */
        .pf-throbber-container{position:absolute;left:50%;top:50%;}

      /* we do not need the built-in playbar so no need to style it  */
      /*.pf-controls {position:absolute;bottom:150px;left:0px;width:100%;z-index:100;}*/

        /* ERROR div and links */
        #showit {display:none;position:absolute;z-index:101000;left:0px;top:0px;width:100%;height:100%;padding:10px;text-align:center;background-color:#400000;}
        .ErrorNumber, .ErrorFile, .ErrorComplete, .ErrorRetry, .ErrorHelp, .ErrorDiagnostic{padding:5px;}
        .ErrorFile a, .ErrorComplete a, .ErrorHelp a, .ErrorDiagnostic a{color:white;}
        
        /* Container styles */
        #videoContainer{position:absolute;background:black;}
        #myVideoContainer {position:absolute;width:100%;height:100%;left:0px;top:0px;overflow:hidden;}
        #videoOutsideTop, #videoOutsideLeft, #videoOutsideRight, #videoTop, #videoLeft, #videoRight, #videoBottom, #videoFull{position:absolute;display:none;}
        #videoOutsideTop{height:20%;max-height:100px;width:100%;bottom:100%;left:0px;}
        #videoOutsideLeft{width:15%;max-width:150px;height:100%;right:100%;top:0px;}
        #videoOutsideRight{width:15%;max-width:150px;height:100%;left:100%;top:0px;}
        #videoTop{height:25%;width:100%;top:0px;left:0px;}
        #videoBottom{height:25%;width:100%;bottom:0px;left:0px;}
        #videoLeft{height:100%;width:50%;top:0px;left:0px;}
        #videoRight{height:100%;width:50%;top:0px;right:0px;}
        #videoFull{height:100%;width:100%;top:0px;left:0px;}

        /* Subtitle styles */
        /* turn off the drop shadow to improve the look of captions on IE10 */
        .pf-caption-cues-container {position:absolute;bottom:0px;left:0px;width:100%;height:130px;background:transparent;text-shadow:none;}
        #subtitleArea{width:100%;height:100%;padding:33px;background:black;opacity:0.7;filter:alpha(opacity=70);font:22px/1.4 Segoe UI, Segoe WP;color:White;text-align:center;}
        .miniVideo .pf-caption-cues-container{height:85px;}
        .tinyVideo .pf-caption-cues-container{height:70px;}
        .miniVideo #subtitleArea{padding:10px;font-size:15px;}
        .tinyVideo #subtitleArea{padding:5px;font-size:12px;}
        .fullscreen .pf-caption-cues-container{display:block;}
        .videoHover .pf-caption-cues-container{opacity:0.5;filter:alpha(opacity=50);}
        .videoCaptionsOff .pf-caption-cues-container{display:none;}
        .noCaptions .pf-caption-cues-container{display:none;}

        /* Video controls styles */
        .videoControls{position:absolute;opacity:0;filter:alpha(opacity=0);left:0px;bottom:0px;width:100%;height:100%;padding:70px 35px 0px 35px;z-index:5;background-color:rgba(0, 0, 0, 0.4);}
        .videoControlsBottomOverlay{position:absolute;bottom:0px;left:0px;width:100%;height:130px;background:black;opacity:rgba(0,0,0,0.5);filter:alpha(opacity=50);}
        .miniVideo .videoControlsBottomOverlay{display:none;}
        .videoControlsLeft{position:absolute;bottom:23px;left:35px;max-width:100%;z-index:6;}
        .miniVideo .videoControlsLeft{bottom:0px;left:0px;width:100%}
        .miniVideo .videoControlsLeftRight{float:right;}
        .videoEnded .videoControls, .videoNotStarted .videoControls{opacity:1;filter:alpha(opacity=100);}
        /* Play/pause button */
        .VideoControlsPlayControl {position:absolute;top:50%;left:50%;margin-left:-80px;margin-top:-130px;width:160px;height:160px;}
        .miniVideo .VideoControlsPlayControl{width:20%;margin-left:-10%;margin-top:-110px;z-index:2;}
        .tinyVideo .VideoControlsPlayControl{margin-top:-100px;}
        #VideoPlayPauseButton{cursor:pointer;width:100%;height:100%;border:0px solid transparent;background-color:transparent;background-repeat:no-repeat;background-position:center;background-size:100%;}
        #VideoPlayPauseButton>img{max-width:100%;max-height:100%;}
        #VideoPlayPauseButton:focus{outline:white dotted 1px;}
        .videoHover .videoControls{opacity:1;filter:alpha(opacity=100);}
        /* Timeline slider and label */
        .videoTimeline{position:absolute;width:100%;left:0px;bottom:129px;height:1px;padding:0px 35px;}
        .videoTimeline > .Slider{height:1px;background:#989898;}
        .videoTimeline > .Slider .ui-widget-header{background:white;}
        .videoTimeline > .Slider .ui-slider-handle{width:48px;height:54px;bottom:100%;top:auto;margin-left:-24px;background-color:transparent;background-repeat:no-repeat;background-image:url(Player/theme/dark/images/scrubber.png);background-size:100%;}
        .videoTimeline > .Slider .ui-slider-handle.ui-state-active{background-image:url(Player/theme/dark/images/scrubber.over.png);}
        .videoTimeline > .videoCurrentTime{position:absolute;left:35px;top:5px;cursor:default !important;color:White;color:rgba(255,255,255,0.5);font-size:18px;}
        .videoTimeline > .videoCurrentTime > .currentTime{color:White;}
        .miniVideo .videoTimeline{padding:0px;top:auto;bottom:30px;}
        .miniVideo .videoTimeline > .videoCurrentTime{display:none;}
        .miniVideo .videoTimeline > .Slider .ui-slider-handle{width:40px;height:45px;margin-left:-20px;}
        .tinyVideo .videoTimeline > .Slider .ui-slider-handle{width:24px;height:27px;margin-left:-12px;}
        /* Captions button */
        #VideoCaptionsButton{border:1px solid white;padding:10px;margin-right:30px;float:left;text-decoration:none;font:15px/1 Segoe UI Semibold, Segoe WP Semibold;}
        #VideoCaptionsButton:focus{outline:white dotted 1px;}
        .videoCaptionsOff #VideoCaptionsButton{background:transparent !important;color:White !important;}
        .noCaptions #VideoCaptionsButton{display:none;}
        .miniVideo #VideoCaptionsButton{border-width:0px;margin-right:0px;padding:7px 11px 8px 11px;}
        /* Volume slider and label */
        .videoVolume{position:relative;float:left;margin-right:15px;}
        .videoVolume > .sliderContainer{display:inline-block;}
        .videoVolume .Slider{display:inline-block;background:white;height:11px;width:140px;}
        .videoVolume .Slider .ui-slider-handle{width:0px;height:0px;margin:0px;}
        .videoVolume .Slider .ui-slider-handle:focus{width:5px;height:21px;outline:white dotted 1px;}
        .videoVolume > .videoVolumeLabel{display:inline-block;padding:11px 4px 11px 11px;color:White;font:15px/1 Segoe UI Semibold, Segoe WP Semibold;}
        .videoVolume > #VideoVolumeSelector{display:none;padding:7px 28px 8px 11px;color:White;font:15px/1 Segoe UI Semibold, Segoe WP Semibold;text-decoration:none;}
        .videoVolume > #VideoVolumeSelector > .expandVisual{display:none;}
        .miniVideo .videoVolume{margin-right:5px;}
        .miniVideo .videoVolume > .videoVolumeLabel{display:none;}
        .miniVideo .videoVolume > #VideoVolumeSelector{display:inline-block;}
        .miniVideo .videoVolume > #VideoVolumeSelector > .expandVisual{display:block;}
        .miniVideo .videoVolume.expanded > #VideoVolumeSelector{background:black;}
        .miniVideo .videoVolume > .sliderContainer{position:absolute;z-index:6;background:black;bottom:100%;left:0px;height:0px;width:100%;padding:0px;margin:0px;overflow:hidden;text-align:center;}
        .miniVideo .videoVolume.expanded > .sliderContainer{height:auto;}
        .miniVideo .videoVolume .Slider .ui-slider-handle:focus{width:21px;height:5px;}
        .miniVideo .videoVolume .Slider{width:11px;height:80px;margin-top:10px;}
        .tinyVideo .videoVolume .Slider{width:11px;height:40px;margin-top:10px;}
        /* Speed/quality selectors */
        .videoSpeed, .videoQuality{position:relative;float:left;margin-right:15px;}
        .miniVideo .videoSpeed, .miniVideo .videoQuality{margin-right:5px;}
        #VideoSpeedSelector, #VideoQualitySelector{display:inline-block;padding:11px 28px 11px 11px;color:White;font:15px/1 Segoe UI Semibold, Segoe WP Semibold;text-decoration:none;}
        .miniVideo #VideoSpeedSelector, .miniVideo #VideoQualitySelector{margin-right:0px;padding:7px 28px 8px 11px;}
        .expandVisual{display:block;position:absolute;bottom:13px;right:11px;height:0px;width:0px;border-bottom:10px dashed transparent;border-right-width:10px;border-right-style:solid;}
        .miniVideo .expandVisual{bottom:9px;}
        .miniVideo #VideoSpeedSelector.accent2, .miniVideo #VideoQualitySelector.accent2{background:black !important;}
        .videoSpeed > ul, .videoQuality > ul{position:absolute;z-index:6;background:black;bottom:100%;height:0px;width:100%;list-style-type:none;padding:0px;margin:0px;overflow:hidden;}
        .videoSpeed.expanded > ul, .videoQuality.expanded > ul{height:auto;}
        .videoSpeed > ul > li, .videoQuality > ul > li{list-style-type:none;padding:0px;margin:0px;}
        .videoSpeed > ul > li:first-child, .videoQuality > ul > li:first-child{padding-top:5px;}
        .videoSpeed > ul > li:last-child, .videoQuality > ul > li:last-child{padding-bottom:5px;}
        .videoSpeed > ul > li > a, .videoQuality > ul > li > a{display:block;color:White;padding:6px 11px;font:15px/1 Segoe UI Semibold, Segoe WP Semibold;text-decoration:none;}
        .tinyVideo .videoSpeed, .tinyVideo .videoQuality{display:none;}
        
        /* Transcript/Download buttons */
        .videoControlsRight{position:absolute;right:35px;bottom:26px;margin-right:55px;margin-left:20px;}
        #VideoTranscriptButton{margin-left:15px;margin-top:10px;float:left;padding:6px 0px 6px 38px;font:18px/1 Segoe UI Semibold, Segoe WP Semibold;color:white;text-decoration:none;background-image:url(Player/theme/dark/images/properties24.normal.png);background-position:left top;background-size:30px 30px;background-repeat:no-repeat;}
        #VideoDownloadButton{margin-left:15px;margin-top:10px;float:left;padding:6px 0px 6px 38px;font:18px/1 Segoe UI Semibold, Segoe WP Semibold;color:white;text-decoration:none;background-image:url(Player/theme/dark/images/download24.normal.png);background-position:left top;background-size:30px 30px;background-repeat:no-repeat;}
        .miniVideo .videoControlsRight{top:0px;left:0px;width:100%;height:100%;margin-right:0px;margin-left:0px;}
        .miniVideo #VideoTranscriptButton2, .miniVideo #VideoDownloadButton2{display:none;}
        .miniVideo #VideoTranscriptButton{position:absolute;top:50%;padding-left:0px;padding-top:35px;background-position:center top;font-size:12px;left:50%;margin-left:-30%;margin-top:-45px;}
        .miniVideo #VideoDownloadButton{position:absolute;top:50%;padding-left:0px;padding-top:35px;background-position:center top;font-size:12px;right:50%;margin-right:-30%;margin-top:-45px;}
        .tinyVideo #VideoTranscriptButton, .tinyVideo #VideoDownloadButton{display:none;}
        
        #FullScreenToggle{position:absolute;bottom:25px;right:20px;width:47px;height:39px;}
        #FullScreenToggle:before{content: url(Player/theme/dark/images/fullscreen.enter.png);}
        .miniVideo #FullScreenToggle{bottom:auto;top:5px;right:5px;}
        .fullscreen #FullScreenToggle:before{content:url(Player/theme/dark/images/fullscreen.exit.png);}
    </style>
    <link href="Player/css/pagestyles.css" rel="stylesheet" type="text/css" />
    <link href="Custom/css/playerstyles.css" rel="stylesheet" type="text/css" />
</head>
<body onkeydown="return doKeyDown(event);">
    <div id="videoContainer" style="position:absolute;">
      <div id="myVideoContainer" class="pf-container" oncontextmenu="return false;">
        <div class="videoControls">
          <div class="VideoControlsPlayControl">
            <button id="VideoPlayPauseButton" class="VideoControlsShowPlay" accesskey="P" type="button">
                <img id="VideoPlayPauseButtonImg" alt="" src="Player/theme/dark/images/bigplay.normal.png" />
                <span id="VideoPlayPauseButtonText"  class="visuallyhidden"></span>
            </button>
          </div>
          <div class="videoControlsBottomOverlay"></div>
          <div class="videoTimeline">
            <div class="Slider"></div>
            <div class="videoCurrentTime" aria-hidden="true"></div>
          </div>
          <div class="videoControlsLeft">
            <a href="#" class="accent2" id="VideoCaptionsButton"></a>
            <div class="videoControlsLeftRight">
              <div class="videoVolume">
                <div class="videoVolumeLabel"></div>
                <a href="#" id="VideoVolumeSelector" ><span class="label"></span><span class="expandVisual"></span></a>
                <div class="sliderContainer">
                  <div id="volumeSlider" class="Slider"></div>
                </div>
              </div>
              <div class="videoSpeed">
                <a href="#" id="VideoSpeedSelector"><span class="label"></span><span class="expandVisual"></span></a>
                <ul>
                  <li><a href="#" value="2">2x</a></li>
                  <li><a href="#" value="1.5">1.5x</a></li>
                  <li><a href="#" id="VideoNormalSpeed" value="1"></a></li>
                  <li><a href="#" value="0.75">0.75x</a></li>
                  <li><a href="#" value="0.5">0.5x</a></li>
                </ul>
              </div>
              <div class="videoQuality">
                <a href="#" id="VideoQualitySelector"><span class="label"></span><span class="expandVisual"></span></a>
                <ul></ul>
              </div>
            </div>
          </div>
          <div class="videoControlsRight">
            <a href="#" id="VideoTranscriptButton"></a>
            <a href="#" id="VideoDownloadButton"></a>
          </div>
          <a href="#" id="FullScreenToggle"></a>
        </div>
      </div>
      <div id="videoOutsideTop"></div>
      <div id="videoOutsideLeft"></div>
      <div id="videoOutsideRight"></div>
      <div id="videoLeft"></div>
      <div id="videoRight"></div>
      <div id="videoFull"></div>
      <div id="videoTop"></div>
      <div id="videoBottom"></div>
    </div>

    <div id="showit"></div>

    <script type="text/javascript">

    	var myPlayer = null, vc = null, launchPage = null;
    	var videoPosition = 0, maxVideoPosition = 0;
    	var bDomLoaded = false, handlersAssigned = false;

    	// these vars are used to determine layout needs based on leypoints
    	var needTop = false, needLeft = false, needRight = false;

    	$(window).on('unload', function () {
    		if (vc && vc.courseController.activeVideoController === vc)
    			delete vc.courseController.activeVideoController
    		// reset captions display area
    		if (launchPage && launchPage.player)
    			launchPage.player.courseController.showCaptions("");
    	});

    	function doKeyDown(e) {
    		launchPage.doKeyDown(e);
    	}

    	jQuery.fn.mousehold = function (timeout, f) {
    		if (timeout && typeof timeout == 'function') {
    			f = timeout;
    			timeout = 100;
    		}
    		if (f && typeof f == 'function') {
    			var timer = 0;
    			var fireStep = 0;
    			return this.each(function () {
    				jQuery(this).mousedown(function () {
    					fireStep = 1;
    					var ctr = 0;
    					var t = this;
    					timer = setInterval(function () {
    						ctr++;
    						f.call(t, ctr);
    						fireStep = 2;
    					}, timeout);
    				})

    				clearMousehold = function () {
    					clearInterval(timer);
    					if (fireStep == 1) f.call(this, 1);
    					fireStep = 0;
    				}

    				jQuery(this).mouseout(clearMousehold);
    				jQuery(this).mouseup(clearMousehold);
    			})
    		}
    	}

    	// This function handles loading of the Captions XML file for the video playerframework
    	// we are overriding this function to make it possible to show captions when launched from the hard drive
    	PlayerFramework.xhr = function (options, completeCallback, errorCallback) {
    		/// <summary>
    		///    Wraps an XMLHttpRequest.
    		/// </summary>
    		/// <param name="options" type="Object">
    		///    The options to use for the request (url, etc.)
    		/// </param>
    		/// <param name="completeCallback" type="Function">
    		///    The function to call when the request has completed.
    		/// </param>
    		/// <param name="errorCallback" type="Function">
    		///    The function to call when the request resulted in an error.
    		/// </param>

    		var result = {};

    		// Create a blank caption - we need this because Windows 8 IE10 generates an error when the Captions XML file is not present
    		var blankCaption = '\
                     <tt xml:lang="en"\
                           xmlns="http://www.w3.org/ns/ttml"\
                           xmlns:ttm="http://www.w3.org/ns/ttml#metadata"\
                           xmlns:tts="http://www.w3.org/ns/ttml#styling"\
                            xmlns:ttp="http://www.w3.org/ns/ttml#parameter">\
                           <head>\
                                  <ttm:title>Sample Captions</ttm:title>\
                                  <styling>\
                                         <style xml:id="style01" tts:color="white" tts:fontFamily="Arial" tts:fontSize="16px" tts:textShadow="none"/>\
                                  </styling>\
                                  <layout>\
                                         <region xml:id="region01" style="style01" tts:padding="3px" tts:backgroundColor="black" tts:opacity="0.7"/>\
                                  </layout>\
                           </head>\
                           <body>\
                                  <div region="region01">\
                                  </div>\
                           </body>\
                     </tt>';


    		try {
    			// see if there is a page
    			if (vc.page) {
    				// there is read in the captions file
    				var xml = getXml(vc.page.getVideoCaptionsPath(vc.videoFile.FileName));

    				// see if we got captions content
    				if (xml && xml != "") {
    					// we did, set the captions
    					result.responseXML = xml;

    					completeCallback(result);
    				} else {
    					// got an error, pretend we have a blank set of captions
    					result.responseXML = blankCaption;
    					completeCallback(result);
    					//errorCallback(result);
    				}
    			} else {
    				result.responseXML = blankCaption;
    				completeCallback(result);

    			}
    		} catch (e) {
    			result.responseXML = blankCaption;
    			completeCallback(result);
    		}
    	};

    	// this function is called when the transcript is hidden
    	function transcriptHidden() {
    		vc.courseController.isTranscriptShowing = false;
    		// change button text
    		$("#VideoTranscriptButton").html(launchPage.Resources.VideoPlayer_TranscriptShow_Text);
    	}

    	// handle click on video transcript button
    	function videoTranscript(show) {
    		// get a shortcut to the course controller
    		var cc = launchPage.player.courseController;

    		// see if the video transcript is showing
    		if (!show) {
    			// it is, hide it
    			cc.hideTranscriptPopup();

    			// change button text
    			$("#VideoTranscriptButton").html(launchPage.Resources.VideoPlayer_TranscriptShow_Text);
    		} else {
    			// it is not, show it
    			var transcriptFile = vc.videoFile.UseTranscript ? vc.page.getVideoTranscriptPath(vc.videoFile.FileName) : vc.page.getVideoCaptionsPath(vc.videoFile.FileName);
    			cc.showTranscriptPopup(transcriptFile, vc.videoFile.UseTranscript, transcriptHidden);

    			// change button text
    			$("#VideoTranscriptButton").html(launchPage.Resources.VideoPlayer_TranscriptHide_Text);
    		}
    	}

    	// create a handler to detect the complete loading of the DOM
    	// we need to wait until the DOM is loaded to make sure it is OK to access video properties
    	$(document).ready(function () {
    		// the DOM is loaded, remember this so later on we know it is OK to proceed with video loading
    		bDomLoaded = true;

    		// get Launch.htm parent, notice that video page can be loaded in an iframe of a content window
    		launchPage = parent.player ? parent : parent.parent;
    		// check if in high contrast mode
    		if (launchPage.player.courseController.course.settings.HighContrastModeActive) {
    			// we are in high-contrast mode, add specific stylesheets
    			$('head').append('<link rel="stylesheet" href="Player/css/highcontrast.css" type="text/css"/>');
    			$('head').append('<link rel="stylesheet" href="Custom/css/highcontrast.css" type="text/css"/>');
    		}
    	});

    	// hide the error message
    	function hideError(videoController) {
    		$("#showit").hide();
    		location.reload();
    	}

    	function initControls() {
    		var fadeControlsTimer = null,
            fadeControls = function () {
            	//if ($('#videoContainer').find(':hover').length === 0) {
            	if (!$('#videoContainer').hasClass('videoEnded') && !$('#videoContainer').hasClass('videoNotStarted')) {
            		$('.videoControls').animate({ opacity: '0' }, 300, function () {
            			$('#videoContainer').removeClass('videoHover');
            			$(this).css('opacity', '0');
            		});
            	}
            	else {
            		$('#videoContainer').removeClass('videoHover');
            	}
            	// }
            },
            showControls = function () {
            	clearTimeout(fadeControlsTimer);
            	$('.videoControls').stop().css('opacity', '');
            	$('#videoContainer').addClass('videoHover');
            	//if ($('#videoContainer').find(':hover').length === 0)
            	fadeControlsTimer = setTimeout(fadeControls, 3000);
            };

    		$('#videoContainer').on('focusin', showControls);
    		$('#videoContainer').on('mouseenter', showControls);
    		$('#videoContainer').on('mousemove', showControls);
    		$('#videoContainer').on('mouseout', function () {
    			clearTimeout(fadeControlsTimer);
    			fadeControlsTimer = setTimeout(fadeControls, 1000);
    		});
    		$('#videoContainer').on('click', showControls);


    		$(".videoTimeline > .Slider").slider({
    			range: "min",
    			slide: function (event, ui) {
    				// see if we want to keep the user from skipping ahead
    				if (vc && vc.videoFile.videoPreventSkipAhead) {
    					// we do, allow the scrubber to move only backwards
    					if (ui.value >= maxVideoPosition)
    						return false;
    				}

    				// user has moved the slider, change the playback time
    				if (myPlayer) {
    					myPlayer.currentTime(ui.value);
    				}
    			}
    		});

    		$(".videoVolume .Slider").slider({
    			range: "min",
    			min: 0,
    			max: 100,
    			slide: function (event, ui) {
    				var sliderValue = ui.value / 100;
    				// user has moved the slider, change the playback time
    				if (myPlayer) myPlayer.volume(sliderValue);
    				myPlayer.muted(sliderValue == 0);
    			}
    		}).children('.ui-slider-range, .ui-slider-handle').addClass('accent2');

    		$('#videoContainer .ui-slider-handle').on('keydown', function (e) {
    			//if left or right arrow key is pressed on slider handle, show the controls
    			(((e.keyCode || e.which) === 37) || ((e.keyCode || e.which) === 39)) && showControls()
    		});

    		// add a name for the play/pause button for the screen reader
    		if (vc.videoFile.videoClickToPlay)
    			$("#VideoPlayPauseButtonText").html(launchPage.Resources.MediaControls_PauseVideo_Menu_Text);
    		else
    			$("#VideoPlayPauseButtonText").html(launchPage.Resources.MediaControls_PlayVideo_Menu_Text);

    		$("#VideoPlayPauseButton").on('click', function (event) {
    			if (myPlayer) {
    				// we can, play or pause based on the state
    				if (myPlayer.paused()) {
    					myPlayer.play();
    					if ($('#videoContainer').find(':hover').length === 0) {
    						clearTimeout(fadeControlsTimer);
    						fadeControls();
    					}
    				} else {
    					myPlayer.pause();
    					showControls();
    				}
    			}
    			// prevent event bubbling so that to stop video controls close event
    			event.stopPropagation();
    		});

    		// handle captions show/hide click event
    		$("#VideoCaptionsButton").on('click', function () {
    			if ($('#videoContainer').hasClass('videoCaptionsOff')) {
    				$('#videoContainer').removeClass('videoCaptionsOff');
    				$(this).html(launchPage.Resources.VideoPlayer_CaptionsHide_Text);
    				vc.courseController.course.settings.ShowVideoCaptions = true;
    			}
    			else {
    				$('#videoContainer').addClass('videoCaptionsOff');
    				$(this).html(launchPage.Resources.VideoPlayer_CaptionsShow_Text);
    				vc.courseController.course.settings.ShowVideoCaptions = false;
    			}
    		});

    		// hide the captions reader from the screen reader
    		$(".pf-caption-cues-container").attr("aria-hidden", "true");

    		// add the label to the video transcript
    		$("#VideoTranscriptButton").html(launchPage.Resources.VideoPlayer_TranscriptShow_Text);


    		$("#VideoTranscriptButton").on('click', function () {
    			// show video transcript dialog
    			videoTranscript(!vc.courseController.isTranscriptShowing);
    		});

    		var downloadableItem = vc.getDownloadableManifestItem();
    		if (downloadableItem) {
    			$("#VideoDownloadButton").html(launchPage.Resources.VideoPlayer_DownloadVideo_Text);
    			$("#VideoDownloadButton").on('click', function () {
    				window.open(vc.videoFile.getFilePath(downloadableItem));
    			});
    		} else {
    			$("#VideoDownloadButton").remove();
    		}

    		if (!vc.canSetQuality)
    			$('.videoQuality').remove();
    		else {
    			var videoQualities = vc.getAvailableVideoQualities();
    			if (videoQualities.length > 1) {
    				for (var i = 0, currentQuality = vc.courseController.course.settings.VideoQuality; i < videoQualities.length; i++)
    					$('.videoQuality > ul').append('<li><a href="#" ' + (videoQualities[i] === currentQuality ? 'class="accent2_text" ' : '') + 'value="' + videoQualities[i] + '">' + (launchPage.Resources["VideoPlayer_" + videoQualities[i] + "_Text"] || "") + '</a></li>');
    			} else {
    				$('.videoQuality').remove();
    			}
    		}

    		$('.videoSpeed > ul a').each(function () {
    			(parseFloat($(this).attr('value')) === vc.courseController.course.settings.VideoPlaybackRate) && $(this).addClass('accent2_text');
    		});

    		var showPopupList = function () {
    			$(this).addClass('expanded');
    			$(this).children('a').addClass('accent2');
    		},
        hidePopupList = function () {
        	$(this).removeClass('expanded');
        	$(this).children('a').removeClass('accent2');
        };
    		$('.videoSpeed, .videoQuality').on('focusout', function () {
    			if ($(this).find(':focus').length === 0 && $(this).find(':hover').length === 0)
    				hidePopupList.call(this);
    		});
    		$('.videoSpeed, .videoQuality').on('mouseout', function (e) {
    			// see if we have something other than Firefox
    			if (e.toElement) {
    				// non Firefox browser, get the element that will have focus
    				var toElement = e.toElement;
    			} else {
    				// have firefox, use the firefox property ot get the leement that will have focus
    				var toElement = e.relatedTarget;
    			}

    			if ($(this).children('ul').find(':focus').length === 0 && $(this).find(toElement).length === 0)
    				hidePopupList.call(this);
    		});
    		$('.videoSpeed > ul, .videoQuality > ul').on('focusin', function () {
    			showPopupList.call(this.parentElement);
    		});
    		$('#VideoSpeedSelector, #VideoQualitySelector').on('click', function () {
    			$(this).focus();
    			if ($(this).parent().hasClass('expanded'))
    				hidePopupList.call(this.parentElement);
    			else
    				showPopupList.call(this.parentElement);
    		});
    		$('.videoSpeed > ul a').on('click', function () {
    			vc.courseController.course.settings.VideoPlaybackRate = parseFloat($(this).attr('value'));
    			$("video").prop("playbackRate", vc.courseController.course.settings.VideoPlaybackRate);
    			$('.videoSpeed > ul a').removeClass('accent2_text');
    			$(this).addClass('accent2_text');
    		});

    		$('.videoQuality > ul a').on('click', function () {
    			if (vc.courseController.course.settings.VideoQuality !== $(this).attr('value')) {
    				vc.courseController.course.settings.VideoQuality = $(this).attr('value');
    				// update the video manifest item to match the choice of quality, and set video source based on the selected manifest item
    				var manifestItem = vc.getManifestItem();
    				var sSrc = vc.videoFile.getFilePath(manifestItem);
    				var sMimeType = manifestItem ? manifestItem.getMimeType() : 'video/mp4; codecs="avc1.42E01E, mp4a.40.2"';
    				var autoplay = myPlayer.paused() ? "" : "autoplay";
    				//reset the video source
    				myPlayer.mediaPlugin.onUnloadingMediaPlugin();
    				myPlayer.mediaPlugin.element.parentNode.removeChild(myPlayer.mediaPlugin.element);
    				myPlayer.options.autoplay = autoplay;
    				myPlayer.options.sources = [{ src: sSrc, type: sMimeType}];
    				myPlayer.setMediaPlugin();
    			}
    			$('.videoQuality > ul a').removeClass('accent2_text');
    			$(this).addClass('accent2_text');
    		});

    		$('.videoVolume').on('focusout', function () {
    			if ($(this).find(':focus').length === 0 && $(this).find(':hover').length === 0)
    				$('.videoVolume').removeClass('expanded');
    		}).on('mouseout', function (e) {
    			if ($(this).find(':focus').length === 0 && $(this).find(e.toElement).length === 0)
    				$('.videoVolume').removeClass('expanded');
    		});
    		$('.videoVolume > .sliderContainer').on('focusin', function () {
    			$('.videoVolume').addClass('expanded');
    		});
    		$("#VideoVolumeSelector").on('click', function () {
    			$(this).focus();
    			if ($('.videoVolume').hasClass('expanded'))
    				$('.videoVolume').removeClass('expanded');
    			else
    				$('.videoVolume').addClass('expanded');
    		});

    		// handle toggling of full screen mode
    		$('#FullScreenToggle').on('click', function () {
    			// toggle the full screen setting
    			vc.courseController.course.settings.VideoFullScreen = !vc.courseController.course.settings.VideoFullScreen;

    			// see if we are displaying the transcript button
    			if (vc.hasTranscriptButton) {
    				// we are, see if we are now entering full screen mode
    				if (vc.courseController.course.settings.VideoFullScreen) {
    					// we are, hide the transcript button to keep the user from trying to show the transcript
    					// the transcript cannot be seen when showing full screen
    					$("#VideoTranscriptButton").hide();
    				} else {
    					// we are not in full screen mode, so restore the transcritp button
    					$("#VideoTranscriptButton").show();
    				}
    			}

    			// show the user the selected normal or full screen mode
    			vc.setVideoDisplay(vc.courseController.course.settings.VideoFullScreen);
    		});

    		$('#VideoQualitySelector > span.label').html(launchPage.Resources.VideoPlayer_VideoQuality_Text);
    		$('#VideoHighQuality').html(launchPage.Resources.VideoPlayer_VideoQualityHigh_Text);
    		$('#VideoStandardQuality').html(launchPage.Resources.VideoPlayer_VideoQualityStandard_Text);
    		$('#VideoSpeedSelector > span.label').html(launchPage.Resources.VideoPlayer_VideoSpeed_Text);
    		$('#VideoDoubleSpeed').html(launchPage.Resources.VideoPlayer_VideoSpeedDouble_Text);
    		$('#VideoNormalSpeed').html(launchPage.Resources.VideoPlayer_VideoSpeedNormal_Text);
    		$('#VideoHalfSpeed').html(launchPage.Resources.VideoPlayer_VideoSpeedHalf_Text);
    		$('.videoVolumeLabel').html(launchPage.Resources.VideoPlayer_VideoVolume_Text);
    		$('#VideoTranscriptButton').attr("title", launchPage.Resources.VideoPlayer_Transcript_Text);
    		$('#VideoDownloadButton').attr("title", launchPage.Resources.VideoPlayer_Download_Text);
    		$('#FullScreenToggle').attr("title", launchPage.Resources.VideoPlayer_FullScreen_Text);
    		$('.videoTimeline > .Slider > .ui-slider-handle').attr("title", launchPage.Resources.VideoPlayer_VideoTimelineSlider_Text);
    		$('.sliderContainer > .Slider > .ui-slider-handle').attr("title", launchPage.Resources.VideoPlayer_VideoVolumeSlider_Text);
    		$('#VideoCaptionsButton').attr("title", launchPage.Resources.VideoPlayer_VideoCaptionsButton_Text);
    		$('#VideoQualitySelector').attr("title", launchPage.Resources.VideoPlayer_VideoQualitySelectorTooltip_Text);
    		$('#VideoSpeedSelector').attr("title", launchPage.Resources.VideoPlayer_VideoSpeedSelectorTooltip_Text);
    	}

    	// this function is called by the videoController to kickoff the display of video
    	var initFunction = function (videoController) {
    		// look through the keypoints to figure out what areas we need to display
    		calcLayout();

    		// get the captions file name from the video file name
    		var captionsFile = videoController.page ? videoController.page.getVideoCaptionsPath(videoController.videoFile.FileName) : "";
    		if (!xmlFileExists(captionsFile)) captionsFile = null;

    		// get video manifest information
    		var manifestItem = videoController.getManifestItem();
    		// make sure course settings video quality is the current media one; the UI needs to display the current video quality.
    		if (manifestItem) videoController.courseController.course.settings.VideoQuality = manifestItem.uiLabel;

    		// get video source based on the selected manifest item
    		var sSrc = videoController.videoFile.getFilePath(manifestItem);
    		var sMimeType = manifestItem ? manifestItem.getMimeType() : 'video/mp4; codecs="avc1.42E01E, mp4a.40.2"';

    		// load the video player using properties from the videoController
    		myPlayer = new PlayerFramework.Player("myVideoContainer",
            {
            	mediaPluginFallbackOrder: ["VideoElementMediaPlugin", "SilverlightMediaPlugin"],

            	controls: "controls",
            	autoplay: videoController.videoFile.videoClickToPlay ? "" : "autoplay",
            	width: "640px", // width and height have to be added for IE8 to work
            	height: "480px",
            	overlayPlayButton: false,
            	poster: "1BlackPixel.png",
            	textTracks:
                [{
                	label: launchPage.Resources.MediaControls_Captions_Header_Text,
                	src: captionsFile,
                	kind: "captions",
                	"default": ""
                }],
            	overlayControls: true,
            	sources: [{ src: sSrc, type: sMimeType}],
            	pluginOptions:
                  {
                  	// Override the default access keys
                  	ControlStripPlugin:
                      {
                      	accessKeys:
                          {
                          	playKey: "P",
                          	muteKey: "M"
                          }
                      }
                  }
            });

    		// initialize click to play video container with a class name that will force the controls to be visible until the video is started
    		if (videoController.videoFile.videoClickToPlay)
    			$('#videoContainer').addClass('videoNotStarted');

    		// ERROR HANDLING
    		ie8_addEventListener(myPlayer, "error", function () {
    			vc.courseController.course.settings.videoRetry++;
    			// there is an error getting the video, show the error message including a hyperlink to the video and the number of retries
    			var s = '<div class="ErrorNumber">' + launchPage.Resources.VideoPlayer_ErrorNumber_Text + (myPlayer.error() ? myPlayer.error().code : "unknown") + "</div>";
    			s += '<div class="ErrorRetry">' + launchPage.Resources.VideoPlayer_ErrorRetry_Text + vc.courseController.course.settings.videoRetry + "</div>";
    			s += '<div class="ErrorFile">' + launchPage.Resources.VideoPlayer_ErrorFile_Text + '<a href="' + videoController.videoFile.getFilePath() + '" target="_blank">' + videoController.videoFile.FileName + '</a></div>';

    			// Allow 2 attempts to fail trying to load a video.
    			// On the second failed attempt, check to see if the video quality the user is trying to load has required="yes" in mediaManifest.xml.
    			// If not, remember the problem by setting a flag in the video controller object to remember record this problem.
    			if (vc.courseController.course.settings.videoRetry == 2) {
    				var mediaManifestItem = vc.getManifestItem();
    				if (mediaManifestItem && !mediaManifestItem.required) {
    					vc.courseController.course.settings.errorOnVideoRetry = true;
    				}
    			}
    			// see if we have retried this more less than 5 times
    			if (vc.courseController.course.settings.videoRetry < 5) {
    				// it is, wait 2 seconds and then hide the error and reload to try to load the video again
    				setTimeout('hideError()', 2000);
    			} else {
    				// see if this video has to be completed
    				if (vc.videoFile.mustPlayAll) {
    					// it does, show a link that allows the user to complete the video and the page
    					s += '<div class="ErrorComplete"><a href="" onclick="vc.videoEnded();return false;">' + launchPage.Resources.VideoPlayer_ErrorMark_Text + '</a></div>';
    				}
    			}

    			// add links for fasthelp an diagnostics
    			s += '<div  class="ErrorHelp"><a href="http://fasthelp" target="_blank">' + launchPage.Resources.VideoPlayer_ErrorHelp_Text + '</a></div>';
    			s += '<div class="ErrorDiagnostic"><a href="http://fasthelp/html5_video_diagnostics" target="_blank">' + launchPage.Resources.VideoPlayer_ErrorDiagnostic_Text + '</a></div>';

    			// show the error
    			$("#showit").html(s);
    			$("#showit").show();
    		}, false);

    		ie8_addEventListener(myPlayer, "stalled", function () {
    			$("#showit").html("Playback stalled" + "<br /> File :" + vc.videoFile.getFilePath());
    			$("#showit").show();

    			myPlayer.sources[0].src = vc.videoFile.getFilePath();
    		}, false);

    		ie8_addEventListener(myPlayer, "progress", function () {
    			$("#showit").hide();
    		}, false);

    		ie8_addEventListener(myPlayer, "play", function () {

    			$("#videoContainer").removeClass('videoPaused').removeClass('videoNotStarted');
    			$('#VideoPlayPauseButtonImg').attr('src', 'Player/theme/dark/images/bigpause.normal.png');
    			$("#VideoPlayPauseButton").attr("title", launchPage.Resources.MediaControls_PauseVideo_Menu_Text);
    			$("#VideoPlayPauseButtonText").html(launchPage.Resources.MediaControls_PauseVideo_Menu_Text);

    			// set last saved playback rate
    			$("video").prop("playbackRate", vc.courseController.course.settings.VideoPlaybackRate);

    			vc.videoStarted();
    		}, false);

    		ie8_addEventListener(myPlayer, "pause", function () {
    			// pause event is also called when video eneded, skip setting pause states when video ended
    			if (!$('#videoContainer').hasClass('videoEnded')) {
    				$("#videoContainer").addClass('videoPaused');
    				$('#VideoPlayPauseButtonImg').attr('src', 'Player/theme/dark/images/bigplay.normal.png');
    			}
    			$("#VideoPlayPauseButton").attr("title", launchPage.Resources.MediaControls_PlayVideo_Menu_Text);
    			$("#VideoPlayPauseButtonText").html(launchPage.Resources.MediaControls_PlayVideo_Menu_Text);

    			vc.videoStopped();
    		}, false);

    		// see if the video player is using Silverlight to play video
    		if ($(".pf-silverlight").length > 0) {
    			// it is, hide the speed controls because they will not work
    			$(".videoSpeed").remove();
    		}

    		// call assignHandlers to do assign event handlers
    		assignHandlers();

    		// show transcript popup if needed
    		videoTranscript(videoController.courseController.isTranscriptShowing);
    	}

    	// handle the ontimeupdate event
    	function handleOntimeupdateEvent() {
    		// see if the currentTime is a valid value
    		if (myPlayer.readyState() < 1 || isNaN(myPlayer.currentTime())) {
    			// it is not, ignore this time event to avoid a problem
    			return;
    		}
    		// reset video retry counter
    		if (vc) vc.courseController.course.settings.videoRetry = 0;

    		// remember the video position
    		videoPosition = myPlayer.currentTime();

    		if (videoPosition > maxVideoPosition) maxVideoPosition = videoPosition;

    		// if video is in "replay" state, and the playback position changes from the end, remove the replay state
    		if (videoPosition < myPlayer.duration()) $('#videoContainer').removeClass('videoEnded');

    		// display current time
    		$(".videoCurrentTime").html(launchPage.views.utils.getMediaTimeDisplayFormat(videoPosition, myPlayer.duration(), true));

    		// update the slider's current location
    		$(".videoTimeline > .Slider").slider("option", "value", Math.round(videoPosition) + "");

    		// see if we have keypoints
    		if (vc.hasKeypoints) {
    			// we do, loop through the list of keypoints to see what keypoints should be shown at this time
    			for (var i = 0; i < vc.keyPointsArray.length; i++) {
    				// see if this keypoint should be shown at this time
    				if (videoPosition >= vc.keyPointsArray[i].timeStart && videoPosition <= vc.keyPointsArray[i].timeEnd) {
    					// it should, see if it is already showing
    					if (!vc.keyPointsArray[i].isDisplayed) {
    						// it is not, mark it as showing
    						vc.keyPointsArray[i].isDisplayed = true;

    						// show it
    						showKeyPoint(vc.keyPointsArray[i]);
    					}
    				} else {
    					// this keypoint should not be shown at this time, see if it is showing
    					if (vc.keyPointsArray[i].isDisplayed) {
    						// it is showing, hide it and rememeber we hid it
    						hideKeyPoint(vc.keyPointsArray[i]);
    						vc.keyPointsArray[i].isDisplayed = false;
    					}
    				}
    			}
    		}
    		vc.timeChanged(Math.floor(videoPosition));
    		// show video captions in the footer area when needed
    		if ($("#videoContainer").is(".videoCaptionsOff,.noCaptions,.videoEnded")) {
    			launchPage.player.courseController.showCaptions("");
    		} else {
    			launchPage.player.courseController.showCaptions($(".pf-caption-cues-container").text());
    		}
    	}

    	// the video player is now ready, so set the size of the video and assign some handlers for events
    	function assignHandlers() {
    		// this function is called whenever the video is reloaded due to change video quality selection; the handlers should only be assigned once, so first check if this has been done
    		if (handlersAssigned) {
    			// time update is required
    			if (vc.videoPosition && myPlayer.readyState() >= 1)
    				myPlayer.currentTime(vc.videoPosition - 0);
    			return;
    		}

    		// we can get a bad data, set a timer to call this function again, hopefully when we have good data
    		try {
    			var width = getVideoWidth(myPlayer);
    			var height = getVideoHeight(myPlayer);
    			var currentTime = myPlayer.currentTime();
    			var volume = myPlayer.volume();
    			var duration = myPlayer.duration();

    			if (myPlayer.readyState() <= 1 || width == null || width < 10 || height < 10 || isNaN(currentTime) || isNaN(duration) || isNaN(volume)) {
    				setTimeout("assignHandlers()", 100);
    				return;
    			}

    			// we now have real values for width and height of the source
    			// video, so set the style of the video element to these values
    			$('#videoContainer').css('width', width + 'px');
    			$('#videoContainer').css('height', height + 'px');
    		} catch (e) {
    			setTimeout("assignHandlers()", 100);
    			return;
    		}

    		// init custom play bar if not in IE8
    		initControls();

    		// resize the video player as needed
    		setSize();

    		// remove the native control bar for IE 8 and above
    		$(".pf-controls").remove();

    		// create a handler for the onended event
    		ie8_addEventListener(myPlayer, "ended", handleOnendedEvent, false);

    		// create a handler for the ontimeupdate event
    		ie8_addEventListener(myPlayer, "timeupdate", handleOntimeupdateEvent, false);

    		// set the max value to the length of the video
    		$(".videoTimeline > .Slider").slider({
    			min: 0,
    			max: Math.round(myPlayer.duration()),
    			value: 0
    		});

    		// get the captions file name from the video file name
    		var captionsFile = vc.page ? vc.page.getVideoCaptionsPath(vc.videoFile.FileName) : "";
    		// set the captionsFile to "" if we cannot find the file OR if we are offline
    		if (xmlFileExists(captionsFile)) {
    			$('#VideoCaptionsButton').html(launchPage.Resources.VideoPlayer_CaptionsShow_Text);
    			// hide video captions panel if last time was off
    			if (!vc.courseController.course.settings.ShowCaptions && !vc.courseController.course.settings.ShowVideoCaptions) {
    				$('#videoContainer').addClass('videoCaptionsOff');
    			}

    			// we have captions so the transcript button will be enabled, remember this so we can show/hide it later with the full screen button
    			vc.hasTranscriptButton = true;
    		} else {
    			var useTranscript = vc.videoFile ? vc.videoFile.UseTranscript : false;

    			// see if we want to use the video transcript
    			if (useTranscript) {
    				// we do, remember this so we can show/hide it later with the full screen button
    				vc.hasTranscriptButton = true;
    			} else {
    				// no transcript button used, remember
    				vc.hasTranscriptButton = false;

    				// hide the transcript button
    				$("#VideoTranscriptButton").hide();
    			}
    			$('#videoContainer').addClass('noCaptions');
    		}

    		//set default remaining time
    		$(".videoCurrentTime").html(launchPage.views.utils.getMediaTimeDisplayFormat(myPlayer.currentTime(), myPlayer.duration(), true));

    		// create a handler for volume change
    		ie8_addEventListener(myPlayer, "volumechange", handleOnVolumeChangeEvent, false);

    		// set the initial volume
    		myPlayer.volume(vc.volume / 100);

    		// create a handler to detect when the metadata is loaded - we need the metadata loaded before we can set the current time
    		ie8_addEventListener(myPlayer, "loadedmetadata", handleLoadedMetadataEvent);
    		// see if the video controller has a current time to start the video
    		// and check the readyState property so see if the metadata has been loaded
    		if (vc.videoPosition && myPlayer.readyState() >= 1)
    		// the metadata has been loades, so it should be OK to set the time
    			myPlayer.currentTime(vc.videoPosition - 0);

    		vc.stop = function () {
    			if (!myPlayer.paused())
    				myPlayer.pause()
    		}

    		vc.play = function () {
    			if (myPlayer.paused())
    				myPlayer.play()
    		}

    		handlersAssigned = true;
    	}

    	// handle the loadedmetadata event
    	function handleLoadedMetadataEvent() {
    		// now that the metadata is loaded, we can set the time
    		if (vc.videoPosition)
    			myPlayer.currentTime(vc.videoPosition - 0);
    	}

    	// handle the onended event
    	function handleOnendedEvent() {
    		// tell the video controller the movie has ended
    		vc.videoEnded();

    		$('#videoContainer').addClass('videoEnded');
    		$('#VideoPlayPauseButtonImg').attr('src', 'Player/theme/dark/images/bigreplay.normal.png');
    		$("#VideoPlayPauseButtonText").html(launchPage.Resources.MediaControls_PlayVideo_Menu_Text);
    	}

    	// handle the onvolumechange event
    	function handleOnVolumeChangeEvent() {
    		var volume = Math.round(myPlayer.volume() * 100);
    		// tell the video controller the new volume
    		vc.volumeChanged(volume);

    		// change volume slider value
    		$(".videoVolume .Slider").slider("option", "value", volume + "");
    	}

    	// show a keypoint item in the required container
    	function showKeyPoint(kp) {
    		// see if the keypoint is a text or image
    		if (kp.type == "text") {
    			// it is text, show the text in the corresponding location
    			$("#video" + kp.position).html('<div style="opacity:1;">' + kp.text + '</div>');
    		} else {
    			// must be an image, show it
    			$("#video" + kp.position).html('<img src="../SCO1/' + vc.page.getKeyPointsImagesPath() + kp.imageFile + '"/>');
    		}

    		// set the background color and opacity
    		document.getElementById("video" + kp.position).style.backgroundColor = kp.backgroundColor;
    		document.getElementById("video" + kp.position).style.opacity = kp.opacity;

    		// show the div
    		$("#video" + kp.position).show();
    	}

    	// hide a keypoint item in the required container
    	function hideKeyPoint(kp) {
    		// remove the contents
    		$("#video" + kp.position).html("");
    		// hide the div
    		$("#video" + kp.position).hide();
    	}

    	// calculate the layout based on the keypoints we have
    	function calcLayout() {
    		// see if we have any keypoints
    		if (vc.hasKeypoints) {
    			// we do, loop through the array of keypoints to see what layout we need
    			for (var i = 0; i < vc.keyPointsArray.length; i++) {
    				// update layout vars based on the position of this keypoint
    				switch (vc.keyPointsArray[i].position) {
    					case "OutsideLeft":
    						needLeft = true;
    						break;
    					case "OutsideTop":
    						needTop = true;
    						break;
    					case "OutsideRight":
    						needRight = true;
    						break;
    				}
    			}
    		}
    	}

    	// adjusts the size of the video - called after the video player is loaded an onresize
    	function setSize() {
    		try {
    			var videoContainer = $('#videoContainer'),
                videoOutsideLeft = $('#videoOutsideLeft'),
                videoOutsideRight = $('#videoOutsideRight'),
                videoOutsideTop = $('#videoOutsideTop');

    			// set the available space to the space inside the iframe
    			var containerDimensions = { width: $(vc.iframeWindow).innerWidth(), height: $(vc.iframeWindow).innerHeight() };

    			//size outside keypoint regions to a percentage of the overall height and width
    			videoOutsideLeft.css('width', 0.1 * containerDimensions.width);
    			videoOutsideRight.css('width', 0.1 * containerDimensions.width);
    			videoOutsideTop.css('height', 0.15 * containerDimensions.height);

    			//adjust available space to accommodate key point regions outside the video container
    			needTop && (containerDimensions.height -= $('#videoOutsideTop').outerHeight());
    			(needLeft || needRight) && (containerDimensions.width -= $('#videoOutsideLeft').outerWidth());
    			(needLeft || needRight) && (containerDimensions.width -= $('#videoOutsideRight').outerWidth());

    			// get the aspect ratio of the div we have to show the player
    			var aspectScreen = containerDimensions.width / containerDimensions.height;

    			// get the video aspect ratio - adjust the video height to handle the additional height for the captions
    			var aspectVideo = getVideoWidth(myPlayer) / getVideoHeight(myPlayer);

    			// see if the div aspect ratio is greater than the video aspect ratio
    			if (aspectScreen > aspectVideo) {
    				// it is, this means we cannot use the full width of widthCenter - if we did we would cut off the bottom of the video
    				// so adjust the width
    				containerDimensions.width = Math.floor(containerDimensions.height * aspectVideo);
    			}

    			// see if we do not want to stretch the video
    			if (!vc.videoFile.videoStretchToFit) {
    				// we do not, see if the width available for the video is greater than the width we have available
    				if (containerDimensions.width > getVideoWidth(myPlayer)) {
    					// it is, reduce the width to the actual width of the video
    					containerDimensions.width = getVideoWidth(myPlayer);
    				}
    			}

    			// set the container height to respect aspect ratio
    			containerDimensions.height = Math.floor(containerDimensions.width / aspectVideo);

    			var containerTop = needTop ? $('#videoOutsideTop').outerHeight() : 0;

    			// apply the calculated dimensions to all of the tags containing the video
    			videoContainer.css({ width: containerDimensions.width + 'px', height: containerDimensions.height + 'px', left: Math.floor(($(vc.iframeWindow).innerWidth() - containerDimensions.width) / 2) + 'px', top: containerTop + 'px' });
    			myPlayer.options.width = containerDimensions.width + 'px';
    			myPlayer.options.height = containerDimensions.height + 'px';
    			videoContainer.find('.pf-video').css('width', containerDimensions.width + 'px');
    			videoContainer.find('.pf-video').css('height', containerDimensions.height + 'px');
    			var myVideoContainer = $('#myVideoContainer');
    			myVideoContainer.css('width', containerDimensions.width + 'px');
    			myVideoContainer.css('height', containerDimensions.height + 'px');

    			var leftControls = $('.videoControlsLeft'), rightControls = $('.videoControlsRight');

    			rightControls.css('width', '');
    			if (containerDimensions.width >= 725) {
    				if (videoContainer.hasClass('miniVideo') || videoContainer.hasClass('tinyVideo')) {
    					videoContainer.removeClass('miniVideo').removeClass('tinyVideo');
    					$('#VideoCaptionsButton').removeClass('accent2_text').addClass('accent2');
    					$('#VideoQualitySelector > span.label').html(launchPage.Resources.VideoPlayer_VideoQuality_Text);
    					$('.videoQuality > ul > li > a').each(function () {
    						$(this).html(launchPage.Resources["VideoPlayer_" + $(this).attr('value') + "_Text"] || "")
    					});
    					$('#VideoSpeedSelector > span.label').html(launchPage.Resources.VideoPlayer_VideoSpeed_Text);
    					$('#VideoNormalSpeed').html(launchPage.Resources.VideoPlayer_VideoSpeedNormal_Text);
    					$('.videoVolumeLabel').html(launchPage.Resources.VideoPlayer_VideoVolume_Text);
    					$(".videoVolume .Slider").slider({ orientation: 'horizontal' })
    					$(".videoVolume .Slider > .ui-widget-header").css('height', '100%');
    					$('.videoVolume .Slider > .ui-slider-handle').css('bottom', '');
    				}
    				if (leftControls.outerWidth() + rightControls.outerWidth() + parseFloat(rightControls.css('marginLeft')) + parseFloat(rightControls.css('marginRight')) > $('.videoControls').width()) {
    					//set the max width of rightControls to the width of its widest child element
    					for (var i = 0, maxWidth = 0; i < rightControls.children.length; i++)
    						maxWidth = Math.max(maxWidth, rightControls.children().eq(i).outerWidth() + parseFloat(rightControls.children().eq(i).css('marginLeft')));
    					rightControls.css('width', maxWidth + 'px');
    				}
    			}
    			else {
    				if (!videoContainer.hasClass('miniVideo')) {
    					videoContainer.addClass('miniVideo');
    					$('#VideoCaptionsButton').removeClass('accent2').addClass('accent2_text');
    					$('#VideoQualitySelector > span.label').html(launchPage.Resources.VideoPlayerMini_VideoQuality_Text);
    					$('.videoQuality > ul > li > a').each(function () {
    						$(this).html(launchPage.Resources["VideoPlayerMini_" + $(this).attr('value') + "_Text"] || "")
    					});
    					$('#VideoSpeedSelector > span.label').html(launchPage.Resources.VideoPlayerMini_VideoSpeed_Text);
    					$('#VideoNormalSpeed').html(launchPage.Resources.VideoPlayerMini_VideoSpeedNormal_Text);
    					$('#VideoVolumeSelector > span.label').html(launchPage.Resources.VideoPlayerMini_VideoVolume_Text);
    					$(".videoVolume .Slider").slider({ orientation: 'vertical' });
    					$(".videoVolume .Slider > .ui-widget-header").css('width', '100%');
    					$('.videoVolume .Slider > .ui-slider-handle').css('left', '');
    				}
    				if (containerDimensions.width >= 275)
    					videoContainer.removeClass('tinyVideo');
    				else
    					videoContainer.addClass('tinyVideo');
    			}
    		} catch (e) {
    		}
    	}

    	// the video controller calls this function to show the video player
    	function videoView(videoController) {
    		// remember the video controller to use in event handlers
    		vc = videoController;

    		// see if the DOM has been loaded - we need to wait for the DOM to load before we do anything with video
    		if (!bDomLoaded) {
    			// it has not, lets wait and try this again
    			setTimeout("videoView(vc)", 10);
    			return;
    		}

    		// set the onresize handler
    		// call the setSize() function when the window is resized
    		window.onresize = setSize;

    		// init the video player
    		initFunction(videoController);
    	}

    	// return true if the XML file exists
    	function xmlFileExists(sFile) {
    		// get the object that reads in the XML file
    		var xml = getXml(sFile);
    		// return true if we got a valid object and there was XML data inside it
    		if (xml)
    			return true;

    		return false;
    	}


    	// get the XML document from a file name
    	function getXml(sFile) {
    		var xmlHttp, oXML;
    		// try to use the native XML parser
    		try {
    			xmlHttp = new XMLHttpRequest();
    			xmlHttp.open("GET", sFile, false); // Use syncronous communication
    			xmlHttp.send(null);
    			oXML = xmlHttp.responseText;
    		} catch (e) {
    			// can't use the native parser, use the ActiveX instead
    			xmlHttp = getXMLObject();
    			if (xmlHttp) { // Firefox fix
    				xmlHttp.async = false; // Use syncronous communication
    				xmlHttp.resolveExternals = false;
    				xmlHttp.load(sFile);
    				oXML = xmlHttp.xml;
    			}
    		}

    		// return the XML document object
    		return oXML;
    	}

    	// get the best ActiveX object that can read XML
    	function getXMLObject() {
    		// create an array with the XML ActiveX versions
    		var aVersions = new Array("Msxml2.DOMDocument.6.0", "Msxml2.DOMDocument.3.0");

    		// loop through the array until we can create an activeX control
    		for (var i = 0; i < aVersions.length; i++) {
    			// return when we can create the activeX control
    			try {
    				return new ActiveXObject(aVersions[i]);
    			} catch (e) {
    			}
    		}

    		// could not create an activeX, return a null
    		return null;
    	}

    	function getVideoWidth(myPlayer) {
    		try {
    			var htmlWidth = myPlayer.mediaPlugin.element.videoWidth;

    			if (htmlWidth === undefined) {
    				return myPlayer.mediaPlugin.videoWidth();
    			}

    			return htmlWidth;
    		} catch (e) {

    		}

    		return null;
    	}

    	function getVideoHeight(myPlayer) {
    		try {
    			var htmlHeight = myPlayer.mediaPlugin.element.videoHeight;

    			if (htmlHeight === undefined) {
    				return myPlayer.mediaPlugin.videoHeight();
    			}

    			return htmlHeight;
    		} catch (e) {

    		}

    		return null;
    	}

    	// IE8 and below helper functions
    	function ie8_addEventListener(elem, evnt, func) {
    		if (elem.addEventListener)  // W3C DOM
    			elem.addEventListener(evnt, func, false);
    		else if (elem.attachEvent) { // IE DOM
    			elem.attachEvent("on" + evnt, func);
    		}
    	}

    	// check to see if this is IE8
    	function isIE8() {
    		return document.addEventListener === undefined;
    	}
    </script>
</body>
</html>